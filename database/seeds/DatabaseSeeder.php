<?php
use App\Concept;
use App\Course;
use App\Exercise;
use App\Lesson;
use App\Module;
use App\Project;
use App\User;
use App\Enums\Permissions;
use App\Enums\Roles;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Get all permissions that exist in the enum as an array
        $all_permissions = Permissions::toArray();

        // Create all permissions in the database
        foreach ($all_permissions as $permission) {
            Permission::create(['name' => $permission]);
        }

        // Admin role creation
        // The admin role will have the power to do everything on the website
        $admin_role = Role::create(['name' => Roles::ADMIN]);
        foreach ($all_permissions as $permission) {
            $admin_role->givePermissionTo($permission);
        }

        // Power User role creation
        $puser_role = Role::create(['name' => Roles::POWER_USER]);
        $puser_role->givePermissionTo(Permissions::COURSE_VIEW);
        $puser_role->givePermissionTo(Permissions::COURSE_CREATE);
        $puser_role->givePermissionTo(Permissions::COURSE_EDIT);
        $puser_role->givePermissionTo(Permissions::CONCEPT_VIEW);
        $puser_role->givePermissionTo(Permissions::CONCEPT_CREATE);
        $puser_role->givePermissionTo(Permissions::CONCEPT_EDIT);
        $puser_role->givePermissionTo(Permissions::MODULE_VIEW);
        $puser_role->givePermissionTo(Permissions::MODULE_CREATE);
        $puser_role->givePermissionTo(Permissions::MODULE_EDIT);
        $puser_role->givePermissionTo(Permissions::LESSON_VIEW);
        $puser_role->givePermissionTo(Permissions::LESSON_CREATE);
        $puser_role->givePermissionTo(Permissions::LESSON_EDIT);
        $puser_role->givePermissionTo(Permissions::EXERCISE_VIEW);
        $puser_role->givePermissionTo(Permissions::EXERCISE_CREATE);
        $puser_role->givePermissionTo(Permissions::EXERCISE_EDIT);
        $puser_role->givePermissionTo(Permissions::PROJECT_VIEW);
        $puser_role->givePermissionTo(Permissions::PROJECT_CREATE);
        $puser_role->givePermissionTo(Permissions::PROJECT_EDIT);

        // Create roles
        $teacher_role = Role::create(['name' => Roles::TEACHER]);
        $teacher_role->givePermissionTo(Permissions::COURSE_VIEW);
        $teacher_role->givePermissionTo(Permissions::COURSE_CREATE);
        $teacher_role->givePermissionTo(Permissions::COURSE_EDIT);
        $teacher_role->givePermissionTo(Permissions::COURSE_DELETE);
        $teacher_role->givePermissionTo(Permissions::CONCEPT_VIEW);
        $teacher_role->givePermissionTo(Permissions::CONCEPT_CREATE);
        $teacher_role->givePermissionTo(Permissions::CONCEPT_EDIT);
        $teacher_role->givePermissionTo(Permissions::CONCEPT_DELETE);
        $teacher_role->givePermissionTo(Permissions::MODULE_VIEW);
        $teacher_role->givePermissionTo(Permissions::MODULE_CREATE);
        $teacher_role->givePermissionTo(Permissions::MODULE_EDIT);
        $teacher_role->givePermissionTo(Permissions::MODULE_DELETE);
        $teacher_role->givePermissionTo(Permissions::LESSON_VIEW);
        $teacher_role->givePermissionTo(Permissions::LESSON_CREATE);
        $teacher_role->givePermissionTo(Permissions::LESSON_EDIT);
        $teacher_role->givePermissionTo(Permissions::LESSON_DELETE);
        $teacher_role->givePermissionTo(Permissions::EXERCISE_VIEW);
        $teacher_role->givePermissionTo(Permissions::EXERCISE_CREATE);
        $teacher_role->givePermissionTo(Permissions::EXERCISE_EDIT);
        $teacher_role->givePermissionTo(Permissions::EXERCISE_DELETE);
        $teacher_role->givePermissionTo(Permissions::PROJECT_VIEW);
        $teacher_role->givePermissionTo(Permissions::PROJECT_CREATE);
        $teacher_role->givePermissionTo(Permissions::PROJECT_EDIT);
        $teacher_role->givePermissionTo(Permissions::PROJECT_DELETE);

        $teaching_assistant_role = Role::create(['name' => Roles::TEACHING_ASSISTANT]);
        $teaching_assistant_role->givePermissionTo(Permissions::COURSE_VIEW);
        $teaching_assistant_role->givePermissionTo(Permissions::COURSE_EDIT);
        $teaching_assistant_role->givePermissionTo(Permissions::CONCEPT_VIEW);
        $teaching_assistant_role->givePermissionTo(Permissions::CONCEPT_EDIT);
        $teaching_assistant_role->givePermissionTo(Permissions::MODULE_VIEW);
        $teaching_assistant_role->givePermissionTo(Permissions::MODULE_EDIT);
        $teaching_assistant_role->givePermissionTo(Permissions::LESSON_VIEW);
        $teaching_assistant_role->givePermissionTo(Permissions::LESSON_EDIT);
        $teaching_assistant_role->givePermissionTo(Permissions::EXERCISE_VIEW);
        $teaching_assistant_role->givePermissionTo(Permissions::EXERCISE_EDIT);
        $teaching_assistant_role->givePermissionTo(Permissions::PROJECT_VIEW);
        $teaching_assistant_role->givePermissionTo(Permissions::PROJECT_EDIT);

        $student_role = Role::create(['name' => Roles::STUDENT]);
        $student_role->givePermissionTo(Permissions::COURSE_VIEW);
        $student_role->givePermissionTo(Permissions::CONCEPT_VIEW);
        $student_role->givePermissionTo(Permissions::MODULE_VIEW);
        $student_role->givePermissionTo(Permissions::LESSON_VIEW);
        $student_role->givePermissionTo(Permissions::EXERCISE_VIEW);
        $student_role->givePermissionTo(Permissions::PROJECT_VIEW);

        $observer_role = Role::create(['name' => Roles::OBSERVER]);
        $observer_role->givePermissionTo(Permissions::COURSE_VIEW);
        $observer_role->givePermissionTo(Permissions::CONCEPT_VIEW);
        $observer_role->givePermissionTo(Permissions::MODULE_VIEW);
        $observer_role->givePermissionTo(Permissions::LESSON_VIEW);
        $observer_role->givePermissionTo(Permissions::EXERCISE_VIEW);
        $observer_role->givePermissionTo(Permissions::PROJECT_VIEW);

        // Create admin user
        $aUser = User::create([
            'name' => 'Admin Account',
            'email' => 'admin@test.com',
            'password' => bcrypt('testerer1'),
        ]);

        $aUser->assignRole($admin_role);

        // Create power user
        $pUser = User::create([
            'name' => 'Power User',
            'email' => 'poweruser@test.com',
            'password' => bcrypt('testerer1'),
        ]);
        $pUser->assignRole($puser_role);

        // Create two teacher users
        $teacher1User = User::create([
            'name' => 'Teacher 1',
            'email' => 'teacher1@test.com',
            'password' => bcrypt('testerer1'),
        ]);
        $teacher1User->assignRole($teacher_role);

        $teacher2User = User::create([
            'name' => 'Teacher 2',
            'email' => 'teacher2@test.com',
            'password' => bcrypt('testerer1'),
        ]);
        $teacher2User->assignRole($teacher_role);

        // Create two teaching_assistant users
        $ta1User = User::create([
            'name' => 'Teaching Assistant 1',
            'email' => 'ta1@test.com',
            'password' => bcrypt('testerer1'),
        ]);
        $ta1User->assignRole($student_role);
        $ta1User->assignRole($teaching_assistant_role);

        $ta2User = User::create([
            'name' => 'Teaching Assistant 2',
            'email' => 'ta2@test.com',
            'password' => bcrypt('testerer1'),
        ]);
        $ta2User->assignRole($student_role);
        $ta2User->assignRole($teaching_assistant_role);

        // Create student user
        $s1User = User::create([
            'name' => 'Test Student 1',
            'email' => 'teststudent1@test.com',
            'password' => bcrypt('testerer1'),
        ]);
        $s1User->assignRole($student_role);

        // Create student user
        $s2User = User::create([
            'name' => 'Test Student 2',
            'email' => 'teststudent2@test.com',
            'password' => bcrypt('testerer1'),
        ]);
        $s2User->assignRole($student_role);

        // Create student user
        $s3User = User::create([
            'name' => 'Test Student 3',
            'email' => 'teststudent3@test.com',
            'password' => bcrypt('testerer1'),
        ]);
        $s3User->assignRole($student_role);

        // Create an obersver user
        $o1User = User::create([
            'name' => 'Observer 1',
            'email' => 'oberver1@test.com',
            'password' => bcrypt('testerer1'),
        ]);
        $o1User->assignRole($observer_role);

        //TODO: Update these objects to use the new structure (ie. concepts in courses, modules in concepts, etc...)
        // // create admin's exercises and courses.
        // Exercise::create([
        //     'prompt' => 'Test Exercise 1',
        //     'test_code' => '#test_code',
        //     'user_id' => $aUser->id,
        // ]);
        // Exercise::create([
        //     'prompt' => 'Test Exercise 2',
        //     'test_code' => '#test_code',
        //     'user_id' => $aUser->id,
        // ]);
        // Exercise::create([
        //     'prompt' => 'Test Exercise 3',
        //     'test_code' => '#test_code',
        //     'user_id' => $aUser->id,
        // ]);
        // Exercise::create([
        //     'prompt' => 'Test Exercise 4',
        //     'test_code' => '#test_code',
        //     'user_id' => $aUser->id,
        // ]);
        // Exercise::create([
        //     'prompt' => 'Test Exercise 5',
        //     'test_code' => '#test_code',
        //     'user_id' => $aUser->id,
        // ]);
        // Project::create([
        //     'name' => 'Test Project 1',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'prompt' => 'Prompt 1',
        //     'user_id' => $aUser->id,
        // ]);
        // Project::create([
        //     'name' => 'Test Project 2',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'prompt' => 'Prompt 2',
        //     'user_id' => $aUser->id,
        // ]);
        // Project::create([
        //     'name' => 'Test Project 3',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'prompt' => 'Prompt 3',
        //     'user_id' => $aUser->id,
        // ]);
        // Lesson::create([
        //     'name' => 'Test Lesson 1',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'user_id' => $aUser->id,
        // ]);
        // Lesson::create([
        //     'name' => 'Test Lesson 2',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'user_id' => $aUser->id,
        // ]);
        // Module::create([
        //     'name' => 'Test Module 1',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'user_id' => $aUser->id,
        // ]);
        // Module::create([
        //     'name' => 'Test Module 2',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'user_id' => $aUser->id,
        // ]);
        // Course::create([
        //     'name' => 'Test Course 1',
        //     'user_id' => $aUser->id,
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        // ]);

        // // create power users's exercises and courses.
        // Course::create([
        //     'name' => 'Power Course 1',
        //     'user_id' => $pUser->id,
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        // ]);

        // // modules for course
        // Module::create([
        //     'name' => 'Power Module 1',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'user_id' => $pUser->id,
        // ]);
        // Module::create([
        //     'name' => 'Power Module 2',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'user_id' => $pUser->id,
        // ]);

        // Exercise::create([
        //     'prompt' => 'Power Exercise 1',
        //     'test_code' => '#test_code',
        //     'user_id' => $pUser->id,
        // ]);
        // Exercise::create([
        //     'prompt' => 'Power Exercise 2',
        //     'test_code' => '#test_code',
        //     'user_id' => $pUser->id,
        // ]);
        // Exercise::create([
        //     'prompt' => 'Power Exercise 3',
        //     'test_code' => '#test_code',
        //     'user_id' => $pUser->id,
        // ]);
        // Exercise::create([
        //     'prompt' => 'Power Exercise 4',
        //     'test_code' => '#test_code',
        //     'user_id' => $pUser->id,
        // ]);
        // Exercise::create([
        //     'prompt' => 'Power Exercise 5',
        //     'test_code' => '#test_code',
        //     'user_id' => $pUser->id,
        // ]);
        // Project::create([
        //     'name' => 'Power Project 1',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'prompt' => 'Prompt 1',
        //     'user_id' => $pUser->id,
        // ]);
        // Project::create([
        //     'name' => 'Power Project 2',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'prompt' => 'Prompt 2',
        //     'user_id' => $pUser->id,
        // ]);
        // Project::create([
        //     'name' => 'Power Project 3',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'close_date' => '2018-05-15 02:01:54',
        //     'prompt' => 'Prompt 3',
        //     'user_id' => $pUser->id,
        // ]);
        // Lesson::create([
        //     'name' => 'Power Lesson 1',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'user_id' => $pUser->id,
        // ]);
        // Lesson::create([
        //     'name' => 'Power Lesson 2',
        //     'open_date' => '2018-05-15 02:01:54',
        //     'user_id' => $pUser->id,
        // ]);

        //self::createTestCourse();
        self::createFilledTestCourse();
    }

    /**
     * Create a fully populated course with its object relationships defined.
     */
    public function createTestCourse()
    {
        // The course owner will be the user with an id of 1
        $user = User::find(1);

        // Create all the objects
        $course = Course::create([
            'name' => 'Test Course 1',
            'open_date' => '2018-05-15 02:01:54',
            'close_date' => '2018-10-15 02:01:54',
            'user_id' => $user->id,
        ]);

        $concept1 = Concept::create([
            'name' => 'Test Concept 1',
            'course_id' => $course->id,
            'user_id' => $user->id,
        ]);

        $module1 = Module::create([
            'name' => 'Test Module 1',
            'open_date' => '2018-05-15 02:01:54',
            'concept_id' => $concept1->id,
            'user_id' => $user->id,
        ]);

        $lesson1 = Lesson::create([
            'name' => 'Test Lesson 1',
            'module_id' => $module1->id,
            'user_id' => $user->id,
        ]);

        $exercise1 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 1',
            'pre_code' => '#this is the code the user will have access to',
            'start_code' => '#this is the code the user will start with',
            'test_code' => '#test_code',
            'lesson_id' => $lesson1->id,
            'user_id' => $user->id,
        ]);

        $exercise2 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 2',
            'pre_code' => "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with\r\nprint("hello world")',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson1->id,
            'previous_exercise_id' => $exercise1->id,
            'user_id' => $user->id,
        ]);

        $exercise3 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 3',
            'pre_code' => '#this is the code the user will have access to',
            'start_code' => '#this is the code the user will start with',
            'test_code' => '#test_code',
            'lesson_id' => $lesson1->id,
            'previous_exercise_id' => $exercise2->id,
            'user_id' => $user->id,
        ]);

        $exercise4 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 4',
            'pre_code' => '#this is the code the user will have access to',
            'start_code' => '#this is the code the user will start with',
            'test_code' => '#test_code',
            'lesson_id' => $lesson1->id,
            'previous_exercise_id' => $exercise3->id,
            'user_id' => $user->id,
        ]);

        $lesson2 = Lesson::create([
            'name' => 'Test Lesson 2',
            'module_id' => $module1->id,
            'previous_lesson_id' => $lesson1->id,
            'user_id' => $user->id,
        ]);

        $exercise5 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 5',
            'pre_code' => '#this is the code the user will have access to',
            'start_code' => '#this is the code the user will start with',
            'test_code' => '#test_code',
            'lesson_id' => $lesson2->id,
            'user_id' => $user->id,
        ]);

        $exercise6 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 6',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson2->id,
            'previous_exercise_id' => $exercise5->id,
            'user_id' => $user->id,
        ]);

        $lesson30 = Lesson::create([
            'name' => 'Test Lesson 1-3',
            'module_id' => $module1->id,
            'previous_lesson_id' => $lesson2->id,
            'user_id' => $user->id,
        ]);

        $exercise31 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 3-1',
            'pre_code' => '#this is the code the user will have access to',
            'start_code' => '#this is the code the user will start with',
            'test_code' => '#test_code',
            'lesson_id' => $lesson30->id,
            'user_id' => $user->id,
        ]);

        $exercise32 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 3-2',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson30->id,
            'previous_exercise_id' => $exercise31->id,
            'user_id' => $user->id,
        ]);
        $exercise33 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 3-3',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson30->id,
            'previous_exercise_id' => $exercise32->id,
            'user_id' => $user->id,
        ]);
        $exercise34 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 3-4',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson30->id,
            'previous_exercise_id' => $exercise33->id,
            'user_id' => $user->id,
        ]);
        $exercise35 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 3-5',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson30->id,
            'previous_exercise_id' => $exercise34->id,
            'user_id' => $user->id,
        ]);

        $lesson40 = Lesson::create([
            'name' => 'Test Lesson 1-4',
            'module_id' => $module1->id,
            'previous_lesson_id' => $lesson30->id,
            'user_id' => $user->id,
        ]);

        $exercise41 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 4-1',
            'pre_code' => '#this is the code the user will have access to',
            'start_code' => '#this is the code the user will start with',
            'test_code' => '#test_code',
            'lesson_id' => $lesson40->id,
            'user_id' => $user->id,
        ]);

        $exercise42 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 4-2',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson40->id,
            'previous_exercise_id' => $exercise41->id,
            'user_id' => $user->id,
        ]);
        $exercise43 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 4-3',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson40->id,
            'previous_exercise_id' => $exercise42->id,
            'user_id' => $user->id,
        ]);
        $exercise44 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 4-4',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson40->id,
            'previous_exercise_id' => $exercise43->id,
            'user_id' => $user->id,
        ]);
        $exercise45 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 4-5',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson40->id,
            'previous_exercise_id' => $exercise44->id,
            'user_id' => $user->id,
        ]);

        $lesson50 = Lesson::create([
            'name' => 'Test Lesson 1-5',
            'module_id' => $module1->id,
            'previous_lesson_id' => $lesson40->id,
            'user_id' => $user->id,
        ]);

        $exercise51 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 5-1',
            'pre_code' => '#this is the code the user will have access to',
            'start_code' => '#this is the code the user will start with',
            'test_code' => '#test_code',
            'lesson_id' => $lesson50->id,
            'user_id' => $user->id,
        ]);

        $exercise52 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 5-2',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson50->id,
            'previous_exercise_id' => $exercise51->id,
            'user_id' => $user->id,
        ]);
        $exercise53 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 5-3',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson50->id,
            'previous_exercise_id' => $exercise52->id,
            'user_id' => $user->id,
        ]);
        $exercise54 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 5-4',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson50->id,
            'previous_exercise_id' => $exercise53->id,
            'user_id' => $user->id,
        ]);
        $exercise55 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 5-5',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson50->id,
            'previous_exercise_id' => $exercise54->id,
            'user_id' => $user->id,
        ]);
        $exercise56 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 5-6',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson50->id,
            'previous_exercise_id' => $exercise55->id,
            'user_id' => $user->id,
        ]);
        $exercise57 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 5-7',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson50->id,
            'previous_exercise_id' => $exercise56->id,
            'user_id' => $user->id,
        ]);

        $project1 = Project::create([
            'name' => 'Test Project 1',
            'open_date' => '2018-05-17 02:01:54',
            'close_date' => '2018-05-19 02:01:54',
            'prompt' => 'Prompt 1',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module1->id,
            'previous_lesson_id' => $lesson2->id,
            'user_id' => $user->id,
        ]);

        $module2 = Module::create([
            'name' => 'Test Module 2',
            'open_date' => '2018-05-21 02:01:54',
            'concept_id' => $concept1->id,
            'previous_module_id' => $module1->id,
            'user_id' => $user->id,
        ]);

        $project2 = Project::create([
            'name' => 'Test Project 2',
            'open_date' => '2018-05-21 02:01:54',
            'close_date' => '2018-05-26 02:01:54',
            'prompt' => 'Prompt 2',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module2->id,
            'user_id' => $user->id,
        ]);

        $module3 = Module::create([
            'name' => 'Test Module 3',
            'open_date' => '2018-05-27 02:01:54',
            'concept_id' => $concept1->id,
            'previous_module_id' => $module2->id,
            'user_id' => $user->id,
        ]);

        $lesson3 = Lesson::create([
            'name' => 'Test Lesson 3',
            'module_id' => $module3->id,
            'user_id' => $user->id,
        ]);

        $exercise7 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 7',
            'pre_code' => '#this is the code the user will have access to',
            'start_code' => '#this is the code the user will start with',
            'test_code' => '#test_code',
            'lesson_id' => $lesson3->id,
            'user_id' => $user->id,
        ]);

        $exercise8 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 8',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson3->id,
            'previous_exercise_id' => $exercise7->id,
            'user_id' => $user->id,
        ]);

        $exercise9 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 9',
            'pre_code' => '#this is the code the user will have access to',
            'start_code' => '#this is the code the user will start with',
            'test_code' => '#test_code',
            'lesson_id' => $lesson3->id,
            'previous_exercise_id' => $exercise8->id,
            'user_id' => $user->id,
        ]);

        $project3 = Project::create([
            'name' => 'Test Project 3',
            'open_date' => '2018-06-01 02:01:54',
            'close_date' => '2018-06-07 02:01:54',
            'prompt' => 'Prompt 3',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module3->id,
            'previous_lesson_id' => $lesson3->id,
            'user_id' => $user->id,
        ]);

        $project4 = Project::create([
            'name' => 'Test Project 4',
            'open_date' => '2018-06-05 02:01:54',
            'close_date' => '2018-06-07 02:01:54',
            'prompt' => 'Prompt 4',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module3->id,
            'previous_lesson_id' => $lesson3->id,
            'user_id' => $user->id,
        ]);

        $concept2 = Concept::create([
            'name' => 'Test Concept 2',
            'course_id' => $course->id,
            'previous_concept_id' => $concept1->id,
            'user_id' => $user->id,
        ]);

        $module4 = Module::create([
            'name' => 'Test Module 4',
            'open_date' => '2018-06-11 02:01:54',
            'concept_id' => $concept2->id,
            'user_id' => $user->id,
        ]);

        $project5 = Project::create([
            'name' => 'Test Project 5',
            'open_date' => '2018-06-15 02:01:54',
            'close_date' => '2018-06-16 02:01:54',
            'prompt' => 'Prompt 5',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module4->id,
            'user_id' => $user->id,
        ]);

        $lesson4 = Lesson::create([
            'name' => 'Test Lesson 4',
            'module_id' => $module4->id,
            'user_id' => $user->id,
        ]);

        $exercise10 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 10',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson4->id,
            'user_id' => $user->id,
        ]);

        $exercise11 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 11',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson4->id,
            'previous_exercise_id' => $exercise10->id,
            'user_id' => $user->id,
        ]);

        $exercise12 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 12',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson4->id,
            'previous_exercise_id' => $exercise11->id,
            'user_id' => $user->id,
        ]);

        $exercise13 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 13',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson4->id,
            'previous_exercise_id' => $exercise12->id,
            'user_id' => $user->id,
        ]);

        $exercise14 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 14',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson4->id,
            'previous_exercise_id' => $exercise13->id,
            'user_id' => $user->id,
        ]);

        $lesson5 = Lesson::create([
            'name' => 'Test Lesson 5',
            'module_id' => $module4->id,
            'previous_lesson_id' => $lesson4->id,
            'user_id' => $user->id,
        ]);

        $exercise15 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 15',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson5->id,
            'user_id' => $user->id,
        ]);

        $exercise16 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 16',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson5->id,
            'previous_exercise_id' => $exercise15->id,
            'user_id' => $user->id,
        ]);

        $project6 = Project::create([
            'name' => 'Test Project 6',
            'open_date' => '2018-06-16 02:01:54',
            'close_date' => '2018-06-17 02:01:54',
            'prompt' => 'Prompt 6',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module4->id,
            'previous_lesson_id' => $lesson5->id,
            'user_id' => $user->id,
        ]);

        $module5 = Module::create([
            'name' => 'Test Module 5',
            'open_date' => '2018-06-19 02:01:54',
            'concept_id' => $concept2->id,
            'previous_module_id' => $module4->id,
            'user_id' => $user->id,
        ]);

        $lesson6 = Lesson::create([
            'name' => 'Test Lesson 6',
            'module_id' => $module5->id,
            'user_id' => $user->id,
        ]);

        $exercise17 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 17',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson6->id,
            'user_id' => $user->id,
        ]);

        $exercise18 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 18',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson6->id,
            'previous_exercise_id' => $exercise17->id,
            'user_id' => $user->id,
        ]);

        $exercise19 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 19',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson6->id,
            'previous_exercise_id' => $exercise18->id,
            'user_id' => $user->id,
        ]);

        $exercise20 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 20',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson6->id,
            'previous_exercise_id' => $exercise19->id,
            'user_id' => $user->id,
        ]);

        $exercise21 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 21',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson6->id,
            'previous_exercise_id' => $exercise20->id,
            'user_id' => $user->id,
        ]);

        $project7 = Project::create([
            'name' => 'Test Project 7',
            'open_date' => '2018-06-23 02:01:54',
            'close_date' => '2018-06-25 02:01:54',
            'prompt' => 'Prompt 7',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module5->id,
            'previous_lesson_id' => $lesson6->id,
            'user_id' => $user->id,
        ]);

        $module6 = Module::create([
            'name' => 'Test Module 6',
            'open_date' => '2018-06-26 02:01:54',
            'concept_id' => $concept2->id,
            'previous_module_id' => $module5->id,
            'user_id' => $user->id,
        ]);

        $project8 = Project::create([
            'name' => 'Test Project 8',
            'open_date' => '2018-06-30 02:01:54',
            'close_date' => '2018-07-01 02:01:54',
            'prompt' => 'Prompt 8',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module6->id,
            'user_id' => $user->id,
        ]);

        $concept3 = Concept::create([
            'name' => 'Test Concept 3',
            'course_id' => $course->id,
            'previous_concept_id' => $concept2->id,
            'user_id' => $user->id,
        ]);

        $module7 = Module::create([
            'name' => 'Test Module 7',
            'open_date' => '2018-07-03 02:01:54',
            'concept_id' => $concept3->id,
            'user_id' => $user->id,
        ]);

        $lesson7 = Lesson::create([
            'name' => 'Test Lesson 7',
            'module_id' => $module7->id,
            'user_id' => $user->id,
        ]);

        $exercise22 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 22',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson7->id,
            'user_id' => $user->id,
        ]);

        $lesson8 = Lesson::create([
            'name' => 'Test Lesson 8',
            'module_id' => $module7->id,
            'previous_lesson_id' => $lesson7->id,
            'user_id' => $user->id,
        ]);

        $exercise23 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 23',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson8->id,
            'user_id' => $user->id,
        ]);

        $project9 = Project::create([
            'name' => 'Test Project 9',
            'open_date' => '2018-07-06 02:01:54',
            'close_date' => '2018-07-08 02:01:54',
            'prompt' => 'Prompt 9',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module7->id,
            'previous_lesson_id' => $lesson8->id,
            'user_id' => $user->id,
        ]);

        $module8 = Module::create([
            'name' => 'Test Module 8',
            'open_date' => '2018-07-11 02:01:54',
            'concept_id' => $concept3->id,
            'previous_module_id' => $module7->id,
            'user_id' => $user->id,
        ]);

        $project10 = Project::create([
            'name' => 'Test Project 10',
            'open_date' => '2018-07-15 02:01:54',
            'close_date' => '2018-07-17 02:01:54',
            'prompt' => 'Prompt 10',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module8->id,
            'user_id' => $user->id,
        ]);

        $lesson9 = Lesson::create([
            'name' => 'Test Lesson 9',
            'module_id' => $module8->id,
            'user_id' => $user->id,
        ]);

        $exercise24 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 24',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson9->id,
            'user_id' => $user->id,
        ]);

        $project11 = Project::create([
            'name' => 'Test Project 11',
            'open_date' => '2018-07-20 02:01:54',
            'close_date' => '2018-07-26 02:01:54',
            'prompt' => 'Prompt 11',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module8->id,
            'previous_lesson_id' => $lesson9->id,
            'user_id' => $user->id,
        ]);

        $module9 = Module::create([
            'name' => 'Test Module 9',
            'open_date' => '2018-07-28 02:01:54',
            'concept_id' => $concept3->id,
            'previous_module_id' => $module8->id,
            'user_id' => $user->id,
        ]);

        $lesson10 = Lesson::create([
            'name' => 'Test Lesson 10',
            'module_id' => $module9->id,
            'user_id' => $user->id,
        ]);

        $exercise25 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 25',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson10->id,
            'user_id' => $user->id,
        ]);

        $lesson11 = Lesson::create([
            'name' => 'Test Lesson 11',
            'module_id' => $module9->id,
            'previous_lesson_id' => $lesson10->id,
            'user_id' => $user->id,
        ]);

        $exercise26 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 26',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson11->id,
            'user_id' => $user->id,
        ]);

        $module10 = Module::create([
            'name' => 'Test Module 10',
            'open_date' => '2018-08-01 02:01:54',
            'concept_id' => $concept3->id,
            'previous_module_id' => $module9->id,
            'user_id' => $user->id,
        ]);

        $project12 = Project::create([
            'name' => 'Test Project 12',
            'open_date' => '2018-08-04 02:01:54',
            'close_date' => '2018-08-05 02:01:54',
            'prompt' => 'Prompt 12',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module10->id,
            'user_id' => $user->id,
        ]);

        $project13 = Project::create([
            'name' => 'Test Project 13',
            'open_date' => '2018-08-05 02:01:54',
            'close_date' => '2018-08-06 02:01:54',
            'prompt' => 'Prompt 13',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module10->id,
            'user_id' => $user->id,
        ]);

        $module11 = Module::create([
            'name' => 'Test Module 11',
            'open_date' => '2018-08-08 02:01:54',
            'concept_id' => $concept3->id,
            'previous_module_id' => $module10->id,
            'user_id' => $user->id,
        ]);

        $project14 = Project::create([
            'name' => 'Test Project 14',
            'open_date' => '2018-08-10 02:01:54',
            'close_date' => '2018-08-12 02:01:54',
            'prompt' => 'Prompt 14',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module11->id,
            'user_id' => $user->id,
        ]);

        $project15 = Project::create([
            'name' => 'Test Project 15',
            'open_date' => '2018-08-13 02:01:54',
            'close_date' => '2018-08-14 02:01:54',
            'prompt' => 'Prompt 15',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module11->id,
            'user_id' => $user->id,
        ]);

        $lesson12 = Lesson::create([
            'name' => 'Test Lesson 12',
            'module_id' => $module11->id,
            'user_id' => $user->id,
        ]);

        $exercise27 = Exercise::create([
            'prompt' => 'This is the prompt of Exercise 27',
            'pre_code' =>  "def myFunc():\r\n\tprint('hello world')",
            'start_code' => '#this is the code the user will start with',
            'test_code' => 'test_out("hello world")',
            'lesson_id' => $lesson12->id,
            'user_id' => $user->id,
        ]);

        $project16 = Project::create([
            'name' => 'Test Project 16',
            'open_date' => '2018-08-15 02:01:54',
            'close_date' => '2018-08-16 02:01:54',
            'prompt' => 'Prompt 16',
            'pre_code' => '#this is project pre code',
            'start_code' => '#this is project start code',
            'module_id' => $module11->id,
            'previous_lesson_id' => $lesson12->id,
            'user_id' => $user->id,
        ]);

        // Get Teacher role id
        $teacher_role_id = DB::table('roles')->where('name', Roles::TEACHER)->first()->id;
        // Get Teaching Assistant role id
        $assist_role_id = DB::table('roles')->where('name', Roles::TEACHING_ASSISTANT)->first()->id;
        // Get Student role id
        $student_role_id = DB::table('roles')->where('name', Roles::STUDENT)->first()->id;

        // Add the owner of the course as a teacher in the course
        $course->users()->attach([
            $course->user->id => ['role_id' => $teacher_role_id]
        ]);

        // Add users to the course as teaching assistants
        $course->users()->attach([
            DB::table('users')->where('name', 'Teaching Assistant 1')->first()->id => ['role_id' => $assist_role_id]
        ]);

        // Add users to the course as students
        $course->users()->attach([
            DB::table('users')->where('name', 'Test Student 1')->first()->id => ['role_id' => $student_role_id],
            DB::table('users')->where('name', 'Test Student 2')->first()->id => ['role_id' => $student_role_id],
            DB::table('users')->where('name', 'Test Student 3')->first()->id => ['role_id' => $student_role_id]
        ]);
    }
     public function createFilledTestCourse()
    {
        // The course owner will be the user with an id of 1
        $user = User::find(1);

        // Create all the objects
        $course = Course::create([
            'name' => '1181 Test Course',
            'open_date' => '2018-05-15 02:01:54',
            'close_date' => '2018-10-15 02:01:54',
            'user_id' => $user->id,
        ]);




        #region Full Course Dump
        $EOL = "\r\n";
        $concept1= Concept::create(['name' => 'Print Statements','course_id' => $course->id,'user_id' => $user->id]);
        $module1= Module::create(['name' => 'Printing','concept_id' => $concept1->id,'open_date' => '2018-05-15 0:00:00','user_id' => $user->id]);
        $lesson1= Lesson::create(['name' => 'Print statements','module_id' =>  $module1->id,'user_id' => $user->id]);
        $exercise1 = Exercise::create(['prompt' => 'Press the run button. "Hello" will be printed to the screen. Change the program to print "Hello World!"','pre_code' => 'def myFunc():'.$EOL.'   print("hello world")','start_code' => 'print("Hello")','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'user_id' => $user->id]);
        $exercise2 = Exercise::create(['prompt' => 'Change the program to print "Hello Alien!"','pre_code' => '','start_code' => 'print("Hello World!")','test_code' => 'test_out("Hello Alien!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise1->id,'user_id' => $user->id]);
        $exercise3 = Exercise::create(['prompt' => 'We write code to create programs. Change the following code to print "Goodbye Alien!"','pre_code' => '','start_code' => 'print("Hello Alien!")','test_code' => 'test_out("Goodbye Alien!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise2->id,'user_id' => $user->id]);
        $exercise4 = Exercise::create(['prompt' => '"print" is a function. This code "calls" the print function twice. Change the code to print "Hello Alien!" and then "Goodbye Alien!" on the next line.','pre_code' => '','start_code' => 'print("Hello Alien!")'.$EOL.'print("Hello Alien!")','test_code' => 'test_out("Hello Alien!\nGoodbye Alien!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise3->id,'user_id' => $user->id]);
        $exercise5 = Exercise::create(['prompt' => 'Press run to see the code print two lines. Putting "\n" is the same as starting a new line. Change the code to print "Hello Alien!" and then "Goodbye Alien!" on the next line.','pre_code' => '','start_code' => 'print("Hello Alien!\nHello Alien!")','test_code' => 'test_out("Hello Alien!\nGoodbye Alien!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise4->id,'user_id' => $user->id]);
        $exercise6 = Exercise::create(['prompt' => 'Change the code to print "Hello Alien!" and then "Goodbye Alien!" on the next line using only the single print statement. Heads up: don"t put a space after the \n.','pre_code' => '','start_code' => 'print("Hello Alien!")','test_code' => 'test_out("Hello Alien!\nGoodbye Alien!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise5->id,'user_id' => $user->id]);
        $exercise7 = Exercise::create(['prompt' => 'Sometimes our code has errors. Run the following code to see what happens. Then add a closing quote mark to fix the problem.','pre_code' => '','start_code' => 'print("Hello World!)','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise6->id,'user_id' => $user->id]);
        $exercise8 = Exercise::create(['prompt' => 'This code has a "compiler" error. Run the code to see what happens then fix the problem. Hint: you will need to add quotes before and after "Hello World".','pre_code' => '','start_code' => 'print(Hello World!)','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise7->id,'user_id' => $user->id]);
        $exercise9 = Exercise::create(['prompt' => 'This code has a compiler error. Run the code to see what happens then fix the problem. Hint: A word is mispelled.','pre_code' => '','start_code' => 'prin("Hello World!")','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise8->id,'user_id' => $user->id]);
        $exercise10 = Exercise::create(['prompt' => 'This code has a compiler error. Fix the problem.','pre_code' => '','start_code' => 'rint("Hello World!")','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise9->id,'user_id' => $user->id]);
        $exercise11 = Exercise::create(['prompt' => 'This code has multiple compiler errors. Fix the problems.','pre_code' => '','start_code' => 'rint(Hello World!")','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise10->id,'user_id' => $user->id]);
        $exercise12 = Exercise::create(['prompt' => 'This code has a tricky compiler error. It has to do with a quote mark. You need to remove one of them.','pre_code' => '','start_code' => 'print("Hello" World!")','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise11->id,'user_id' => $user->id]);
        $exercise13 = Exercise::create(['prompt' => 'Anything inside quote marks is called a string. Change the code to print the string "Love to cook!"','pre_code' => '','start_code' => 'print("Hello World!")','test_code' => 'test_out("Love to cook!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise12->id,'user_id' => $user->id]);
        $exercise14 = Exercise::create(['prompt' => 'Change the second string to "Soccer".','pre_code' => '','start_code' => 'print("Baseball")'.$EOL.'print("Football")','test_code' => 'test_out("Baseball\nSoccer")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise13->id,'user_id' => $user->id]);
        $exercise15 = Exercise::create(['prompt' => 'Change the code so that there is only one call to the print function but it still prints the same thing. You will need to use "\n".','pre_code' => '','start_code' => 'print("Baseball")'.$EOL.'print("Soccer")','test_code' => 'test_out("Baseball\nSoccer")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise14->id,'user_id' => $user->id]);
        $exercise16 = Exercise::create(['prompt' => 'Fix the error. The code should print "Baseball".','pre_code' => '','start_code' => 'print("Base"ball")','test_code' => 'test_out("Baseball")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise15->id,'user_id' => $user->id]);
        $exercise17 = Exercise::create(['prompt' => 'Print "Hello World!".','pre_code' => '','start_code' => 'print()','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise16->id,'user_id' => $user->id]);
        $exercise18 = Exercise::create(['prompt' => 'Print "Hello Alien!".','pre_code' => '','start_code' => 'print()','test_code' => 'test_out("Hello Alien!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise17->id,'user_id' => $user->id]);
        $exercise19 = Exercise::create(['prompt' => 'Print "Hello World!". Heads up: don"t forget the parentheses!','pre_code' => '','start_code' => 'print','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise18->id,'user_id' => $user->id]);
        $exercise20 = Exercise::create(['prompt' => 'Print "Hello Alien!".','pre_code' => '','start_code' => 'print','test_code' => 'test_out("Hello Alien!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise19->id,'user_id' => $user->id]);
        $exercise21 = Exercise::create(['prompt' => 'Print "Hello World!".','pre_code' => '','start_code' => '','test_code' => 'test_out("Hello World!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise20->id,'user_id' => $user->id]);
        $exercise22 = Exercise::create(['prompt' => 'Print "Take me out to the ballgame". Do not include a period at the end.','pre_code' => '','start_code' => '','test_code' => 'test_out("Take me out to the ballgame")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise21->id,'user_id' => $user->id]);
        $exercise23 = Exercise::create(['prompt' => 'Print "Ping pong" on one line then "Tennis" on the next line. Remember that "\n" can be used to make a new line.','pre_code' => '','start_code' => '','test_code' => 'test_out("Ping pong\nTennis")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise22->id,'user_id' => $user->id]);
        $exercise24 = Exercise::create(['prompt' => 'We can print things other than strings. Press run to see that the code prints 5. Change the code to print the number 6.','pre_code' => '','start_code' => 'print(5)','test_code' => 'test_out("6")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise23->id,'user_id' => $user->id]);
        $exercise25 = Exercise::create(['prompt' => 'Print the number 7.','pre_code' => '','start_code' => '','test_code' => 'test_out("7")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise24->id,'user_id' => $user->id]);
        $exercise26 = Exercise::create(['prompt' => 'Run this code. Adding two strings together is called string concatenation. Change the code to print "Hello Alien!". Do not remove the + sign.','pre_code' => '','start_code' => 'print("Hello " + "World!")','test_code' => 'test_out("Hello Alien!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise25->id,'user_id' => $user->id]);
        $exercise27 = Exercise::create(['prompt' => 'This code uses string concatentation. Change the code to print "My name is Ophelia!".','pre_code' => '','start_code' => 'print(My name is " + "Horatio!")','test_code' => 'test_out("My name is Ophelia!")','lesson_id' => $lesson1->id,'previous_exercise_id' => $exercise26->id,'user_id' => $user->id]);
        $project1 = Project::create(['name' => ' Initials','open_date' => '2018-05-19 0:00:00','close_date' => '2018-05-21 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'In this project you will print your initials in "block letters". For example, if your name is Josephina Hephzibah Clement then your program would print'.$EOL.'<pre>'.$EOL.'JJJJJJJJ  H  H    CCC'.$EOL.'   J      H  H   C'.$EOL.'   J      HHHH   C'.$EOL.'J  J      H  H   C'.$EOL.' JJ       H  H    CCC'.$EOL.'</pre>'.$EOL.'Printing your initials will get you 90% of the points. To get the final 10% do something that will wow us. For example, you could print a simple picture using block letters to accompany your initials, or print your initials in cursive. Be imaginative!'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'print("Hello world!")','solution' => ''.$EOL.'print("JJJJJJJJ  H  H    CCC")'.$EOL.'print("   J      H  H   C")'.$EOL.'print("   J      HHHH   C")'.$EOL.'print("J  J      H  H   C")'.$EOL.'print(" JJ       H  H    CCC")'.$EOL.'','module_id' => $module1->id,'previous_lesson_id' => $lesson1->id,'user_id' => $user->id]);
        $concept2= Concept::create(['name' => 'Graphics','course_id' => $course->id,'previous_concept_id' => $concept1->id,'user_id' => $user->id]);
        $module2= Module::create(['name' => 'Turtle Graphics','concept_id' => $concept2->id,'open_date' => '2018-05-22 0:00:00','user_id' => $user->id]);
        $lesson2= Lesson::create(['name' => 'Turtle basics','module_id' =>  $module2->id,'user_id' => $user->id]);
        $exercise28 = Exercise::create(['prompt' => 'Run the following code. Change the color of the line to be blue.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.color("red")'.$EOL.'t.forward(100)','test_code' => 'test_in("blue")','lesson_id' => $lesson2->id,'user_id' => $user->id]);
        $exercise29 = Exercise::create(['prompt' => 'Run the following code. Double the length of the line. You"ll need to change the value 100 to something else.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.color("red")'.$EOL.'t.forward(100)','test_code' => 'test_in("200")','lesson_id' => $lesson2->id,'previous_exercise_id' => $exercise28->id,'user_id' => $user->id]);
        $exercise30 = Exercise::create(['prompt' => 'Run the following code. Change the code so the turtle turns left 90 degrees.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.color("red")'.$EOL.'t.forward(100)'.$EOL.'t.right(90)'.$EOL.'t.forward(100)'.$EOL.'','test_code' => 'test_in("left")','lesson_id' => $lesson2->id,'previous_exercise_id' => $exercise29->id,'user_id' => $user->id]);
        $exercise31 = Exercise::create(['prompt' => 'Run the following code. Add code so the turtle draws a square. You"ll need to add turns and forward calls.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.color("red")'.$EOL.'t.forward(100)'.$EOL.'t.left(90)'.$EOL.'t.forward(100)'.$EOL.'t.left(90)'.$EOL.'','test_code' => '','lesson_id' => $lesson2->id,'previous_exercise_id' => $exercise30->id,'user_id' => $user->id]);
        $exercise32 = Exercise::create(['prompt' => 'Run the following code. Add code so that the program draws an equilateral triangle. You"ll need to make another 120 degree turn followed by drawing the last edge.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.color("red")'.$EOL.'t.forward(100)'.$EOL.'t.left(120)'.$EOL.'t.forward(100)'.$EOL.'','test_code' => '','lesson_id' => $lesson2->id,'previous_exercise_id' => $exercise31->id,'user_id' => $user->id]);
        $exercise33 = Exercise::create(['prompt' => 'Run the following code. t.penup() means that now moving the turtle doesn"t draw anything until we make a pendown() call. Add code so the turtle draws one more line segment.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.color("red")'.$EOL.'t.forward(20)'.$EOL.'t.penup()'.$EOL.'t.forward(5)'.$EOL.'t.pendown()'.$EOL.'t.forward(20)'.$EOL.'t.penup()'.$EOL.'t.forward(5)'.$EOL.'t.pendown()'.$EOL.'','test_code' => '','lesson_id' => $lesson2->id,'previous_exercise_id' => $exercise32->id,'user_id' => $user->id]);
        $project2 = Project::create(['name' => ' Pictures','open_date' => '2018-05-26 0:00:00','close_date' => '2018-05-28 0:00:00','prompt' => ''.$EOL.'Draw one or more interesting shapes. Be creative! The starter code draws a square. Remember that you can move the turtle without drawing using the t.penup() and t.pendown() commands.'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.color("red")'.$EOL.'t.forward(100)'.$EOL.'t.left(90)'.$EOL.'t.forward(100)'.$EOL.'t.left(90)'.$EOL.'t.forward(100)'.$EOL.'','solution' => ''.$EOL.'','module_id' => $module2->id,'previous_lesson_id' => $lesson2->id,'user_id' => $user->id]);
        $concept3= Concept::create(['name' => 'Basics','course_id' => $course->id,'previous_concept_id' => $concept2->id,'user_id' => $user->id]);
        $module3= Module::create(['name' => 'Variables','concept_id' => $concept3->id,'open_date' => '2018-05-29 0:00:00','user_id' => $user->id]);
        $lesson3= Lesson::create(['name' => 'Variables','module_id' =>  $module3->id,'user_id' => $user->id]);
        $exercise34 = Exercise::create(['prompt' => 'Run the code. Change the 3 to a 4. Notice that it now prints a 4.','pre_code' => '','start_code' => 'a = 3'.$EOL.'print(a)','test_code' => 'test_out("4")','lesson_id' => $lesson3->id,'user_id' => $user->id]);
        $exercise35 = Exercise::create(['prompt' => 'Change the 3 to a 5. Notice that it now prints a 5.','pre_code' => '','start_code' => 'a = 3'.$EOL.'print(a)','test_code' => 'test_out("5")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise34->id,'user_id' => $user->id]);
        $exercise36 = Exercise::create(['prompt' => '"a" is called a variable. Change the value of "a" from 3 to 4.','pre_code' => '','start_code' => 'a = 3'.$EOL.'print(a)','test_code' => 'test_out("4")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise35->id,'user_id' => $user->id]);
        $exercise37 = Exercise::create(['prompt' => 'Change the value of the variable "b" from 88 to 99.','pre_code' => '','start_code' => 'b = 88'.$EOL.'print(b)','test_code' => 'test_out("99")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise36->id,'user_id' => $user->id]);
        $exercise38 = Exercise::create(['prompt' => 'Change the value of the variable "b" to 11.','pre_code' => '','start_code' => 'b = 88'.$EOL.'print(b)','test_code' => 'test_out("11")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise37->id,'user_id' => $user->id]);
        $exercise39 = Exercise::create(['prompt' => 'Add code to the print() call to print the value of b. Do not change the value of b.','pre_code' => '','start_code' => 'b = 88'.$EOL.'print()','test_code' => 'test_out("88")'.$EOL.'test_in("print(b)")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise38->id,'user_id' => $user->id]);
        $exercise40 = Exercise::create(['prompt' => 'Add code to print the value of b.','pre_code' => '','start_code' => 'b = 88','test_code' => 'test_out("88")'.$EOL.'test_in("print(b)")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise39->id,'user_id' => $user->id]);
        $exercise41 = Exercise::create(['prompt' => 'Create a variable called "b" and assign its value to be 88.','pre_code' => '','start_code' => 'print(b)','test_code' => 'test_out("88")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise40->id,'user_id' => $user->id]);
        $exercise42 = Exercise::create(['prompt' => 'Create a variable called "c" and assign its value to be 5.','pre_code' => '','start_code' => 'print(c)','test_code' => 'test_out("5")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise41->id,'user_id' => $user->id]);
        $exercise43 = Exercise::create(['prompt' => 'Fix the following code so that it prints the value of the variable "d". Hint: "d" should be assigned a value before it is printed.','pre_code' => '','start_code' => 'print(d)'.$EOL.'d = 5'.$EOL.'','test_code' => 'test_out("5")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise42->id,'user_id' => $user->id]);
        $exercise44 = Exercise::create(['prompt' => 'Fix the following code so that it prints the value of the variable "d". You should leave the printing of "Hello world!" in there.','pre_code' => '','start_code' => 'print("Hello world!")'.$EOL.'print(d)'.$EOL.'d = 5'.$EOL.'','test_code' => 'test_out("Hello world!\n5")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise43->id,'user_id' => $user->id]);
        $exercise45 = Exercise::create(['prompt' => 'Change the value of the variable "b" so that "8" is printed out. Do not change the value of "a".','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'print(a+b)','test_code' => 'test_out("8")'.$EOL.'test_in("b = 5")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise44->id,'user_id' => $user->id]);
        $exercise46 = Exercise::create(['prompt' => 'Change the value of the variable "a" so that "6" is printed out. Do not change the value of "b".','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'print(a+b)','test_code' => 'test_out("6")'.$EOL.'test_in("a = 2")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise45->id,'user_id' => $user->id]);
        $exercise47 = Exercise::create(['prompt' => 'Change the code so that "7" is printed instead of "a+b". Hint: you will need to remove quotes inside the print() call.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'print("a+b")','test_code' => 'test_out("7")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise46->id,'user_id' => $user->id]);
        $exercise48 = Exercise::create(['prompt' => 'Change the code so that the string "a+b" is printed instead of "7". Hint: you will need to add quotes inside the print() call.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'print(a+b)','test_code' => 'test_out("a+b")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise47->id,'user_id' => $user->id]);
        $exercise49 = Exercise::create(['prompt' => 'Print the string "a+b".','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4','test_code' => 'test_out("a+b")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise48->id,'user_id' => $user->id]);
        $exercise50 = Exercise::create(['prompt' => 'Print "7". You should do so by adding the variables "a" and "b".','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4','test_code' => 'test_out("7")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise49->id,'user_id' => $user->id]);
        $exercise51 = Exercise::create(['prompt' => 'Print the value of the variable "d".','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'d = a + b','test_code' => 'test_out("7")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise50->id,'user_id' => $user->id]);
        $exercise52 = Exercise::create(['prompt' => 'Modify the code so that "9" is printed instead of "8". Do not modify the values of "a" or "b".','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'d = a + b + 1'.$EOL.'print(d)','test_code' => 'test_out("9")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise51->id,'user_id' => $user->id]);
        $exercise53 = Exercise::create(['prompt' => 'Modify the code so that "7" is printed.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'print(a + "b")','test_code' => 'test_out("7")','lesson_id' => $lesson3->id,'previous_exercise_id' => $exercise52->id,'user_id' => $user->id]);
        $lesson4= Lesson::create(['name' => 'String conversions','module_id' =>  $module3->id,'previous_lesson_id' => $lesson3->id,'user_id' => $user->id]);
        $exercise54 = Exercise::create(['prompt' => 'Change the radius to 4. Note that when we need to convert the number to a string using the str() function before we can add it to another string.','pre_code' => '','start_code' => 'PI = 3.14159'.$EOL.'radius = 3'.$EOL.'area = PI * radius * radius'.$EOL.'areaString = str(area)'.$EOL.'print("The area is " + areaString)'.$EOL.'','test_code' => 'test_in("radius = 4")','lesson_id' => $lesson4->id,'user_id' => $user->id]);
        $exercise55 = Exercise::create(['prompt' => 'Run the code and note the error. Change the print() call so that it uses the string version of the area.','pre_code' => '','start_code' => 'PI = 3.14159'.$EOL.'radius = 3'.$EOL.'area = PI * radius * radius'.$EOL.'areaString = str(area)'.$EOL.'print("The area is " + area)'.$EOL.'','test_code' => 'test_in("print(\"The area is \" + areaString)")','lesson_id' => $lesson4->id,'previous_exercise_id' => $exercise54->id,'user_id' => $user->id]);
        $exercise56 = Exercise::create(['prompt' => 'Fix the error in line 4.','pre_code' => '','start_code' => 'PI = 3.14159'.$EOL.'radius = 3'.$EOL.'area = PI * radius * radius'.$EOL.'areaString = area'.$EOL.'print("The area is " + areaString)'.$EOL.'','test_code' => 'test_in("areaString = str(area)")','lesson_id' => $lesson4->id,'previous_exercise_id' => $exercise55->id,'user_id' => $user->id]);
        $exercise57 = Exercise::create(['prompt' => 'Fix the error so that the area is printed. You may only modify existing lines of code. Hint: convert the area to a string inside the print() function call using str().','pre_code' => '','start_code' => 'PI = 3.14159'.$EOL.'radius = 3'.$EOL.'area = PI * radius * radius'.$EOL.'print("The area is " + area)'.$EOL.'','test_code' => 'test_out("The area is 28.27431")','lesson_id' => $lesson4->id,'previous_exercise_id' => $exercise56->id,'user_id' => $user->id]);
        $exercise58 = Exercise::create(['prompt' => 'Add a print call so that it prints the value of the area. It should print "The area is 28.27431".','pre_code' => '','start_code' => 'PI = 3.14159'.$EOL.'radius = 3'.$EOL.'area = PI * radius * radius'.$EOL.'','test_code' => 'test_out("The area is 28.27431")','lesson_id' => $lesson4->id,'previous_exercise_id' => $exercise57->id,'user_id' => $user->id]);
        $project3 = Project::create(['name' => ' Variables and input','open_date' => '2018-06-02 0:00:00','close_date' => '2018-06-04 0:00:00','prompt' => ''.$EOL.'Run the given code. Read each line of example code and also the comments. Look for comments starting with TODO and complete the task they give. You may _not_ use features of Python that we haven"t yet covered in class, such as if statements and loops.'.$EOL.'','pre_code' => '','start_code' => ''.$EOL.'','solution' => ''.$EOL.'import turtle'.$EOL.'# Get an input string from the user'.$EOL.'name = input("Enter your name:")'.$EOL.'# TODO: Print a welcome message, such as "Hello Susan!"'.$EOL.'# or "Welcome to my awesome program, Jack!"'.$EOL.'print("Hello " + name + "!")'.$EOL.'# Get an input string from the user'.$EOL.'a = input("Enter a number: ")'.$EOL.'# Convert the string to an integer'.$EOL.'a = int(a)'.$EOL.'# Convert the number back to a string and print it'.$EOL.'print(str(a))'.$EOL.'# TODO: Copy the above code to get another number from'.$EOL.'# the user. Use a variable named b.'.$EOL.'b = input("Enter another number: ")'.$EOL.'b = int(b)'.$EOL.'print(str(b))'.$EOL.'# TODO: Sum the numbers together and print the result.'.$EOL.'# Be sure to give the user a nice message, like'.$EOL.'# "The sum of the numbers is..."'.$EOL.'c = a + b'.$EOL.'print("The sum of the numbers is " + str(c))'.$EOL.'# TODO: Multiply the numbers together and print the result.'.$EOL.'c = a * b'.$EOL.'print("The product of the numbers is " + str(c))'.$EOL.'# TODO: Ask the user for a distance in kilometers and show'.$EOL.'# them the corresponding distance in miles. The equation to'.$EOL.'# convert from kilometers to miles is miles = 1.609 * km.'.$EOL.'# In Python, we multiply numbers using the * operator, much'.$EOL.'# like we add numbers using the + operator.'.$EOL.'# Don"t forget to convert the string input by the user to '.$EOL.'# an integer!'.$EOL.'km = int(input("Enter a distance in km: "))'.$EOL.'miles = km * 1.609'.$EOL.'print("The distance in miles is " + str(miles))'.$EOL.'# Create a turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.speed(100)'.$EOL.'# TODO: Ask the user what color square they would like'.$EOL.'# and set the turtle"s color to that. If you don"t'.$EOL.'# remember how to set the color either look back at'.$EOL.'# a previous project or google "Python turtle color".'.$EOL.'color = input("Please enter a color")'.$EOL.'t.color(color)'.$EOL.'# TODO: Ask the user how big they would like a square,'.$EOL.'# then draw a square that size. Remember that input()'.$EOL.'# gives a string, so you"ll need to convert the string'.$EOL.'# to an integer, like what we did with the numbers earlier'.$EOL.'# in the program.'.$EOL.'size = int(input("How big would you like the square?"))'.$EOL.'t.forward(size)'.$EOL.'t.left(90)'.$EOL.'t.forward(size)'.$EOL.'t.left(90)'.$EOL.'t.forward(size)'.$EOL.'t.left(90)'.$EOL.'t.forward(size)'.$EOL.'t.left(90)'.$EOL.'# TODO: Draw a square twice the size of the previous one.'.$EOL.'# You"ll do this by modifying the variable representing'.$EOL.'# the size. Do NOT ask the user for a new size.'.$EOL.'size = size * 2'.$EOL.'t.forward(size)'.$EOL.'t.left(90)'.$EOL.'t.forward(size)'.$EOL.'t.left(90)'.$EOL.'t.forward(size)'.$EOL.'t.left(90)'.$EOL.'t.forward(size)'.$EOL.'t.left(90)'.$EOL.'# TODO: Ask the user for something interesting and do'.$EOL.'# something interesting with it. Remember that you may not'.$EOL.'# use if statements or loops.'.$EOL.'','module_id' => $module3->id,'previous_lesson_id' => $lesson4->id,'user_id' => $user->id]);
        $lesson5= Lesson::create(['name' => 'Comments','module_id' =>  $module3->id,'previous_lesson_id' => $lesson4->id,'user_id' => $user->id]);
        $exercise59 = Exercise::create(['prompt' => 'Any line beginning in "#" is ignored. It is called a comment. Change the comment to say "Hello alien!"','pre_code' => '','start_code' => '# Hello world!'.$EOL.'print("Hello alien!")'.$EOL.'','test_code' => 'test_in("# Hello alien!")','lesson_id' => $lesson5->id,'user_id' => $user->id]);
        $exercise60 = Exercise::create(['prompt' => 'Add a comment that says "Print a string". Be sure to put a space after the # sign.','pre_code' => '','start_code' => 'print("Hello world!")'.$EOL.'','test_code' => 'test_in("# Print a string")','lesson_id' => $lesson5->id,'previous_exercise_id' => $exercise59->id,'user_id' => $user->id]);
        $exercise61 = Exercise::create(['prompt' => 'Add a comment that says "Adds a and b".','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'d = a + b'.$EOL.'','test_code' => 'test_in("# Adds a and b")','lesson_id' => $lesson5->id,'previous_exercise_id' => $exercise60->id,'user_id' => $user->id]);
        $exercise62 = Exercise::create(['prompt' => 'Comments are useful to help people understand your code. If the comment is helpful, print "yes". If it isn"t helpful, print "no".','pre_code' => '','start_code' => '# Prints whether this comment is helpful.'.$EOL.'print("fill this in with yes or no")'.$EOL.'','test_code' => 'test_out("yes")','lesson_id' => $lesson5->id,'previous_exercise_id' => $exercise61->id,'user_id' => $user->id]);
        $exercise63 = Exercise::create(['prompt' => 'If the comment is helpful, print "yes". If it isn"t helpful, print "no".','pre_code' => '','start_code' => '# This is my code that does the computation.'.$EOL.'radius = 4;'.$EOL.'PI = 3.14159'.$EOL.'area = PI * radius * radius'.$EOL.'print("fill this in with yes or no")'.$EOL.'','test_code' => 'test_out("no")','lesson_id' => $lesson5->id,'previous_exercise_id' => $exercise62->id,'user_id' => $user->id]);
        $exercise64 = Exercise::create(['prompt' => 'If the comment is helpful, print "yes". If it isn"t helpful, print "no".','pre_code' => '','start_code' => '# Computes the area of a circle.'.$EOL.'radius = 4;'.$EOL.'PI = 3.14159'.$EOL.'area = PI * radius * radius'.$EOL.'print("fill this in with yes or no")'.$EOL.'','test_code' => 'test_out("yes")','lesson_id' => $lesson5->id,'previous_exercise_id' => $exercise63->id,'user_id' => $user->id]);
        $concept4= Concept::create(['name' => 'Variable Types','course_id' => $course->id,'previous_concept_id' => $concept3->id,'user_id' => $user->id]);
        $module4= Module::create(['name' => 'Data Types','concept_id' => $concept4->id,'open_date' => '2018-06-05 0:00:00','user_id' => $user->id]);
        $lesson6= Lesson::create(['name' => 'Variable types','module_id' =>  $module4->id,'user_id' => $user->id]);
        $exercise65 = Exercise::create(['prompt' => 'A variable has a name, value and type. This code has a variable with the name avar. Add a print statement that prints "Name = avar". You will add the following code: print("Name = avar")','pre_code' => '','start_code' => 'avar = 3'.$EOL.'','test_code' => 'test_out("Name = avar")','lesson_id' => $lesson6->id,'user_id' => $user->id]);
        $exercise66 = Exercise::create(['prompt' => 'Add a print statement that outputs "Name = " followed by the name of the variable.','pre_code' => '','start_code' => 'bvar = 3'.$EOL.'','test_code' => 'test_out("Name = bvar")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise65->id,'user_id' => $user->id]);
        $exercise67 = Exercise::create(['prompt' => 'Add a print statement that outputs the value of the variable. Your output will be "Value = 3".','pre_code' => '','start_code' => 'bvar = 3'.$EOL.'','test_code' => 'test_out("Value = 3")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise66->id,'user_id' => $user->id]);
        $exercise68 = Exercise::create(['prompt' => 'Add a print statement that outputs "Value = " followed by the value of the variable.','pre_code' => '','start_code' => 'bvar = 5'.$EOL.'','test_code' => 'test_out("Value = 5")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise67->id,'user_id' => $user->id]);
        $exercise69 = Exercise::create(['prompt' => 'Add a print statement that outputs "Name = " followed by the name of the variable.','pre_code' => '','start_code' => 'myvar = 3'.$EOL.'','test_code' => 'test_out("Name = myvar")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise68->id,'user_id' => $user->id]);
        $exercise70 = Exercise::create(['prompt' => 'Add a print statement that outputs "Name = " followed by the name of the variable.','pre_code' => '','start_code' => 'index = 8'.$EOL.'','test_code' => 'test_out("Name = index")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise69->id,'user_id' => $user->id]);
        $exercise71 = Exercise::create(['prompt' => 'Add a print statement that outputs "Value = " followed by the value of the variable.','pre_code' => '','start_code' => 'index = 8'.$EOL.'','test_code' => 'test_out("Value = 8")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise70->id,'user_id' => $user->id]);
        $exercise72 = Exercise::create(['prompt' => 'A variable has a name, type and value. The type can be things like "int" (meaning integer), "string", and "float" (a non-integer number). Un-comment the line that prints the type of the variable. Be sure to delete both the # and the space following it.','pre_code' => '','start_code' => 'a = 8'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("int")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise71->id,'user_id' => $user->id]);
        $exercise73 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable.','pre_code' => '','start_code' => 'a = "8"'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("string")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise72->id,'user_id' => $user->id]);
        $exercise74 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable.','pre_code' => '','start_code' => 'a = 1'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("int")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise73->id,'user_id' => $user->id]);
        $exercise75 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable. Remember: a float is a non-integer number, or number with a decimal point.','pre_code' => '','start_code' => 'a = 1.1'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("float")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise74->id,'user_id' => $user->id]);
        $exercise76 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable.','pre_code' => '','start_code' => 'a = 3.14'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("float")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise75->id,'user_id' => $user->id]);
        $exercise77 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'myvar = "18"'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("string")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise76->id,'user_id' => $user->id]);
        $exercise78 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'myvar = 18'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("int")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise77->id,'user_id' => $user->id]);
        $exercise79 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'a = 5'.$EOL.'myvar = a'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("int")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise78->id,'user_id' => $user->id]);
        $exercise80 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'b = "5"'.$EOL.'myvar = b'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("string")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise79->id,'user_id' => $user->id]);
        $exercise81 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'c = "55"'.$EOL.'d = int(c)'.$EOL.'myvar = d'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("int")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise80->id,'user_id' => $user->id]);
        $exercise82 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'e = int("56")'.$EOL.'myvar = e'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("int")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise81->id,'user_id' => $user->id]);
        $exercise83 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'f = 40'.$EOL.'myvar = str(f)'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("string")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise82->id,'user_id' => $user->id]);
        $exercise84 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'g = 1'.$EOL.'h = 2'.$EOL.'myvar = g + h'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("int")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise83->id,'user_id' => $user->id]);
        $exercise85 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'i = "1"'.$EOL.'j = 2'.$EOL.'myvar = int(i) + j'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("int")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise84->id,'user_id' => $user->id]);
        $exercise86 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'k = "1"'.$EOL.'m = 2'.$EOL.'myvar = k + str(m)'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("string")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise85->id,'user_id' => $user->id]);
        $exercise87 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar. When you add, subtract, multiply or divide an int with a float, the result is a float.','pre_code' => '','start_code' => 'n = 1'.$EOL.'p = 1.1'.$EOL.'myvar = n + p'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("float")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise86->id,'user_id' => $user->id]);
        $exercise88 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'q = "3.14159"'.$EOL.'r = 8'.$EOL.'myvar = q + str(8)'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("string")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise87->id,'user_id' => $user->id]);
        $exercise89 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 's = "3.14159"'.$EOL.'t = 8'.$EOL.'myvar = float(s) + t'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("float")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise88->id,'user_id' => $user->id]);
        $exercise90 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'u = "1.1"'.$EOL.'v = "2"'.$EOL.'myvar = float(u) / int(v)'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("float")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise89->id,'user_id' => $user->id]);
        $exercise91 = Exercise::create(['prompt' => 'Un-comment the line that prints the type of the variable named myvar.','pre_code' => '','start_code' => 'w = 1.1'.$EOL.'v = 2'.$EOL.'myvar = str(w + v)'.$EOL.'# print("int")'.$EOL.'# print("float")'.$EOL.'# print("string")'.$EOL.'','test_code' => 'test_out("string")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise90->id,'user_id' => $user->id]);
        $exercise92 = Exercise::create(['prompt' => 'Print the value of myvar. In this case the value of the variable is 3.1, so your output will be simple "3.1".','pre_code' => '','start_code' => 'w = 1.1'.$EOL.'v = 2'.$EOL.'myvar = str(w + v)'.$EOL.'','test_code' => 'test_out("3.1")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise91->id,'user_id' => $user->id]);
        $exercise93 = Exercise::create(['prompt' => 'Print the value of myvar.','pre_code' => '','start_code' => 'w = "1.1"'.$EOL.'v = "2"'.$EOL.'myvar = str(w + v)'.$EOL.'','test_code' => 'test_out("1.12")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise92->id,'user_id' => $user->id]);
        $exercise94 = Exercise::create(['prompt' => 'Print the value of myvar.','pre_code' => '','start_code' => 'w = 1.1'.$EOL.'v = "2"'.$EOL.'myvar = str(w) + v'.$EOL.'','test_code' => 'test_out("1.12")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise93->id,'user_id' => $user->id]);
        $exercise95 = Exercise::create(['prompt' => 'Print the value of myvar.','pre_code' => '','start_code' => 'w = "1.1"'.$EOL.'v = 2'.$EOL.'myvar = str(float(w) + v)'.$EOL.'','test_code' => 'test_out("3.1")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise94->id,'user_id' => $user->id]);
        $exercise96 = Exercise::create(['prompt' => 'Integers and floats are compatible, but strings are not compatible with integers or floats. Fix the following code so that myvar is a string.','pre_code' => '','start_code' => 'a = "33"'.$EOL.'b = 4.1'.$EOL.'myvar = a + b'.$EOL.'print(type(myvar) == str)'.$EOL.'','test_code' => 'test_out("True")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise95->id,'user_id' => $user->id]);
        $exercise97 = Exercise::create(['prompt' => 'Fix the following code so that myvar is a float.','pre_code' => '','start_code' => 'a = "33"'.$EOL.'b = 4.1'.$EOL.'myvar = a + b'.$EOL.'print(type(myvar) == float)'.$EOL.'','test_code' => 'test_out("True")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise96->id,'user_id' => $user->id]);
        $exercise98 = Exercise::create(['prompt' => 'The type() function returns the type of a variable. Fix the following code so that myvar is an int.','pre_code' => '','start_code' => 'a = "33"'.$EOL.'b = 4'.$EOL.'myvar = a + b'.$EOL.'print(type(myvar) == int)'.$EOL.'','test_code' => 'test_out("True")','lesson_id' => $lesson6->id,'previous_exercise_id' => $exercise97->id,'user_id' => $user->id]);
        $lesson7= Lesson::create(['name' => 'type()','module_id' =>  $module4->id,'previous_lesson_id' => $lesson6->id,'user_id' => $user->id]);
        $exercise99 = Exercise::create(['prompt' => 'Enclose 18 in single quotes so that a"s type is str.','pre_code' => '','start_code' => 'a = 18'.$EOL.'print(type(a))'.$EOL.'','test_code' => 'test_in("\"18\"")','lesson_id' => $lesson7->id,'user_id' => $user->id]);
        $exercise100 = Exercise::create(['prompt' => 'The type() function can be a powerful tool in debugging code. The following code is complicated, and no programmer is interested in reading through it. The variable d is dependent on complex conditionals, and the problem is that we don"t know the real value of d simply by printing it -- it will print 18 whether it"s equal to a or b. So we print its type. You do not need to make any changes to this code to pass this test.','pre_code' => '','start_code' => 'a = 18'.$EOL.'b = "18"'.$EOL.'c = 9'.$EOL.'if (a % 5 == 2) or ((a - c) % 7 == 2):'.$EOL.'    d = b'.$EOL.'else:'.$EOL.'    d = a'.$EOL.'print(d)'.$EOL.'print(type(d))'.$EOL.'','test_code' => '','lesson_id' => $lesson7->id,'previous_exercise_id' => $exercise99->id,'user_id' => $user->id]);
        $project4 = Project::create(['name' => ' Mad Libs Generator','open_date' => '2018-06-09 0:00:00','close_date' => '2018-06-11 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'Your program will prompt the user for a series of inputs a la Mad Libs. For example, a singular noun, an adjective, etc. Then, once all the information has been inputted, the program will take that data and place them into a premade story template. You will need prompts for user input, and to then print out the full story at the end with the input included.'.$EOL.'<p><p>Example:'.$EOL.'<br>Enter an adjective: "yellow"'.$EOL.'<br>Enter a noun: "building"'.$EOL.'<br>Enter an adjective: "smooth"'.$EOL.'<br>Enter a plural noun: "caterpillars"'.$EOL.'<br>Enter an adverb: "lazily"'.$EOL.'<p><p>Output: When we look up into the sky on a/an yellow summer night, we see millions of tiny spots of light. Each one represents a/an building which is the center of a/an smooth solar system with dozens of caterpillars revolving lazily around a distant sun...'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => ''.$EOL.'','solution' => ''.$EOL.'','module_id' => $module4->id,'previous_lesson_id' => $lesson7->id,'user_id' => $user->id]);
        $module5= Module::create(['name' => 'Multi-line Comments','concept_id' => $concept4->id,'open_date' => '2018-06-06 0:00:00','previous_module_id' => $module4->id,'user_id' => $user->id]);
        $lesson8= Lesson::create(['name' => 'Multiline comments','module_id' =>  $module5->id,'user_id' => $user->id]);
        $exercise101 = Exercise::create(['prompt' => 'We have used single-line comments using the # sign. We can have a multiline comment block using """ (three consecutive double-quotes). Remove the comments so that the names of the last four presidents are printed.','pre_code' => '','start_code' => '"""'.$EOL.'print("Donald Trump")'.$EOL.'print("Barack Obama")'.$EOL.'print("George Bush")'.$EOL.'print("Bill Clinton")'.$EOL.'"""'.$EOL.'','test_code' => 'test_out("Donald Trump\nBarack Obama\nGeorge Bush\nBill Clinton")','lesson_id' => $lesson8->id,'user_id' => $user->id]);
        $exercise102 = Exercise::create(['prompt' => 'Add multiline comments so that only Bill Clinton is printed.','pre_code' => '','start_code' => 'print("Donald Trump")'.$EOL.'print("Barack Obama")'.$EOL.'print("George Bush")'.$EOL.'print("Bill Clinton")'.$EOL.'','test_code' => 'test_out("Bill Clinton")'.$EOL.'test_in("\"\"\"")','lesson_id' => $lesson8->id,'previous_exercise_id' => $exercise101->id,'user_id' => $user->id]);
        $concept5= Concept::create(['name' => 'Iteration','course_id' => $course->id,'previous_concept_id' => $concept4->id,'user_id' => $user->id]);
        $module6= Module::create(['name' => 'For','concept_id' => $concept5->id,'open_date' => '2018-06-12 0:00:00','user_id' => $user->id]);
        $lesson9= Lesson::create(['name' => 'Range','module_id' =>  $module6->id,'user_id' => $user->id]);
        $exercise103 = Exercise::create(['prompt' => 'The range(i, j) function returns all numbers between i and j-1. Change the code so that 0 through 4 is printed out.','pre_code' => '','start_code' => 'print(range(0, 4))'.$EOL.'','test_code' => 'test_out("[0, 1, 2, 3, 4]")','lesson_id' => $lesson9->id,'user_id' => $user->id]);
        $exercise104 = Exercise::create(['prompt' => 'Change the code so that 1 through 2 is printed out.','pre_code' => '','start_code' => 'print(range(1, 4))'.$EOL.'','test_code' => 'test_out("[1, 2]")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise103->id,'user_id' => $user->id]);
        $exercise105 = Exercise::create(['prompt' => 'Change the code so that -1 through 2 is printed out.','pre_code' => '','start_code' => 'print(range(1, 3))'.$EOL.'','test_code' => 'test_out("[-1, 0, 1, 2]")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise104->id,'user_id' => $user->id]);
        $exercise106 = Exercise::create(['prompt' => 'Change the code so that 0 through 100 is printed out. Make sure you have a space after the comma in the call to range().','pre_code' => '','start_code' => 'print(range(0, 3))'.$EOL.'','test_code' => 'test_in("range(0, 101)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise105->id,'user_id' => $user->id]);
        $exercise107 = Exercise::create(['prompt' => 'Change the code so that 2 through 100 is printed out. Make sure you have a space after the comma in the call to range().','pre_code' => '','start_code' => 'print(range(1, 3))'.$EOL.'','test_code' => 'test_in("range(2, 101)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise106->id,'user_id' => $user->id]);
        $exercise108 = Exercise::create(['prompt' => 'Change the code so that 218 through 221 is printed out. Make sure you have a space after the comma in the call to range().','pre_code' => '','start_code' => 'print(range(1, 3))'.$EOL.'','test_code' => 'test_in("range(218, 222)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise107->id,'user_id' => $user->id]);
        $exercise109 = Exercise::create(['prompt' => 'Print the numbers 1 through 9 using the range function. Make sure you have a space after the comma in the call to range().','pre_code' => '','start_code' => '','test_code' => 'test_in("range(1, 10)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise108->id,'user_id' => $user->id]);
        $exercise110 = Exercise::create(['prompt' => 'Print the numbers -10 through 8 using the range function. Make sure you have a space after the comma in the call to range().','pre_code' => '','start_code' => '','test_code' => 'test_in("range(-10, 9)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise109->id,'user_id' => $user->id]);
        $exercise111 = Exercise::create(['prompt' => 'Run the code. The extra 2 in the call to range() means that we"re going to print only every second number. Change the code so that "1, 3, 5, 7" is printed out.','pre_code' => '','start_code' => 'print(range(1, 6, 2))'.$EOL.'','test_code' => 'test_in("range(1, 8, 2)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise110->id,'user_id' => $user->id]);
        $exercise112 = Exercise::create(['prompt' => 'Change the code so that "1, 4, 7" is printed out by changing the 2 to a 3. This prints every third number.','pre_code' => '','start_code' => 'print(range(1, 10, 2))'.$EOL.'','test_code' => 'test_in("range(1, 10, 3)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise111->id,'user_id' => $user->id]);
        $exercise113 = Exercise::create(['prompt' => 'Change the code so that "0, 10, 20, 30, 40, 50" is printed out.','pre_code' => '','start_code' => 'print(range(0, 51, 1))'.$EOL.'','test_code' => 'test_in("range(0, 51, 10)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise112->id,'user_id' => $user->id]);
        $exercise114 = Exercise::create(['prompt' => 'Print the numbers "1, 7, 13, 19" using the range function.','pre_code' => '','start_code' => '','test_code' => 'test_out("[1, 7, 13, 19]")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise113->id,'user_id' => $user->id]);
        $exercise115 = Exercise::create(['prompt' => 'Change the code so that "5, 4, 3, 2" is printed out. Note that the increment value is negative, so it counts down.','pre_code' => '','start_code' => 'print(range(5, 0, -1))'.$EOL.'','test_code' => 'test_in("range(5, 1, -1)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise114->id,'user_id' => $user->id]);
        $exercise116 = Exercise::create(['prompt' => 'Change the code so that "5, 3, 1" is printed out.','pre_code' => '','start_code' => 'print(range(5, 0, -1))'.$EOL.'','test_code' => 'test_in("range(5, 0, -2)")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise115->id,'user_id' => $user->id]);
        $exercise117 = Exercise::create(['prompt' => 'Print "11, 7, 3" using the range() function.','pre_code' => '','start_code' => '','test_code' => 'test_out("[11, 7, 3]")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise116->id,'user_id' => $user->id]);
        $exercise118 = Exercise::create(['prompt' => 'Print "4, 11, 18" using the range() function.','pre_code' => '','start_code' => '','test_code' => 'test_out("[4, 11, 18]")','lesson_id' => $lesson9->id,'previous_exercise_id' => $exercise117->id,'user_id' => $user->id]);
        $lesson10= Lesson::create(['name' => 'For loops I','module_id' =>  $module6->id,'previous_lesson_id' => $lesson9->id,'user_id' => $user->id]);
        $exercise119 = Exercise::create(['prompt' => 'Run the code. Change it so that it prints 0 through 3.','pre_code' => '','start_code' => 'for i in range(0, 3):'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'user_id' => $user->id]);
        $exercise120 = Exercise::create(['prompt' => 'Print 1 through 4.','pre_code' => '','start_code' => 'for i in range(1, 2):'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_out("1\n2\n3\n4")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise119->id,'user_id' => $user->id]);
        $exercise121 = Exercise::create(['prompt' => 'Print 0 through 3. Replace "xxx" with a range call.','pre_code' => '','start_code' => 'for i in xxx:'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise120->id,'user_id' => $user->id]);
        $exercise122 = Exercise::create(['prompt' => 'Print "1, 3, 5". Replace "xxx" with a range call.','pre_code' => '','start_code' => 'for i in xxx:'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_out("1\n3\n5")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise121->id,'user_id' => $user->id]);
        $exercise123 = Exercise::create(['prompt' => 'Run the code. There is an error. Fix the error by changing the "i" in the print() call to "j".','pre_code' => '','start_code' => 'for j in range(0, 4):'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise122->id,'user_id' => $user->id]);
        $exercise124 = Exercise::create(['prompt' => 'Run the code. There is an error. Fix the error by changing the "i" in the print() call to "j".','pre_code' => '','start_code' => 'for j in range(0, 5):'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3\n4")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise123->id,'user_id' => $user->id]);
        $exercise125 = Exercise::create(['prompt' => 'Fix the error by changing the variable in the print() call.','pre_code' => '','start_code' => 'for c in range(0, 5):'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_in("print(c)")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise124->id,'user_id' => $user->id]);
        $exercise126 = Exercise::create(['prompt' => 'Fix the error by changing the variable in the print() call.','pre_code' => '','start_code' => 'for counter in range(0, 5):'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_in("print(counter)")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise125->id,'user_id' => $user->id]);
        $exercise127 = Exercise::create(['prompt' => 'Fix the error by changing the variable in the for loop. Do not change the variable in the print call.','pre_code' => '','start_code' => 'for j in range(0, 5):'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_in("print(i)")'.$EOL.'test_in("for i")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise126->id,'user_id' => $user->id]);
        $exercise128 = Exercise::create(['prompt' => 'Fix the error by changing the variable in the for loop.','pre_code' => '','start_code' => 'for i in range(0, 5):'.$EOL.'    print(counter)'.$EOL.'','test_code' => 'test_in("for counter")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise127->id,'user_id' => $user->id]);
        $exercise129 = Exercise::create(['prompt' => 'Fix the error by indenting the print() call. Use the tab key to do this.','pre_code' => '','start_code' => 'for abc in range(0, 4):'.$EOL.'print(abc)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise128->id,'user_id' => $user->id]);
        $exercise130 = Exercise::create(['prompt' => 'Fix the error by fixing the indent of the print() call. Do this by removing the two spaces indent, then pressing tab.','pre_code' => '','start_code' => 'for abc in range(0, 4):'.$EOL.'  print(abc)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise129->id,'user_id' => $user->id]);
        $exercise131 = Exercise::create(['prompt' => 'Fix the error by fixing the indent of the print() call. Do this by removing the three spaces indent, then pressing tab. Notice that pressing tab inserts four spaces instead of a tab character. Instead of pressing tab you can insert four spaces.','pre_code' => '','start_code' => 'for i in range(0, 4):'.$EOL.'   print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise130->id,'user_id' => $user->id]);
        $exercise132 = Exercise::create(['prompt' => 'Fix the error by changing the semicolon to a colon at the end of the first line.','pre_code' => '','start_code' => 'for i in range(0, 4);'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise131->id,'user_id' => $user->id]);
        $exercise133 = Exercise::create(['prompt' => 'Fix the error by adding a colon to the end of the first line.','pre_code' => '','start_code' => 'for i in range(0, 4)'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise132->id,'user_id' => $user->id]);
        $exercise134 = Exercise::create(['prompt' => 'Fix the error.','pre_code' => '','start_code' => 'for i in range(0, 4)'.$EOL.'    print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise133->id,'user_id' => $user->id]);
        $exercise135 = Exercise::create(['prompt' => 'Fix the error.','pre_code' => '','start_code' => 'for i in range(0, 4):'.$EOL.'  print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise134->id,'user_id' => $user->id]);
        $exercise136 = Exercise::create(['prompt' => 'Fix the errors.','pre_code' => '','start_code' => 'for i in range(0, 4);'.$EOL.'  print(i)'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise135->id,'user_id' => $user->id]);
        $exercise137 = Exercise::create(['prompt' => 'Add a print() statement so that the for loop prints 1, 2 and 3, each on its own line.','pre_code' => '','start_code' => 'for i in range(0, 4):'.$EOL.'','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise136->id,'user_id' => $user->id]);
        $exercise138 = Exercise::create(['prompt' => 'Use a for loop to print 0, 1, 2 and 3, each on its own line.','pre_code' => '','start_code' => '','test_code' => 'test_out("0\n1\n2\n3")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise137->id,'user_id' => $user->id]);
        $exercise139 = Exercise::create(['prompt' => 'Use a for loop to print 1, 2, 3 and 4, each on its own line. Note that we"re starting at 1 and not 0.','pre_code' => '','start_code' => '','test_code' => 'test_out("1\n2\n3\n4")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise138->id,'user_id' => $user->id]);
        $exercise140 = Exercise::create(['prompt' => 'Use a for loop to print 1, 3, 5 and 7, each on its own line. Your range() function should use 2 for the increment.','pre_code' => '','start_code' => '','test_code' => 'test_out("1\n3\n5\n7")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise139->id,'user_id' => $user->id]);
        $exercise141 = Exercise::create(['prompt' => 'Use a for loop to print 7, 5, 3 and 1, each on its own line.','pre_code' => '','start_code' => '','test_code' => 'test_out("7\n5\n3\n1")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise140->id,'user_id' => $user->id]);
        $exercise142 = Exercise::create(['prompt' => 'Use a for loop to print 18, 19 and 20, each on its own line.','pre_code' => '','start_code' => '','test_code' => 'test_out("18\n19\n20")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise141->id,'user_id' => $user->id]);
        $exercise143 = Exercise::create(['prompt' => 'Use a for loop to print the numbers 0 through 9, each on its own line.','pre_code' => '','start_code' => '','test_code' => 'test_out("0\n1\n2\n3\n4\n5\n6\n7\n8\n9")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise142->id,'user_id' => $user->id]);
        $exercise144 = Exercise::create(['prompt' => 'Use a for loop to print 10 consecutive integers, beginning at 0, each on its own line. Hint: it should print the numbers 0 through 9.','pre_code' => '','start_code' => '','test_code' => 'test_out("0\n1\n2\n3\n4\n5\n6\n7\n8\n9")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise143->id,'user_id' => $user->id]);
        $exercise145 = Exercise::create(['prompt' => 'Use a for loop to print 12 consecutive integers, beginning at 0, each on its own line.','pre_code' => '','start_code' => '','test_code' => 'test_out("0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise144->id,'user_id' => $user->id]);
        $exercise146 = Exercise::create(['prompt' => 'Use a for loop to print 3 consecutive integers, beginning at 0, each on its own line.','pre_code' => '','start_code' => '','test_code' => 'test_out("0\n1\n2")','lesson_id' => $lesson10->id,'previous_exercise_id' => $exercise145->id,'user_id' => $user->id]);
        $project5 = Project::create(['name' => ' Shapes II','open_date' => '2018-06-16 0:00:00','close_date' => '2018-06-18 0:00:00','prompt' => 'The starter code draws a square using a loop. Note that the color is given using red, green and blue components. These values range from 0 to 255. So t.color(255, 0, 0) is totally red. t.color(255, 255, 0) is yellow. Draw something awesome using two or more loops. Spirals are a great start. Other cool things can also be drawn with loops. Feel free to ask the user for input using the input() function if you like.'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'r = 0'.$EOL.'g = 0'.$EOL.'b = 0'.$EOL.'for i in range(0, 4):'.$EOL.'    t.color(r, g, b)'.$EOL.'    r = r + 70'.$EOL.'    t.forward(100)'.$EOL.'    t.left(90)'.$EOL.'','solution' => ''.$EOL.'','module_id' => $module6->id,'previous_lesson_id' => $lesson10->id,'user_id' => $user->id]);
        $concept6= Concept::create(['name' => 'Functions','course_id' => $course->id,'previous_concept_id' => $concept5->id,'user_id' => $user->id]);
        $module7= Module::create(['name' => 'More Functions','concept_id' => $concept6->id,'open_date' => '2018-06-19 0:00:00','user_id' => $user->id]);
        $lesson11= Lesson::create(['name' => 'Functions II','module_id' =>  $module7->id,'user_id' => $user->id]);
        $exercise147 = Exercise::create(['prompt' => 'greater() returns the greater of the two parameters. Write another function (do not replace greater()) called lesser that returns the lesser of two parameters. You may add a call to print() to test it if you wish.','pre_code' => '','start_code' => 'def greater(a, b):'.$EOL.'    if a > b:'.$EOL.'        return a'.$EOL.'    else:'.$EOL.'        return b'.$EOL.'print(greater(2, 1) == 2)'.$EOL.'print(greater(2, 2) == 2)'.$EOL.'print(greater(1, 2) == 2)'.$EOL.'print(lesser(1, 2) == 1)'.$EOL.'print(lesser(2, 2) == 2)'.$EOL.'print(lesser(2, 1) == 1)'.$EOL.'','test_code' => 'test_equal(greater(2, 1), 2)'.$EOL.'test_equal(greater(2, 2), 2)'.$EOL.'test_equal(greater(1, 2), 2)'.$EOL.'test_equal(lesser(1, 2), 1)'.$EOL.'test_equal(lesser(2, 2), 2)'.$EOL.'test_equal(lesser(2, 1), 1)'.$EOL.'','lesson_id' => $lesson11->id,'user_id' => $user->id]);
        $exercise148 = Exercise::create(['prompt' => 'Write a function called equals() that returns True if the two parameters are equal and False otherwise.','pre_code' => '','start_code' => 'print(equals(1, 2) == False)'.$EOL.'print(equals(2, 2) == True)'.$EOL.'print(equals(1, 3) == False)'.$EOL.'print(equals(1, 1) == True)'.$EOL.'','test_code' => 'test_equal(equals(1, 2), False)'.$EOL.'test_equal(equals(2, 2), True)'.$EOL.'test_equal(equals(1, 3), False)'.$EOL.'test_equal(equals(1, 1), True)'.$EOL.'','lesson_id' => $lesson11->id,'previous_exercise_id' => $exercise147->id,'user_id' => $user->id]);
        $exercise149 = Exercise::create(['prompt' => 'The function getSum sums all numbers between 0 and n, inclusive. Add a return statement that returns the sum so that your program outputs True values.','pre_code' => '','start_code' => 'def getSum(n):'.$EOL.'    sum = 0'.$EOL.'    for i in range(0, n+1):'.$EOL.'        sum += i'.$EOL.'print(getSum(3) == 6)'.$EOL.'print(getSum(5) == 15)'.$EOL.'','test_code' => 'test_equal(getSum(3), 6)'.$EOL.'test_equal(getSum(4), 10)'.$EOL.'test_equal(getSum(5), 15)'.$EOL.'','lesson_id' => $lesson11->id,'previous_exercise_id' => $exercise148->id,'user_id' => $user->id]);
        $exercise150 = Exercise::create(['prompt' => 'Write a function getSum that sums all numbers between 0 and n, inclusive.','pre_code' => '','start_code' => 'print(getSum(3) == 6)'.$EOL.'print(getSum(5) == 15)'.$EOL.'','test_code' => 'test_equal(getSum(3), 6)'.$EOL.'test_equal(getSum(4), 10)'.$EOL.'test_equal(getSum(5), 15)'.$EOL.'','lesson_id' => $lesson11->id,'previous_exercise_id' => $exercise149->id,'user_id' => $user->id]);
        $exercise151 = Exercise::create(['prompt' => 'Write a function getSum that sums all numbers between 0 and n, *exclusive*. That is, if n is 4, then getSum would return 1+2+3.','pre_code' => '','start_code' => 'print(getSum(3) == 3)'.$EOL.'print(getSum(5) == 10)'.$EOL.'','test_code' => 'test_equal(getSum(3), 3)'.$EOL.'test_equal(getSum(4), 6)'.$EOL.'test_equal(getSum(5), 10)'.$EOL.'','lesson_id' => $lesson11->id,'previous_exercise_id' => $exercise150->id,'user_id' => $user->id]);
        $exercise152 = Exercise::create(['prompt' => 'Write a function called getSum(first, last) that returns the sum of all numbers between first and last, inclusive. Your output should be "sum = 10". Hint: recall that range(a,b) returns all numbers between a and b-1, inclusive.','pre_code' => '','start_code' => 'print(getSum(1, 3) == 6)'.$EOL.'print(getSum(2, 3) == 5)'.$EOL.'print(getSum(3, 3) == 3)'.$EOL.'print(getSum(3, 5) == 12)'.$EOL.'','test_code' => 'test_equal(getSum(1, 3), 6)'.$EOL.'test_equal(getSum(2, 3), 5)'.$EOL.'test_equal(getSum(3, 3), 3)'.$EOL.'test_equal(getSum(3, 5), 12)'.$EOL.'','lesson_id' => $lesson11->id,'previous_exercise_id' => $exercise151->id,'user_id' => $user->id]);
        $exercise153 = Exercise::create(['prompt' => 'Functions don"t necessarily need to return something -- they can just do a task. Write a function called printIt(num) that prints the value of num. The value of num should be the only thing it prints. Your output should be "8".','pre_code' => '','start_code' => 'printIt(8)'.$EOL.'','test_code' => 'test_out("8")'.$EOL.'test_in("def printIt(")'.$EOL.'test_in("printIt(8)")'.$EOL.'','lesson_id' => $lesson11->id,'previous_exercise_id' => $exercise152->id,'user_id' => $user->id]);
        $lesson12= Lesson::create(['name' => 'Functions III','module_id' =>  $module7->id,'previous_lesson_id' => $lesson11->id,'user_id' => $user->id]);
        $exercise154 = Exercise::create(['prompt' => 'Change the - to a + so that add() returns the sum of a and b.','pre_code' => '','start_code' => 'def add(a, b):'.$EOL.'    return a - b'.$EOL.'print(add(1, 2) == 3)'.$EOL.'print(add(2, 3) == 5)'.$EOL.'','test_code' => 'test_equal(add(1, 2), 3)'.$EOL.'test_equal(add(2, 3), 5)'.$EOL.'','lesson_id' => $lesson12->id,'user_id' => $user->id]);
        $exercise155 = Exercise::create(['prompt' => 'Run the following code. Note how the strings are concatenated together. You do not need to modify the code.','pre_code' => '','start_code' => 'firstName = "Cary"'.$EOL.'lastName = "Elwes"'.$EOL.'print(firstName + " " + lastName)'.$EOL.'','test_code' => '','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise154->id,'user_id' => $user->id]);
        $exercise156 = Exercise::create(['prompt' => 'Run the following code. Note how the strings are concatenated together. You do not need to modify the code.','pre_code' => '','start_code' => 'firstName = "Peter"'.$EOL.'middleName = "Seamus"'.$EOL.'lastName = "O"Toole"'.$EOL.'print(firstName + " " + middleName + " " + lastName)'.$EOL.'','test_code' => '','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise155->id,'user_id' => $user->id]);
        $exercise157 = Exercise::create(['prompt' => 'Fix the function getFullName(). It should return the two strings added together with a single space in between. Your output should be True values. Hint: there are currently two spaces between the first and last names.','pre_code' => '','start_code' => 'def getFullName(firstName, lastName):'.$EOL.'    return firstName + "  " + lastName'.$EOL.'print(getFullName("Errol", "Flynn") == "Errol Flynn")'.$EOL.'print(getFullName("George", "Orwell") == "George Orwell")'.$EOL.'','test_code' => 'test_equal(getFullName("a", "b"), "a b")'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise156->id,'user_id' => $user->id]);
        $exercise158 = Exercise::create(['prompt' => 'Write a function called getFullName(). It should have two parameters: firstName and lastName. The function should return the two strings added together with a space in between. Your output should be True values. Hint: if variables a and b are of type string, a + b adds them together. Heads up: you"ll use " " for the space in between the names. Heads up: the function should go _before_ any of the test code shown below.','pre_code' => '','start_code' => 'print(getFullName("Errol", "Flynn") == "Errol Flynn")'.$EOL.'print(getFullName("George", "Orwell") == "George Orwell")'.$EOL.'','test_code' => 'test_equal(getFullName("a", "b"), "a b")'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise157->id,'user_id' => $user->id]);
        $exercise159 = Exercise::create(['prompt' => 'Write a function called getFullName(). It should have two parameters: firstName and lastName. The function should return the two strings added together with a space in between. You should write code to test your function, but this is not required.','pre_code' => '','start_code' => 'print(getFullName("Errol", "Flynn") == "Errol Flynn")'.$EOL.'print(getFullName("George", "Orwell") == "George Orwell")'.$EOL.'','test_code' => 'test_equal(getFullName("a", "b"), "a b")'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise158->id,'user_id' => $user->id]);
        $exercise160 = Exercise::create(['prompt' => 'Write a function called getFullName(). It should have _three_ parameters: firstName, middleName and lastName. The function should return the three strings added together with spaces _if_ middleName isn"t the empty string. (The empty string is denoted "".) If middleName is the empty string, then it should return just the first and last names. Hint: you"ll have an if statement testing if middleName is equal to the empty string.','pre_code' => '','start_code' => 'print(getFullName("Laurence", "", "Olivier") == "Laurence Olivier")'.$EOL.'print(getFullName("Alec", "", "Guinness") == "Alec Guinness")'.$EOL.'print(getFullName("Peter", "Seamus", "O"Toole") == "Peter Seamus O"Toole")'.$EOL.'','test_code' => 'test_equal(getFullName("a", "", "b"), "a b")'.$EOL.'test_equal(getFullName("a", "c", "b"), "a c b")'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise159->id,'user_id' => $user->id]);
        $exercise161 = Exercise::create(['prompt' => 'Write a function called getFullName(). It should have three parameters: firstName, middleName and lastName. The function should return the three strings added together with spaces if middleName isn"t the empty string. If it is the empty string, then return "Error: must have a middle name".','pre_code' => '','start_code' => 'print(getFullName("Laurence", "", "Olivier") == "Error: must have a middle name")'.$EOL.'print(getFullName("Peter", "Seamus", "O"Toole") == "Peter Seamus O"Toole")'.$EOL.'','test_code' => 'test_equal(getFullName("a", "", "b"), "Error: must have a middle name")'.$EOL.'test_equal(getFullName("a", "b", "c"), "a b c")'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise160->id,'user_id' => $user->id]);
        $exercise162 = Exercise::create(['prompt' => 'Write a function called getAverage(a, b). It should have two parameters: a and b and should return the average of the two numbers, which can be computed using (a+b)/2. Heads up: as you can see, the returned number may not be an integer. In this case, you need to make sure that parameters a and b are floats. You can do this by turning them into floats, such as using code like this: "a = float(a)".','pre_code' => '','start_code' => 'print(getAverage(8, 6) == 7)'.$EOL.'print(getAverage(10, 6) == 8)'.$EOL.'print(getAverage(9, 10) == 9.5)'.$EOL.'','test_code' => 'test_equal(getAverage(8, 6), 7)'.$EOL.'test_equal(getAverage(10, 6), 8)'.$EOL.'test_equal(getAverage(9, 10), 9.5)'.$EOL.'test_equal(getAverage(7, 10), 8.5)'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise161->id,'user_id' => $user->id]);
        $exercise163 = Exercise::create(['prompt' => 'Write a function called getAverage() that takes four numbers, a, b, c, and d. You can get the average using (a+b+c+d)/4. Be sure to account for the fact that the result may not be an integer.','pre_code' => '','start_code' => 'print(getAverage(1, 2, 3, 4) == 2.5)'.$EOL.'print(getAverage(2, 3, 4, 7) == 4)'.$EOL.'','test_code' => 'test_equal(getAverage(1, 2, 3, 4), 2.5)'.$EOL.'test_equal(getAverage(2, 3, 4, 7), 4)'.$EOL.'test_equal(getAverage(2, 3, 4, 11), 5)'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise162->id,'user_id' => $user->id]);
        $exercise164 = Exercise::create(['prompt' => 'Write a function called isPositive() that takes one number called "num" as a parameter. The function should return True if num is greater than or equal to zero and False otherwise. Recall that >= tests for greater than or equal to.','pre_code' => '','start_code' => 'print(isPositive(-2) == False)'.$EOL.'print(isPositive(-1) == False)'.$EOL.'print(isPositive(0) == True)'.$EOL.'print(isPositive(1) == True)'.$EOL.'print(isPositive(2) == True)'.$EOL.'','test_code' => 'test_equal(isPositive(-3), False)'.$EOL.'test_equal(isPositive(-1), False)'.$EOL.'test_equal(isPositive(0), True)'.$EOL.'test_equal(isPositive(1), True)'.$EOL.'test_equal(isPositive(3), True)'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise163->id,'user_id' => $user->id]);
        $exercise165 = Exercise::create(['prompt' => 'Write a function called isNegative() that takes one number called "num" as a parameter. The function should return True if num is less than zero and False otherwise.','pre_code' => '','start_code' => 'print(isNegative(-2) == True)'.$EOL.'print(isNegative(-1) == True)'.$EOL.'print(isNegative(0) == False)'.$EOL.'print(isNegative(1) == False)'.$EOL.'print(isNegative(2) == False)'.$EOL.'','test_code' => 'test_equal(isNegative(-2), True)'.$EOL.'test_equal(isNegative(-1), True)'.$EOL.'test_equal(isNegative(0), False)'.$EOL.'test_equal(isNegative(1), False)'.$EOL.'test_equal(isNegative(2), False)'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise164->id,'user_id' => $user->id]);
        $exercise166 = Exercise::create(['prompt' => 'Given a string str, you can get its length, or the number of characters in the string, using the function len(str). For example, len("abc") would return 3. Write a function called isLong() that takes one string called "str" as a parameter. The function should return True if the length of str is greater than 10 and False otherwise.','pre_code' => '','start_code' => 'print(isLong("abc") == False)'.$EOL.'print(isLong("abc talkin") == False)'.$EOL.'print(isLong("abc talkin bout do-re-mi") == True)'.$EOL.'','test_code' => 'test_equal(isLong("abc"), False)'.$EOL.'test_equal(isLong("abcabcabc"), False)'.$EOL.'test_equal(isLong("abcabcabca"), False)'.$EOL.'test_equal(isLong("abcabcabcabc"), True)'.$EOL.'','lesson_id' => $lesson12->id,'previous_exercise_id' => $exercise165->id,'user_id' => $user->id]);
        $project6 = Project::create(['name' => ' Throw physics simulation','open_date' => '2018-06-23 0:00:00','close_date' => '2018-06-25 0:00:00','prompt' => ''.$EOL.'<div>Write a physics simulation of a baseball being thrown from a cliff. A person throws a baseball horizontally with velocity v off a cliff. If there was no gravity the ball would travel straight. But since our dear planet has gravity, the ball starts to arc down toward the ground. You will ask the user how fast they want to throw the ball, and then show the parabolic arc traced out by the ball. See a solution in action <a href="https://youtu.be/leqa2zRqd-s" target="_blank">here</a>.'.$EOL.'<p>You must have at least two functions. One called fallingDistance(), which takes a time parameter called t and returns the distance an object falls toward the earth in t seconds. This can be computed using the formula 0.5*g*t*t where g is equal to 9.8. The second function should be called throw(), which actually simulates the throw. throw() should take three parameters: startx, starty, and v, where (startx, starty) are the coordinates where you will throw the ball from, and v is the velocity that the user input for the horizontal velocity of the baseball. (And yes, for you physics geeks out there, we are ignoring friction and all other forces besides gravity.)'.$EOL.'<p>To succeed in this project, you should take things in steps. For example, start by simulating a throw without gravity, and watch the turtle travel horizontally across the screen. Then add gravity. Print out values of variables if you get stuck. Take it slow!'.$EOL.'<p>One more tip: don"t implement prompting the user for the velocity until the very end of the project. It will save you lots of time in testing to simply hardcode the velocity into the code.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => 'import turtle'.$EOL.'def fallingDistance(t):'.$EOL.'    return 0.5*9.8*t*t'.$EOL.'def throw(startx, starty, v):'.$EOL.'    y0 = starty'.$EOL.'    y = y0'.$EOL.'    x = startx'.$EOL.'    t.tracer(0)'.$EOL.'    t.up()'.$EOL.'    t.setpos(x, y0)'.$EOL.'    t.down()'.$EOL.'    t.tracer(1)'.$EOL.'    #v = 15'.$EOL.'    time = 0'.$EOL.'    while y > -200:'.$EOL.'        time += 1'.$EOL.'        y = y0 - fallingDistance(time) / 10'.$EOL.'        x += v'.$EOL.'        t.setpos(x, y)'.$EOL.'t = turtle.Turtle()'.$EOL.'v = int(input("Enter the velocity (0 to quit):"))'.$EOL.'while v > 0:'.$EOL.'    throw(-180, 150, v)'.$EOL.'    v = int(input("Enter the velocity (0 to quit):"))'.$EOL.'','module_id' => $module7->id,'previous_lesson_id' => $lesson12->id,'user_id' => $user->id]);
        $lesson13= Lesson::create(['name' => 'Functions IV','module_id' =>  $module7->id,'previous_lesson_id' => $lesson12->id,'user_id' => $user->id]);
        $exercise167 = Exercise::create(['prompt' => 'Complete the function calculateRetail that takes an item"s wholesale cost and its markup percentage as parameters. Hint: the function is missing a return statement.','pre_code' => '','start_code' => 'def calculateRetail(wholesale, markup):'.$EOL.'    wholesale + wholesale * markup'.$EOL.'price = calculateRetail(5.0, 1)'.$EOL.'print(price == 10)'.$EOL.'price = calculateRetail(5.0, 0.5)'.$EOL.'print(price == 7.50)'.$EOL.'','test_code' => 'test_equal(calculateRetail(8.0, 1), 16)'.$EOL.'test_equal(calculateRetail(8.0, 0.5), 12)'.$EOL.'','lesson_id' => $lesson13->id,'user_id' => $user->id]);
        $exercise168 = Exercise::create(['prompt' => 'Write a function called calculateRetail that takes an item"s wholesale cost and its markup percentage as parameters. The function should calculate and return an item"s retail price, which is the wholesale cost plus the wholesale cost multiplied by the markup percentage. You might consider wholesaleCost and markupPerc as your parameter names.','pre_code' => '','start_code' => 'price = calculateRetail(5.0, 1)'.$EOL.'print(price == 10)'.$EOL.'price = calculateRetail(5.0, 0.5)'.$EOL.'print(price == 7.50)'.$EOL.'','test_code' => 'test_equal(calculateRetail(8.0, 1), 16)'.$EOL.'test_equal(calculateRetail(8.0, 0.5), 12)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise167->id,'user_id' => $user->id]);
        $exercise169 = Exercise::create(['prompt' => 'Complete the function called fallingDistance that takes a time t in seconds and returns the distance an object falls in time t. You can calculate the distance using the equation d = 0.5*g*t*t where g is the gravitational acceleration and is equal to 9.8. Hint: instead of setting t in the function, you should remove the t=1 statement and add t as a parameter to the function. That is, put t in between the parentheses after fallingDistance.','pre_code' => '','start_code' => 'def fallingDistance():'.$EOL.'    t = 1'.$EOL.'    return 0.5 * t * t * 9.8'.$EOL.'print(fallingDistance(1) == 4.9)'.$EOL.'print(fallingDistance(2) == 19.6)'.$EOL.'print(fallingDistance(3) == 44.1)'.$EOL.'','test_code' => 'test_equal(fallingDistance(1), 4.9)'.$EOL.'test_equal(fallingDistance(2), 19.6)'.$EOL.'test_equal(fallingDistance(3), 44.1)'.$EOL.'test_equal(fallingDistance(4), 78.4)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise168->id,'user_id' => $user->id]);
        $exercise170 = Exercise::create(['prompt' => 'Write a function called fallingDistance that takes a time t in seconds and returns the distance an object falls in time t. You can calculate the distance using the equation d = 0.5*g*t*t where g is the gravitational acceleration and is equal to 9.8.','pre_code' => '','start_code' => 'print(fallingDistance(1) == 4.9)'.$EOL.'print(fallingDistance(2) == 19.6)'.$EOL.'print(fallingDistance(3) == 44.1)'.$EOL.'','test_code' => 'test_equal(fallingDistance(1), 4.9)'.$EOL.'test_equal(fallingDistance(2), 19.6)'.$EOL.'test_equal(fallingDistance(3), 44.1)'.$EOL.'test_equal(fallingDistance(4), 78.4)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise169->id,'user_id' => $user->id]);
        $exercise171 = Exercise::create(['prompt' => 'Complete the function getLarger(a,b) that returns the larger value of a and b. Hint: if a is greater than b, return a...','pre_code' => '','start_code' => 'def getLarger(a, b):'.$EOL.'print(getLarger(1, 2) == 2)'.$EOL.'print(getLarger(2, 1) == 2)'.$EOL.'print(getLarger(-1, 3) == 3)'.$EOL.'print(getLarger(8, 7) == 8)'.$EOL.'print(getLarger(8, 8) == 8)'.$EOL.'','test_code' => 'test_equal(getLarger(1, 2), 2)'.$EOL.'test_equal(getLarger(2, 1), 2)'.$EOL.'test_equal(getLarger(-1, 3), 3)'.$EOL.'test_equal(getLarger(8, 7), 8)'.$EOL.'test_equal(getLarger(8, 8), 8)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise170->id,'user_id' => $user->id]);
        $exercise172 = Exercise::create(['prompt' => 'Write a function called getLarger(a,b) that returns the larger value of a and b. Hint: if a is greater than b, return a...','pre_code' => '','start_code' => 'print(getLarger(1, 2) == 2)'.$EOL.'print(getLarger(2, 1) == 2)'.$EOL.'print(getLarger(-1, 3) == 3)'.$EOL.'print(getLarger(8, 7) == 8)'.$EOL.'print(getLarger(8, 8) == 8)'.$EOL.'','test_code' => 'test_equal(getLarger(1, 2), 2)'.$EOL.'test_equal(getLarger(2, 1), 2)'.$EOL.'test_equal(getLarger(-1, 3), 3)'.$EOL.'test_equal(getLarger(8, 7), 8)'.$EOL.'test_equal(getLarger(8, 8), 8)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise171->id,'user_id' => $user->id]);
        $exercise173 = Exercise::create(['prompt' => 'Complete the function called getSeconds(hours) that returns the number of seconds in the given number of hours. Hint: it is missing a return statement.','pre_code' => '','start_code' => 'def getSeconds(hours):'.$EOL.'    secondsPerHour = 3600'.$EOL.'    hours * secondsPerHour'.$EOL.'print(getSeconds(1) == 3600)'.$EOL.'print(getSeconds(2.4) == 8640)'.$EOL.'print(getSeconds(4.1) == 14760)'.$EOL.'','test_code' => 'test_equal(getSeconds(3.8), 13680)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise172->id,'user_id' => $user->id]);
        $exercise174 = Exercise::create(['prompt' => 'Write a function called getSeconds(hours) that returns the number of seconds in the given number of hours.','pre_code' => '','start_code' => 'print(getSeconds(1) == 3600)'.$EOL.'print(getSeconds(2.4) == 8640)'.$EOL.'print(getSeconds(4.1) == 14760)'.$EOL.'','test_code' => 'test_equal(getSeconds(3.8), 13680)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise173->id,'user_id' => $user->id]);
        $exercise175 = Exercise::create(['prompt' => 'Complete the function getArea(radius) that returns the area of a circle. The area can be computed by squaring the radius and multiplying it by 3.14.','pre_code' => '','start_code' => 'def getArea(radius):'.$EOL.'print(getArea(2) == 12.56)'.$EOL.'print(getArea(4.1) == 52.7834)'.$EOL.'','test_code' => 'test_equal(getArea(2), 12.56)'.$EOL.'test_equal(getArea(4.1), 52.7834)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise174->id,'user_id' => $user->id]);
        $exercise176 = Exercise::create(['prompt' => 'Write a function getArea(radius) that returns the area of a circle. The area can be computed by squaring the radius and multiplying it by 3.14.','pre_code' => '','start_code' => 'print(getArea(2) == 12.56)'.$EOL.'print(getArea(4.1) == 52.7834)'.$EOL.'','test_code' => 'test_equal(getArea(2), 12.56)'.$EOL.'test_equal(getArea(4.1), 52.7834)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise175->id,'user_id' => $user->id]);
        $exercise177 = Exercise::create(['prompt' => 'Complete the function getAreas(radius1, radius2, radius3) that returns the total area of three circles with the given radii. Your getAreas function should call getArea.','pre_code' => '','start_code' => 'def getArea(radius):'.$EOL.'    return 3.14 * radius * radius'.$EOL.'def getAreas(radius1, radius2, radius3):'.$EOL.'    return getArea(radius1) + #...'.$EOL.'print(getAreas(2, 4.1, 8) == 266.3034)'.$EOL.'print(getAreas(1, 2, 3) == 43.96)'.$EOL.'','test_code' => 'test_equal(getAreas(2, 4.1, 8), 266.3034)'.$EOL.'test_equal(getAreas(2, 2, 3), 53.38)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise176->id,'user_id' => $user->id]);
        $exercise178 = Exercise::create(['prompt' => 'Write a function called getAreas(radius1, radius2, radius3) that returns the total area of three circles with the given radii. Your getAreas function should call getArea.','pre_code' => '','start_code' => 'def getArea(radius):'.$EOL.'    return 3.14 * radius * radius'.$EOL.'print(getAreas(2, 4.1, 8) == 266.3034)'.$EOL.'print(getAreas(1, 2, 3) == 43.96)'.$EOL.'','test_code' => 'test_equal(getAreas(2, 4.1, 8), 266.3034)'.$EOL.'test_equal(getAreas(2, 2, 3), 53.38)'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise177->id,'user_id' => $user->id]);
        $exercise179 = Exercise::create(['prompt' => 'Write a function called formatPhoneNumber(areaCode, exchange, line) that returns a phone number formatted as shown in the examples. Use the format() function. Hint: "{} {}".format(123, 456) would return "123 456" and "({})".format(123) would return "(123)".','pre_code' => '','start_code' => 'print(formatPhoneNumber(800, 222, 8345) == "(800) 222-8345")'.$EOL.'print(formatPhoneNumber(208, 123, 4567) == "(208) 123-4567")'.$EOL.'','test_code' => 'print(formatPhoneNumber(801, 222, 8345) == "(801) 222-8345")'.$EOL.'print(formatPhoneNumber(208, 223, 4567) == "(208) 223-4567")'.$EOL.'','lesson_id' => $lesson13->id,'previous_exercise_id' => $exercise178->id,'user_id' => $user->id]);
        $lesson14= Lesson::create(['name' => 'Fixing bugs in functions','module_id' =>  $module7->id,'previous_lesson_id' => $lesson13->id,'user_id' => $user->id]);
        $exercise180 = Exercise::create(['prompt' => 'Run the code. Note that you get an error that "add" is not defined. This is because we"re calling the "add" function before it is actually defined. Fix the code by moving the "add" function to the top of the code, before "add" is called.','pre_code' => '','start_code' => 'sum = add(3, 4)'.$EOL.'print(sum)'.$EOL.'def add(a, b):'.$EOL.'    return a + b'.$EOL.'','test_code' => 'test_out("7")'.$EOL.'','lesson_id' => $lesson14->id,'user_id' => $user->id]);
        $exercise181 = Exercise::create(['prompt' => 'Fix the code by moving the function.','pre_code' => '','start_code' => 'sum = add(3, 4)'.$EOL.'print(sum)'.$EOL.'def add(a, b):'.$EOL.'    return a + b'.$EOL.'','test_code' => 'test_out("7")'.$EOL.'','lesson_id' => $lesson14->id,'previous_exercise_id' => $exercise180->id,'user_id' => $user->id]);
        $exercise182 = Exercise::create(['prompt' => 'Fix the error by moving code.','pre_code' => '','start_code' => 'sum = add(3, 4)'.$EOL.'sum = add(sum, 5)'.$EOL.'print(sum)'.$EOL.'def add(a, b):'.$EOL.'    return a + b'.$EOL.'','test_code' => 'test_out("12")'.$EOL.'','lesson_id' => $lesson14->id,'previous_exercise_id' => $exercise181->id,'user_id' => $user->id]);
        $exercise183 = Exercise::create(['prompt' => 'Fix the error. Hint: add a return statement.','pre_code' => '','start_code' => 'def mult(a, b):'.$EOL.'    a * b'.$EOL.'print(mult(5, 5) == 25)'.$EOL.'print(mult(4, 5) == 20)'.$EOL.'','test_code' => 'test_equal(mult(5, 5), 25)'.$EOL.'test_equal(mult(3, 5), 15)'.$EOL.'','lesson_id' => $lesson14->id,'previous_exercise_id' => $exercise182->id,'user_id' => $user->id]);
        $exercise184 = Exercise::create(['prompt' => 'Fix the error.','pre_code' => '','start_code' => 'def mult(a, b):'.$EOL.'    return a * b'.$EOL.'def square(a):'.$EOL.'    mult(a, a)'.$EOL.'print(square(4) == 16)'.$EOL.'print(square(5) == 25)'.$EOL.'','test_code' => 'test_equal(square(3), 9)'.$EOL.'','lesson_id' => $lesson14->id,'previous_exercise_id' => $exercise183->id,'user_id' => $user->id]);
        $exercise185 = Exercise::create(['prompt' => 'Fix the errors.','pre_code' => '','start_code' => 'print(cube(3) == 27)'.$EOL.'def cube(a):'.$EOL.'    mult(a, mult(a, a))'.$EOL.'def mult(b, c):'.$EOL.'    b * c'.$EOL.'','test_code' => 'test_equal(cube(4), 64)'.$EOL.'','lesson_id' => $lesson14->id,'previous_exercise_id' => $exercise184->id,'user_id' => $user->id]);
        $exercise186 = Exercise::create(['prompt' => 'Fix the error. Hint: add a close parenthesis.','pre_code' => '','start_code' => 'def mult(a, b):'.$EOL.'    return a * b'.$EOL.'print(mult(5, 5) == 25)'.$EOL.'print(mult(4, 5) == 20'.$EOL.'','test_code' => 'test_equal(mult(5, 5), 25)'.$EOL.'test_equal(mult(3, 5), 15)'.$EOL.'','lesson_id' => $lesson14->id,'previous_exercise_id' => $exercise185->id,'user_id' => $user->id]);
        $exercise187 = Exercise::create(['prompt' => 'Fix the error. Hint: look at the equals signs.','pre_code' => '','start_code' => 'def mult(a, b):'.$EOL.'    return a * b'.$EOL.'print(mult(5, 5) = 25)'.$EOL.'print(mult(4, 5) == 20)'.$EOL.'','test_code' => 'test_equal(mult(5, 5), 25)'.$EOL.'test_equal(mult(3, 5), 15)'.$EOL.'','lesson_id' => $lesson14->id,'previous_exercise_id' => $exercise186->id,'user_id' => $user->id]);
        $exercise188 = Exercise::create(['prompt' => 'Fix the errors.','pre_code' => '','start_code' => 'def mult(a, b):'.$EOL.'    return a * b'.$EOL.'print(mult(5, 5) = 25)'.$EOL.'print(mult(4, 5) = 20'.$EOL.'','test_code' => 'test_equal(mult(5, 5), 25)'.$EOL.'test_equal(mult(3, 5), 15)'.$EOL.'','lesson_id' => $lesson14->id,'previous_exercise_id' => $exercise187->id,'user_id' => $user->id]);
        $project7 = Project::create(['name' => ' Darts','open_date' => '2018-06-23 0:00:00','close_date' => '2018-06-25 0:00:00','prompt' => ''.$EOL.'<div>You will be implementing the first iteration of a dart throwing program. Your program should behave similarly to what is shown in <a href="https://youtu.be/6F4pW4cDx44" target="_blank">this video</a>.'.$EOL.'The starter code sets the shape of your turtle. When the dart moves toward the target it is actually the turtle moving. You will control the speed of the turtle with the t.speed() function.'.$EOL.'Other functions you will want to use include:'.$EOL.'<ul>'.$EOL.'<li>t.dot(d, "red") -- draws a circle of diameter d filled in red</li>'.$EOL.'<li>t.setpos(x, y) -- moves the turtle to position (x, y)</li>'.$EOL.'<li>random.randint(-100, 100) -- gives a random number between -100 and 100</li>'.$EOL.'<li>t.hideturtle() -- makes the turtle invisible</li>'.$EOL.'</ul>'.$EOL.'<p>You must have at least one function called throw(). You may have other functions as well.'.$EOL.'<p>Use meaningful variable names, such as numRings and numThrows.'.$EOL.'<p>This project is to be done individually.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'screen.addshape("dart", ((-2,-2), (2,-2), (2,2), (-2,2)))'.$EOL.'t.shape("dart")'.$EOL.'t.fillcolor("green")'.$EOL.'t.color("green")'.$EOL.'','solution' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'screen.addshape("dart", ((-2,-2), (2,-2), (2,2), (-2,2)))'.$EOL.'t.shape("dart")'.$EOL.'t.fillcolor("green")'.$EOL.'t.color("green")'.$EOL.'numRings = int(input("Number of rings:"))'.$EOL.'numThrows = int(input("Number of throws:"))'.$EOL.'inc = int(100/numRings)'.$EOL.'for i in range(100, 0, -inc*2):'.$EOL.'    t.dot(i, "red")'.$EOL.'    t.dot(i-inc, "blue")'.$EOL.'for i in range(0, numThrows):'.$EOL.'    t.up()'.$EOL.'    t.speed(10000)'.$EOL.'    t.setpos(100, 100)'.$EOL.'    t.left(180)'.$EOL.'    t.speed(1)'.$EOL.'    x = random.randint(-100, 100)'.$EOL.'    y = random.randint(-100, 100)'.$EOL.'    t.setpos(x, y)'.$EOL.'    t.dot(4, "green")'.$EOL.'t.hideturtle()'.$EOL.'','module_id' => $module7->id,'previous_lesson_id' => $lesson14->id,'user_id' => $user->id]);
        $concept7= Concept::create(['name' => 'Conditional Statements','course_id' => $course->id,'previous_concept_id' => $concept6->id,'user_id' => $user->id]);
        $module8= Module::create(['name' => 'If Statements','concept_id' => $concept7->id,'open_date' => '2018-06-26 0:00:00','user_id' => $user->id]);
        $lesson15= Lesson::create(['name' => 'If statements I','module_id' =>  $module8->id,'user_id' => $user->id]);
        $exercise189 = Exercise::create(['prompt' => 'Change the world to alien.','pre_code' => '','start_code' => 'def getMessage():'.$EOL.'    if True:'.$EOL.'        return "Hello world!"'.$EOL.'print(getMessage())'.$EOL.'','test_code' => 'test_equal(getMessage(), "Hello alien!")'.$EOL.'','lesson_id' => $lesson15->id,'user_id' => $user->id]);
        $exercise190 = Exercise::create(['prompt' => 'Change the conditional from True to False so nothing is printed.','pre_code' => '','start_code' => 'def getMessage():'.$EOL.'    msg = ""'.$EOL.'    if True:'.$EOL.'        msg = "Hello world!"'.$EOL.'    return msg'.$EOL.'print(getMessage())'.$EOL.'','test_code' => 'test_equal(getMessage(), "")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise189->id,'user_id' => $user->id]);
        $exercise191 = Exercise::create(['prompt' => 'The format of an if statement is "if conditional:" followed by indented statements to execute if the conditional is true. Change True to False so that 3 is returned instead of 5.','pre_code' => '','start_code' => 'def getNumber():'.$EOL.'    a = 3'.$EOL.'    if True:'.$EOL.'        a = 5'.$EOL.'    return a'.$EOL.'print(getNumber() == 3)'.$EOL.'','test_code' => 'test_equal(getNumber(), 3)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise190->id,'user_id' => $user->id]);
        $exercise192 = Exercise::create(['prompt' => 'The format of an if statement is "if conditional:" followed by indented statements to execute if the conditional is true. Add a print statement that prints "Hello alien!" on the line after "Hello world!". Make sure the added print statement is indented.','pre_code' => '','start_code' => 'if True:'.$EOL.'    print("Hello world!")'.$EOL.'','test_code' => 'test_out("Hello world!\nHello alien!")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise191->id,'user_id' => $user->id]);
        $exercise193 = Exercise::create(['prompt' => 'Fill in the conditional so that both lines are printed. Hint: add True before the colon.','pre_code' => '','start_code' => 'if :'.$EOL.'    print("Hello world!")'.$EOL.'print("Hello alien!")'.$EOL.'','test_code' => 'test_out("Hello world!\nHello alien!")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise192->id,'user_id' => $user->id]);
        $exercise194 = Exercise::create(['prompt' => 'Fill in the conditional so that all three lines are printed.','pre_code' => '','start_code' => 'if :'.$EOL.'    print("one")'.$EOL.'    print("two")'.$EOL.'print("three")'.$EOL.'','test_code' => 'test_out("one\ntwo\nthree")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise193->id,'user_id' => $user->id]);
        $exercise195 = Exercise::create(['prompt' => 'Fill in the conditional so that all three lines are printed.','pre_code' => '','start_code' => 'if :'.$EOL.'    print("one")'.$EOL.'print("two")'.$EOL.'print("three")'.$EOL.'','test_code' => 'test_out("one\ntwo\nthree")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise194->id,'user_id' => $user->id]);
        $exercise196 = Exercise::create(['prompt' => 'Fill in the conditional so that only one line is printed. Hint: the conditional will be False.','pre_code' => '','start_code' => 'if :'.$EOL.'    print("one")'.$EOL.'    print("two")'.$EOL.'print("three")'.$EOL.'','test_code' => 'test_out("three")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise195->id,'user_id' => $user->id]);
        $exercise197 = Exercise::create(['prompt' => 'Fill in the conditional so that only one line is printed.','pre_code' => '','start_code' => 'if :'.$EOL.'    print("one")'.$EOL.'    print("two")'.$EOL.'print("three")'.$EOL.'','test_code' => 'test_out("three")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise196->id,'user_id' => $user->id]);
        $exercise198 = Exercise::create(['prompt' => 'Fill in the conditional and change indentation as needed so that two lines are printed.','pre_code' => '','start_code' => 'if :'.$EOL.'    print("one")'.$EOL.'    print("two")'.$EOL.'print("three")'.$EOL.'','test_code' => 'test_out("two\nthree")'.$EOL.'test_in("if False:")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise197->id,'user_id' => $user->id]);
        $exercise199 = Exercise::create(['prompt' => 'An if statement must have at least one statement in its body. Add a single print statement so that "one" and "two" are printed on consecutive lines. Do not modify any other lines. The statement that prints "one" should be indented.','pre_code' => '','start_code' => 'if True:'.$EOL.'print("two")'.$EOL.'','test_code' => 'test_out("one\ntwo")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise198->id,'user_id' => $user->id]);
        $exercise200 = Exercise::create(['prompt' => 'Write an if statement with a True conditional that prints "42".','pre_code' => '','start_code' => '','test_code' => 'test_out("42")'.$EOL.'test_in("if True:")'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise199->id,'user_id' => $user->id]);
        $exercise201 = Exercise::create(['prompt' => 'The output prints True if b is less than a. Switch a and b in the conditional so that it prints True if a is less than b. Your output should be True values.','pre_code' => '','start_code' => 'def lessThan(a, b):'.$EOL.'    if b < a:'.$EOL.'        return True'.$EOL.'    return False'.$EOL.'print(lessThan(3, 4) == True)'.$EOL.'print(lessThan(4, 3) == True)'.$EOL.'','test_code' => 'test_equal(lessThan(30, 40), True)'.$EOL.'test_equal(lessThan(40, 30), False)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise200->id,'user_id' => $user->id]);
        $exercise202 = Exercise::create(['prompt' => 'Fill in the conditional so that True will be returned if a is less than b and False otherwise. Your output should be True values.','pre_code' => '','start_code' => 'def lessThan(a, b):'.$EOL.'    if :'.$EOL.'        return True'.$EOL.'    return False'.$EOL.'print(lessThan(3, 4) == True)'.$EOL.'print(lessThan(4, 3) == True)'.$EOL.'','test_code' => 'test_equal(lessThan(30, 40), True)'.$EOL.'test_equal(lessThan(40, 30), False)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise201->id,'user_id' => $user->id]);
        $exercise203 = Exercise::create(['prompt' => 'Write an if statement in the lessThan() function so that True will be returned if a is less than b and False otherwise. Your output should be True values.','pre_code' => '','start_code' => 'def lessThan(a, b):'.$EOL.'print(lessThan(3, 4) == True)'.$EOL.'print(lessThan(4, 3) == True)'.$EOL.'','test_code' => 'test_equal(lessThan(30, 40), True)'.$EOL.'test_equal(lessThan(40, 30), False)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise202->id,'user_id' => $user->id]);
        $exercise204 = Exercise::create(['prompt' => 'Write a lessThan(a, b) function that returns True if a is less than b and False otherwise. Your output should be True values.','pre_code' => '','start_code' => 'print(lessThan(3, 4) == True)'.$EOL.'print(lessThan(4, 3) == True)'.$EOL.'','test_code' => 'test_equal(lessThan(30, 40), True)'.$EOL.'test_equal(lessThan(40, 30), False)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise203->id,'user_id' => $user->id]);
        $exercise205 = Exercise::create(['prompt' => 'Fix the conditional so that it reads a == b. The double equals compares two values. (Remember that the single equals assigns a value to a variable.) Your output should be True values.','pre_code' => '','start_code' => 'def equals(a, b):'.$EOL.'    if a == a:'.$EOL.'        return True'.$EOL.'    else:'.$EOL.'        return False'.$EOL.'print(equals(3, 4) == False)'.$EOL.'print(equals(4, 3) == False)'.$EOL.'print(equals(3, 3) == True)'.$EOL.'print(equals(4, 4) == True)'.$EOL.'','test_code' => 'test_equal(equals(3, 4), False)'.$EOL.'test_equal(equals(4, 3), False)'.$EOL.'test_equal(equals(3, 3), True)'.$EOL.'test_equal(equals(4, 4), True)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise204->id,'user_id' => $user->id]);
        $exercise206 = Exercise::create(['prompt' => 'Fill in the conditional. Your output should be True values.','pre_code' => '','start_code' => 'def equals(a, b):'.$EOL.'    if :'.$EOL.'        return True'.$EOL.'    else:'.$EOL.'        return False'.$EOL.'print(equals(3, 4) == False)'.$EOL.'print(equals(4, 3) == False)'.$EOL.'print(equals(3, 3) == True)'.$EOL.'print(equals(4, 4) == True)'.$EOL.'','test_code' => 'test_equal(equals(3, 4), False)'.$EOL.'test_equal(equals(4, 3), False)'.$EOL.'test_equal(equals(3, 3), True)'.$EOL.'test_equal(equals(4, 4), True)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise205->id,'user_id' => $user->id]);
        $exercise207 = Exercise::create(['prompt' => 'Fill in the body of the equals(a, b) function. Your output should be True values.','pre_code' => '','start_code' => 'def equals(a, b):'.$EOL.'print(equals(3, 4) == False)'.$EOL.'print(equals(4, 3) == False)'.$EOL.'print(equals(3, 3) == True)'.$EOL.'print(equals(4, 4) == True)'.$EOL.'','test_code' => 'test_equal(equals(3, 4), False)'.$EOL.'test_equal(equals(4, 3), False)'.$EOL.'test_equal(equals(3, 3), True)'.$EOL.'test_equal(equals(4, 4), True)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise206->id,'user_id' => $user->id]);
        $exercise208 = Exercise::create(['prompt' => 'Write a function equals(a, b) that returns True if a and b are equal and False otherwise. Your output should be True values.','pre_code' => '','start_code' => 'print(equals(3, 4) == False)'.$EOL.'print(equals(4, 3) == False)'.$EOL.'print(equals(3, 3) == True)'.$EOL.'print(equals(4, 4) == True)'.$EOL.'','test_code' => 'test_equal(equals(3, 4), False)'.$EOL.'test_equal(equals(4, 3), False)'.$EOL.'test_equal(equals(3, 3), True)'.$EOL.'test_equal(equals(4, 4), True)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise207->id,'user_id' => $user->id]);
        $exercise209 = Exercise::create(['prompt' => 'Write a function greaterThan(a, b) that returns True if a is greater than b and False otherwise. Your output should be True values.','pre_code' => '','start_code' => 'print(greaterThan(3, 4) == False)'.$EOL.'print(greaterThan(4, 3) == True)'.$EOL.'print(greaterThan(3, 3) == False)'.$EOL.'print(greaterThan(4, 4) == False)'.$EOL.'','test_code' => 'test_equal(greaterThan(3, 4), False)'.$EOL.'test_equal(greaterThan(4, 3), True)'.$EOL.'test_equal(greaterThan(3, 3), False)'.$EOL.'test_equal(greaterThan(4, 4), False)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise208->id,'user_id' => $user->id]);
        $exercise210 = Exercise::create(['prompt' => 'Modify the function so that it returns True if the msg is "Hello" (with an uppercase "H") and False otherwise. Your output should be True values.','pre_code' => '','start_code' => 'def isGreeting(msg):'.$EOL.'    if msg == "hello":'.$EOL.'        return True'.$EOL.'    else:'.$EOL.'        return False'.$EOL.'print(isGreeting("Hello") == True)'.$EOL.'print(isGreeting("hello") == False)'.$EOL.'print(isGreeting("1181") == False)'.$EOL.'print(isGreeting("Groove") == False)'.$EOL.'','test_code' => 'test_equal(isGreeting("Hello"), True)'.$EOL.'test_equal(isGreeting("hello"), False)'.$EOL.'test_equal(isGreeting("1181"), False)'.$EOL.'test_equal(isGreeting("Groove"), False)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise209->id,'user_id' => $user->id]);
        $exercise211 = Exercise::create(['prompt' => 'Write a function isGreeting(msg) that returns True if msg is equal to "Hello" and False otherwise. Your output should be True values.','pre_code' => '','start_code' => 'print(isGreeting("Hello") == True)'.$EOL.'print(isGreeting("hello") == False)'.$EOL.'print(isGreeting("1181") == False)'.$EOL.'print(isGreeting("Groove") == False)'.$EOL.'','test_code' => 'test_equal(isGreeting("Hello"), True)'.$EOL.'test_equal(isGreeting("hello"), False)'.$EOL.'test_equal(isGreeting("1181"), False)'.$EOL.'test_equal(isGreeting("Groove"), False)'.$EOL.'','lesson_id' => $lesson15->id,'previous_exercise_id' => $exercise210->id,'user_id' => $user->id]);
        $project8 = Project::create(['name' => ' Stadium seating','open_date' => '2018-06-30 0:00:00','close_date' => '2018-07-02 0:00:00','prompt' => ''.$EOL.'<div>There are three seating categories at an athletic stadium. Class A seats cost $15 each, Class B seats cost $12 each, and Class C seats cost $9 each. Create an application that allows the user to enter the number of tickets sold for each class. The application should be able to display the amount of income generated from each class of ticket sales and the total revenue generated. The output should look something like the following: '.$EOL.'<table class="code-padded">'.$EOL.'<col align="right">'.$EOL.'<col align="left">'.$EOL.'<col align="left">'.$EOL.'<tr><td/><td># Tickets</td><td>Revenue</td></tr>'.$EOL.'<tr><td>Class A:</td><td>320</td><td>$4,800</td></tr>'.$EOL.'<tr><td>Class B:</td><td>570</td><td>$6,840</td></tr>'.$EOL.'<tr><td>Class C:</td><td>890</td><td>$8,010</td></tr>'.$EOL.'<tr><td>Total:</td><td>1780</td><td>$19,650</td></tr>'.$EOL.'</table>'.$EOL.'The output must be formatted using the string format() function.'.$EOL.'<p>If ticket sales exceeds $20,000 print "Meets projections." Otherwise, print "Did not meet projections." This will let the user know whether they need to ramp up advertising for the next event or not.'.$EOL.'<p>Your code should have the following variables: <span class="code">costA, costB, costC, numA, numB, numC, numTotal, revenueA, revenueB, revenueC, revenueTotal</span>.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => 'classA = 15'.$EOL.'classB = 12'.$EOL.'classC = 9'.$EOL.'numA = int(input("Number of class A tickets:"))'.$EOL.'numB = int(input("Number of class B tickets:"))'.$EOL.'numC = int(input("Number of class C tickets:"))'.$EOL.'numTotal = numA + numB + numC'.$EOL.'revenueA = classA*numA'.$EOL.'revenueB = classB*numB'.$EOL.'revenueC = classC*numC'.$EOL.'revenueTotal = revenueA + revenueB + revenueC'.$EOL.'print("{:>8}  {:<10}{:<10}".format("", "# Tickets", "Revenue"))'.$EOL.'print("{:>8}  {:<10}${:,}".format("Class A:", numA, revenueA))'.$EOL.'print("{:>8}  {:<10}${:,}".format("Class B:", numB, revenueB))'.$EOL.'print("{:>8}  {:<10}${:,}".format("Class C:", numC, revenueC))'.$EOL.'print("{:>8}  {:<10}${:,}".format("Total:", numTotal, revenueTotal))'.$EOL.'if revenueTotal > 20000:'.$EOL.'    print("Meets projections.")'.$EOL.'else'.$EOL.'    print("Did not meet projections.")'.$EOL.'','module_id' => $module8->id,'previous_lesson_id' => $lesson15->id,'user_id' => $user->id]);
        $lesson16= Lesson::create(['name' => 'If statements II','module_id' =>  $module8->id,'previous_lesson_id' => $lesson15->id,'user_id' => $user->id]);
        $exercise212 = Exercise::create(['prompt' => 'Change the 4 to a 3 so that the function returns the number doubled only if the number is a 3. Your output should be all True values.','pre_code' => '','start_code' => 'def doubleThree(a):'.$EOL.'    if a == 4:'.$EOL.'        return a * 2'.$EOL.'    else:'.$EOL.'        return a'.$EOL.'print(doubleThree(1) == 1)'.$EOL.'print(doubleThree(2) == 2)'.$EOL.'print(doubleThree(3) == 6)'.$EOL.'print(doubleThree(4) == 4)'.$EOL.'','test_code' => 'test_equal(doubleThree(1), 1)'.$EOL.'test_equal(doubleThree(2), 2)'.$EOL.'test_equal(doubleThree(3), 6)'.$EOL.'test_equal(doubleThree(4), 4)'.$EOL.'','lesson_id' => $lesson16->id,'user_id' => $user->id]);
        $exercise213 = Exercise::create(['prompt' => 'Implement the function so that the double of the number a is returned if a is 3. Your output should be all True values.','pre_code' => '','start_code' => 'def doubleThree(a):'.$EOL.'print(doubleThree(1) == 1)'.$EOL.'print(doubleThree(2) == 2)'.$EOL.'print(doubleThree(3) == 6)'.$EOL.'print(doubleThree(4) == 4)'.$EOL.'','test_code' => 'test_equal(doubleThree(1), 1)'.$EOL.'test_equal(doubleThree(2), 2)'.$EOL.'test_equal(doubleThree(3), 6)'.$EOL.'test_equal(doubleThree(4), 4)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise212->id,'user_id' => $user->id]);
        $exercise214 = Exercise::create(['prompt' => 'Implement the function doubleThree. Your output should be all True values.','pre_code' => '','start_code' => 'print(doubleThree(1) == 1)'.$EOL.'print(doubleThree(2) == 2)'.$EOL.'print(doubleThree(3) == 6)'.$EOL.'print(doubleThree(4) == 4)'.$EOL.'','test_code' => 'test_equal(doubleThree(1), 1)'.$EOL.'test_equal(doubleThree(2), 2)'.$EOL.'test_equal(doubleThree(3), 6)'.$EOL.'test_equal(doubleThree(4), 4)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise213->id,'user_id' => $user->id]);
        $exercise215 = Exercise::create(['prompt' => 'Implement the function doubleNine. Your output should be all True values.','pre_code' => '','start_code' => 'print(doubleNine(1) == 1)'.$EOL.'print(doubleNine(2) == 2)'.$EOL.'print(doubleNine(8) == 8)'.$EOL.'print(doubleNine(9) == 18)'.$EOL.'print(doubleNine(10) == 10)'.$EOL.'','test_code' => 'test_equal(doubleNine(1), 1)'.$EOL.'test_equal(doubleNine(2), 2)'.$EOL.'test_equal(doubleNine(8), 8)'.$EOL.'test_equal(doubleNine(9), 18)'.$EOL.'test_equal(doubleNine(10), 10)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise214->id,'user_id' => $user->id]);
        $exercise216 = Exercise::create(['prompt' => 'Complete the implementation of the function doubleBig, which returns the number doubled if the number is greater than 5. Your output should be all True values.','pre_code' => '','start_code' => 'def doubleBig(number):'.$EOL.'    if number > 5:'.$EOL.'print(doubleBig(3) == 3)'.$EOL.'print(doubleBig(5) == 5)'.$EOL.'print(doubleBig(6) == 12)'.$EOL.'print(doubleBig(7) == 14)'.$EOL.'','test_code' => 'test_equal(doubleBig(3), 3)'.$EOL.'test_equal(doubleBig(5), 5)'.$EOL.'test_equal(doubleBig(6), 12)'.$EOL.'test_equal(doubleBig(7), 14)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise215->id,'user_id' => $user->id]);
        $exercise217 = Exercise::create(['prompt' => 'Implement doubleBig. Your output should be all True values.','pre_code' => '','start_code' => 'print(doubleBig(3) == 3)'.$EOL.'print(doubleBig(5) == 5)'.$EOL.'print(doubleBig(6) == 12)'.$EOL.'print(doubleBig(7) == 14)'.$EOL.'','test_code' => 'test_equal(doubleBig(3), 3)'.$EOL.'test_equal(doubleBig(5), 5)'.$EOL.'test_equal(doubleBig(6), 12)'.$EOL.'test_equal(doubleBig(7), 14)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise216->id,'user_id' => $user->id]);
        $exercise218 = Exercise::create(['prompt' => 'The >= operator means "greater than or equal to." Complete the implementation of doubleKindaBig, which doubles the number if it is greater than or equal to 5. Your output should be all True values.','pre_code' => '','start_code' => 'def doubleKindaBig(number):'.$EOL.'    if number >= 5:'.$EOL.'print(doubleKindaBig(3) == 3)'.$EOL.'print(doubleKindaBig(5) == 10)'.$EOL.'print(doubleKindaBig(6) == 12)'.$EOL.'print(doubleKindaBig(7) == 14)'.$EOL.'','test_code' => 'test_equal(doubleKindaBig(3), 3)'.$EOL.'test_equal(doubleKindaBig(5), 10)'.$EOL.'test_equal(doubleKindaBig(6), 12)'.$EOL.'test_equal(doubleKindaBig(7), 14)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise217->id,'user_id' => $user->id]);
        $exercise219 = Exercise::create(['prompt' => 'Implement doubleKindaBig, which doubles the number if it is greater than or equal to 5. Your output should be all True values.','pre_code' => '','start_code' => 'print(doubleKindaBig(3) == 3)'.$EOL.'print(doubleKindaBig(5) == 10)'.$EOL.'print(doubleKindaBig(6) == 12)'.$EOL.'print(doubleKindaBig(7) == 14)'.$EOL.'','test_code' => 'test_equal(doubleKindaBig(3), 3)'.$EOL.'test_equal(doubleKindaBig(5), 10)'.$EOL.'test_equal(doubleKindaBig(6), 12)'.$EOL.'test_equal(doubleKindaBig(7), 14)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise218->id,'user_id' => $user->id]);
        $exercise220 = Exercise::create(['prompt' => 'Implement doubleKindaSmall, which doubles the number if it is less than or equal to 5 (hint: use "<=" instead of ">="). Your output should be all True values.','pre_code' => '','start_code' => 'print(doubleKindaSmall(3) == 6)'.$EOL.'print(doubleKindaSmall(4) == 8)'.$EOL.'print(doubleKindaSmall(5) == 10)'.$EOL.'print(doubleKindaSmall(6) == 6)'.$EOL.'print(doubleKindaSmall(7) == 7)'.$EOL.'','test_code' => 'test_equal(doubleKindaSmall(3), 6)'.$EOL.'test_equal(doubleKindaSmall(4), 8)'.$EOL.'test_equal(doubleKindaSmall(5), 10)'.$EOL.'test_equal(doubleKindaSmall(6), 6)'.$EOL.'test_equal(doubleKindaSmall(7), 7)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise219->id,'user_id' => $user->id]);
        $exercise221 = Exercise::create(['prompt' => 'Implement doubleSmaller, which doubles "a" and returns it if "a" is less than "b". Otherwise, it returns "a". Your output should be all True values.','pre_code' => '','start_code' => 'def doubleSmaller(a, b):'.$EOL.'print(doubleSmaller(3, 4) == 6)'.$EOL.'print(doubleSmaller(3, 3) == 3)'.$EOL.'print(doubleSmaller(3, 2) == 3)'.$EOL.'print(doubleSmaller(8, 10) == 16)'.$EOL.'print(doubleSmaller(8, 8) == 8)'.$EOL.'print(doubleSmaller(8, 2) == 8)'.$EOL.'','test_code' => 'test_equal(doubleSmaller(3, 4), 6)'.$EOL.'test_equal(doubleSmaller(3, 3), 3)'.$EOL.'test_equal(doubleSmaller(3, 2), 3)'.$EOL.'test_equal(doubleSmaller(8, 10), 16)'.$EOL.'test_equal(doubleSmaller(8, 8), 8)'.$EOL.'test_equal(doubleSmaller(8, 2), 8)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise220->id,'user_id' => $user->id]);
        $exercise222 = Exercise::create(['prompt' => 'Implement doubleKindaSmaller, which doubles "a" and returns it if "a" is less than or equal to "b". Otherwise, it returns "a". Your output should be all True values.','pre_code' => '','start_code' => 'print(doubleKindaSmaller(3, 4) == 6)'.$EOL.'print(doubleKindaSmaller(3, 3) == 6)'.$EOL.'print(doubleKindaSmaller(3, 2) == 3)'.$EOL.'print(doubleKindaSmaller(8, 10) == 16)'.$EOL.'print(doubleKindaSmaller(8, 8) == 16)'.$EOL.'print(doubleKindaSmaller(8, 2) == 8)'.$EOL.'','test_code' => 'test_equal(doubleKindaSmaller(3, 4), 6)'.$EOL.'test_equal(doubleKindaSmaller(3, 3), 6)'.$EOL.'test_equal(doubleKindaSmaller(3, 2), 3)'.$EOL.'test_equal(doubleKindaSmaller(8, 10), 16)'.$EOL.'test_equal(doubleKindaSmaller(8, 8), 16)'.$EOL.'test_equal(doubleKindaSmaller(8, 2), 8)'.$EOL.'','lesson_id' => $lesson16->id,'previous_exercise_id' => $exercise221->id,'user_id' => $user->id]);
        $lesson17= Lesson::create(['name' => 'or/and','module_id' =>  $module8->id,'previous_lesson_id' => $lesson16->id,'user_id' => $user->id]);
        $exercise223 = Exercise::create(['prompt' => 'We can combine conditionals with the or operator. Change the conditional so that "Hello" is returned if a is 4 or if b is 4, and "Goodbye" otherwise. Your output should be True values.','pre_code' => '','start_code' => 'def getMessage(a, b):'.$EOL.'    if a == 4 or b == 5:'.$EOL.'        return "Hello"'.$EOL.'    else:'.$EOL.'        return "Goodbye"'.$EOL.'print(getMessage(4, 5) == "Hello")'.$EOL.'print(getMessage(4, 4) == "Hello")'.$EOL.'print(getMessage(3, 5) == "Goodbye")'.$EOL.'','test_code' => 'test_equal(getMessage(4, 5), "Hello")'.$EOL.'test_equal(getMessage(4, 4), "Hello")'.$EOL.'test_equal(getMessage(3, 5), "Goodbye")'.$EOL.'','lesson_id' => $lesson17->id,'user_id' => $user->id]);
        $exercise224 = Exercise::create(['prompt' => 'Change the conditional so that "Hello" is returned if a is 3 or if b is 5.','pre_code' => '','start_code' => 'def getMessage(a, b):'.$EOL.'    if a == 4 or b == 5:'.$EOL.'        return "Hello"'.$EOL.'    else:'.$EOL.'        return "Goodbye"'.$EOL.'print(getMessage(4, 5) == "Hello")'.$EOL.'print(getMessage(4, 4) == "Goodbye")'.$EOL.'print(getMessage(3, 5) == "Hello")'.$EOL.'','test_code' => 'test_equal(getMessage(4, 5), "Hello")'.$EOL.'test_equal(getMessage(4, 4), "Goodbye")'.$EOL.'test_equal(getMessage(3, 5), "Hello")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise223->id,'user_id' => $user->id]);
        $exercise225 = Exercise::create(['prompt' => 'Write a function getMessage(a, b) that returns "Hello" if a is 3 or if b is 5 and returns "Goodbye" otherwise.','pre_code' => '','start_code' => 'print(getMessage(4, 5) == "Hello")'.$EOL.'print(getMessage(4, 4) == "Goodbye")'.$EOL.'print(getMessage(3, 5) == "Hello")'.$EOL.'','test_code' => 'test_equal(getMessage(4, 5), "Hello")'.$EOL.'test_equal(getMessage(4, 4), "Goodbye")'.$EOL.'test_equal(getMessage(3, 5), "Hello")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise224->id,'user_id' => $user->id]);
        $exercise226 = Exercise::create(['prompt' => 'Change the conditional so that "Hello" is returned if a is less than b-2 and returns "Goodbye" otherwise.','pre_code' => '','start_code' => 'def getMessage(a, b):'.$EOL.'    if a < b - 1:'.$EOL.'        return "Hello"'.$EOL.'    else:'.$EOL.'        return "Goodbye"'.$EOL.'print(getMessage(3, 4) == "Goodbye")'.$EOL.'print(getMessage(3, 5) == "Goodbye")'.$EOL.'print(getMessage(3, 6) == "Hello")'.$EOL.'','test_code' => 'test_equal(getMessage(3, 4), "Goodbye")'.$EOL.'test_equal(getMessage(3, 5), "Goodbye")'.$EOL.'test_equal(getMessage(3, 6), "Hello")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise225->id,'user_id' => $user->id]);
        $exercise227 = Exercise::create(['prompt' => 'Change the conditional so that "Hello" is returned if a is less than b-2 or if a is equal to 3 and returns "Goodbye" otherwise.','pre_code' => '','start_code' => 'def getMessage(a, b):'.$EOL.'    if a < b - 1 or a == 4:'.$EOL.'        return "Hello"'.$EOL.'    else:'.$EOL.'        return "Goodbye"'.$EOL.'print(getMessage(4, 5) == "Goodbye")'.$EOL.'print(getMessage(4, 6) == "Goodbye")'.$EOL.'print(getMessage(4, 7) == "Hello")'.$EOL.'print(getMessage(3, 4) == "Hello")'.$EOL.'print(getMessage(2, 3) == "Goodbye")'.$EOL.'','test_code' => 'test_equal(getMessage(4, 5), "Goodbye")'.$EOL.'test_equal(getMessage(4, 6), "Goodbye")'.$EOL.'test_equal(getMessage(4, 7), "Hello")'.$EOL.'test_equal(getMessage(3, 4), "Hello")'.$EOL.'test_equal(getMessage(2, 3), "Goodbye")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise226->id,'user_id' => $user->id]);
        $exercise228 = Exercise::create(['prompt' => 'Write a function getMessage(a, b) that returns "Yes" if a is less than b or if a is equal to 3 and returns "No" otherwise.','pre_code' => '','start_code' => 'print(getMessage(4, 3) == "No")'.$EOL.'print(getMessage(4, 4) == "No")'.$EOL.'print(getMessage(4, 5) == "Yes")'.$EOL.'print(getMessage(3, 2) == "Yes")'.$EOL.'print(getMessage(3, 3) == "Yes")'.$EOL.'print(getMessage(3, 4) == "Yes")'.$EOL.'','test_code' => 'test_equal(getMessage(4, 3), "No")'.$EOL.'test_equal(getMessage(4, 4), "No")'.$EOL.'test_equal(getMessage(4, 5), "Yes")'.$EOL.'test_equal(getMessage(3, 2), "Yes")'.$EOL.'test_equal(getMessage(3, 3), "Yes")'.$EOL.'test_equal(getMessage(3, 4), "Yes")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise227->id,'user_id' => $user->id]);
        $exercise229 = Exercise::create(['prompt' => 'Write a function getMessage(a, b) that returns "Yes" if a is less than zero or if b is less than zero. Hint: use the "or" keyword.','pre_code' => '','start_code' => 'print(getMessage(1, 2) == "No")'.$EOL.'print(getMessage(0, 3) == "No")'.$EOL.'print(getMessage(-4, 5) == "Yes")'.$EOL.'print(getMessage(3, -2) == "Yes")'.$EOL.'print(getMessage(-3, -3) == "Yes")'.$EOL.'','test_code' => 'test_equal(getMessage(1, 2), "No")'.$EOL.'test_equal(getMessage(0, 3), "No")'.$EOL.'test_equal(getMessage(-4, 5), "Yes")'.$EOL.'test_equal(getMessage(3, -2), "Yes")'.$EOL.'test_equal(getMessage(-3, -3), "Yes")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise228->id,'user_id' => $user->id]);
        $exercise230 = Exercise::create(['prompt' => 'Write a function getMessage(a, b) that returns "Yes" if a is less than zero or if b is greater than or equal to 3.','pre_code' => '','start_code' => 'print(getMessage(0, 2) == "No")'.$EOL.'print(getMessage(0, 3) == "Yes")'.$EOL.'print(getMessage(0, 4) == "Yes")'.$EOL.'print(getMessage(-1, 2) == "Yes")'.$EOL.'print(getMessage(-1, 3) == "Yes")'.$EOL.'print(getMessage(10, 2) == "No")'.$EOL.'','test_code' => 'test_equal(getMessage(0, 2), "No")'.$EOL.'test_equal(getMessage(0, 3), "Yes")'.$EOL.'test_equal(getMessage(0, 4), "Yes")'.$EOL.'test_equal(getMessage(-1, 2), "Yes")'.$EOL.'test_equal(getMessage(-1, 3), "Yes")'.$EOL.'test_equal(getMessage(10, 2), "No")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise229->id,'user_id' => $user->id]);
        $exercise231 = Exercise::create(['prompt' => 'Similar to the "or" operator, the "and" operator requires both conditionals to be true. Change the conditional so that "Yes" is returned if a is less than 3 and if b is equal to 5 and returns "No" otherwise.','pre_code' => '','start_code' => 'def getMessage(a, b):'.$EOL.'    if a < 3 and b == 4:'.$EOL.'        return "Yes"'.$EOL.'    else:'.$EOL.'        return "No"'.$EOL.'print(getMessage(1, 4) == "No")'.$EOL.'print(getMessage(2, 4) == "No")'.$EOL.'print(getMessage(3, 4) == "No")'.$EOL.'print(getMessage(3, 5) == "No")'.$EOL.'print(getMessage(2, 5) == "Yes")'.$EOL.'print(getMessage(1, 5) == "Yes")'.$EOL.'print(getMessage(2, 6) == "No")'.$EOL.'','test_code' => 'test_equal(getMessage(1, 4), "No")'.$EOL.'test_equal(getMessage(2, 4), "No")'.$EOL.'test_equal(getMessage(3, 4), "No")'.$EOL.'test_equal(getMessage(3, 5), "No")'.$EOL.'test_equal(getMessage(2, 5), "Yes")'.$EOL.'test_equal(getMessage(1, 5), "Yes")'.$EOL.'test_equal(getMessage(2, 6), "No")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise230->id,'user_id' => $user->id]);
        $exercise232 = Exercise::create(['prompt' => 'Write a function getMessage(a, b) that returns "Yes" if a is less than 3 and if b is equal to 5 and returns "No" otherwise.','pre_code' => '','start_code' => 'print(getMessage(1, 4) == "No")'.$EOL.'print(getMessage(2, 4) == "No")'.$EOL.'print(getMessage(3, 4) == "No")'.$EOL.'print(getMessage(3, 5) == "No")'.$EOL.'print(getMessage(2, 5) == "Yes")'.$EOL.'print(getMessage(1, 5) == "Yes")'.$EOL.'print(getMessage(2, 6) == "No")'.$EOL.'','test_code' => 'test_equal(getMessage(1, 4), "No")'.$EOL.'test_equal(getMessage(2, 4), "No")'.$EOL.'test_equal(getMessage(3, 4), "No")'.$EOL.'test_equal(getMessage(3, 5), "No")'.$EOL.'test_equal(getMessage(2, 5), "Yes")'.$EOL.'test_equal(getMessage(1, 5), "Yes")'.$EOL.'test_equal(getMessage(2, 6), "No")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise231->id,'user_id' => $user->id]);
        $exercise233 = Exercise::create(['prompt' => 'Write a function getMessage(a, b) that returns "Yes" if a is less than or equal to 3 and if b is equal to 5 and returns "No" otherwise.','pre_code' => '','start_code' => 'print(getMessage(1, 4) == "No")'.$EOL.'print(getMessage(2, 4) == "No")'.$EOL.'print(getMessage(3, 4) == "No")'.$EOL.'print(getMessage(3, 5) == "Yes")'.$EOL.'print(getMessage(2, 5) == "Yes")'.$EOL.'print(getMessage(1, 5) == "Yes")'.$EOL.'print(getMessage(2, 6) == "No")'.$EOL.'','test_code' => 'test_equal(getMessage(1, 4), "No")'.$EOL.'test_equal(getMessage(2, 4), "No")'.$EOL.'test_equal(getMessage(3, 4), "No")'.$EOL.'test_equal(getMessage(3, 5), "Yes")'.$EOL.'test_equal(getMessage(2, 5), "Yes")'.$EOL.'test_equal(getMessage(1, 5), "Yes")'.$EOL.'test_equal(getMessage(2, 6), "No")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise232->id,'user_id' => $user->id]);
        $exercise234 = Exercise::create(['prompt' => 'Write a function getMessage(a, b) that returns "Yes" if a*b is greater than 10 and if a is less than 5 and returns "No" otherwise.','pre_code' => '','start_code' => 'print(getMessage(1, 4) == "No")'.$EOL.'print(getMessage(2, 4) == "No")'.$EOL.'print(getMessage(3, 4) == "Yes")'.$EOL.'print(getMessage(4, 4) == "Yes")'.$EOL.'print(getMessage(5, 4) == "No")'.$EOL.'','test_code' => 'test_equal(getMessage(1, 4), "No")'.$EOL.'test_equal(getMessage(2, 4), "No")'.$EOL.'test_equal(getMessage(3, 4), "Yes")'.$EOL.'test_equal(getMessage(4, 4), "Yes")'.$EOL.'test_equal(getMessage(5, 4), "No")'.$EOL.'','lesson_id' => $lesson17->id,'previous_exercise_id' => $exercise233->id,'user_id' => $user->id]);
        $lesson18= Lesson::create(['name' => 'Not equal','module_id' =>  $module8->id,'previous_lesson_id' => $lesson17->id,'user_id' => $user->id]);
        $exercise235 = Exercise::create(['prompt' => 'The <> operator evaluates to True if the arguments on either side are not equal. Change the "==" to "<>" to that the program outputs True values.','pre_code' => '','start_code' => 'def notEqual(a, b):'.$EOL.'    if a == b:'.$EOL.'        return "Yes"'.$EOL.'    else:'.$EOL.'        return "No"'.$EOL.'print(notEqual(3, 3) == "No")'.$EOL.'print(notEqual(2, 3) == "Yes")'.$EOL.'print(notEqual(3, 4) == "Yes")'.$EOL.'','test_code' => 'test_equal(notEqual(3, 3), "No")'.$EOL.'test_equal(notEqual(2, 3), "Yes")'.$EOL.'test_equal(notEqual(3, 4), "Yes")'.$EOL.'','lesson_id' => $lesson18->id,'user_id' => $user->id]);
        $exercise236 = Exercise::create(['prompt' => 'Write a function notEqual(a, b) that returns "Yes" if a is not equal to b and returns "No" otherwise.','pre_code' => '','start_code' => 'print(notEqual(3, 3) == "No")'.$EOL.'print(notEqual(2, 3) == "Yes")'.$EOL.'print(notEqual(3, 4) == "Yes")'.$EOL.'','test_code' => 'test_equal(notEqual(3, 3), "No")'.$EOL.'test_equal(notEqual(2, 3), "Yes")'.$EOL.'test_equal(notEqual(3, 4), "Yes")'.$EOL.'','lesson_id' => $lesson18->id,'previous_exercise_id' => $exercise235->id,'user_id' => $user->id]);
        $exercise237 = Exercise::create(['prompt' => 'Write a function getMessage(a, b) that returns "Yes" if a is not equal to 3 and b is not equal to 4 and returns "No" otherwise.','pre_code' => '','start_code' => 'print(getMessage(3, 3) == "No")'.$EOL.'print(getMessage(2, 4) == "No")'.$EOL.'print(getMessage(3, 4) == "No")'.$EOL.'print(getMessage(2, 3) == "Yes")'.$EOL.'print(getMessage(2, 5) == "Yes")'.$EOL.'','test_code' => 'test_equal(getMessage(3, 3), "No")'.$EOL.'test_equal(getMessage(2, 4), "No")'.$EOL.'test_equal(getMessage(3, 4), "No")'.$EOL.'test_equal(getMessage(2, 3), "Yes")'.$EOL.'test_equal(getMessage(2, 5), "Yes")'.$EOL.'','lesson_id' => $lesson18->id,'previous_exercise_id' => $exercise236->id,'user_id' => $user->id]);
        $exercise238 = Exercise::create(['prompt' => 'Write a function getMessage(a, b) that returns "Yes" if a is not equal to 3 and b is less than 4 and returns "No" otherwise.','pre_code' => '','start_code' => 'print(getMessage(3, 3) == "No")'.$EOL.'print(getMessage(2, 4) == "No")'.$EOL.'print(getMessage(3, 4) == "No")'.$EOL.'print(getMessage(2, 3) == "Yes")'.$EOL.'print(getMessage(2, 5) == "No")'.$EOL.'','test_code' => 'test_equal(getMessage(3, 3), "No")'.$EOL.'test_equal(getMessage(2, 4), "No")'.$EOL.'test_equal(getMessage(3, 4), "No")'.$EOL.'test_equal(getMessage(2, 3), "Yes")'.$EOL.'test_equal(getMessage(2, 5), "No")'.$EOL.'','lesson_id' => $lesson18->id,'previous_exercise_id' => $exercise237->id,'user_id' => $user->id]);
        $project9 = Project::create(['name' => ' Calculator I','open_date' => '2018-06-30 0:00:00','close_date' => '2018-07-02 0:00:00','prompt' => '<div>'.$EOL.'You will write a simple calculator program. See <a href="https://youtu.be/cK761yGM1yU" target="calculator">here</a> for simple usage. Your code must have at least four functions: add, subtract, multiply, and divide. You will as the user for two numbers and then ask what the user would like to do with the two numbers. You will then print the result. Use the input function to get input from the user. When the user enters a number, be sure to convert it to an integer before using it.'.$EOL.'<p>Example:'.$EOL.'<br>Enter a number: 3'.$EOL.'<br>Enter another number: 4'.$EOL.'<br>What would you like to do? ("+" add, "-" subtract, "*" multiply, "/" divide): +'.$EOL.'<br>3 + 4 = 7'.$EOL.'Be sure to add a wow factor, like supporting other arithmetic operators, asking for the user"s name and customizing the output, etc.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => 'def add(a, b):'.$EOL.'    return a + b'.$EOL.'def subtract(a, b):'.$EOL.'    return a - b'.$EOL.'def multiply(a, b):'.$EOL.'    return a * b'.$EOL.'def divide(a, b):'.$EOL.'    return a / b'.$EOL.'a = int(input("Enter a number"))'.$EOL.'b = int(input("Enter another number"))'.$EOL.'op = input("What would you like to do? ("+" add, "-" subtract, "*" multiply, "/" divide)")'.$EOL.'if op == "+":'.$EOL.'    print("{} + {} = {}".format(a, b, add(a, b)))'.$EOL.'if op == "-":'.$EOL.'    print("{} - {} = {}".format(a, b, subtract(a, b)))'.$EOL.'if op == "*":'.$EOL.'    print("{} * {} = {}".format(a, b, multiply(a, b)))'.$EOL.'if op == "/":'.$EOL.'    print("{} / {} = {}".format(a, b, divide(a, b)))'.$EOL.'','module_id' => $module8->id,'previous_lesson_id' => $lesson18->id,'user_id' => $user->id]);
        $lesson19= Lesson::create(['name' => 'If statements III','module_id' =>  $module8->id,'previous_lesson_id' => $lesson18->id,'user_id' => $user->id]);
        $exercise239 = Exercise::create(['prompt' => 'A single character is "a", "b", or "c", etc. In programming, we often abbreviate "character" and simply use "char". Change the conditional of the if statement so that True values are printed.','pre_code' => '','start_code' => 'def getChar(char):'.$EOL.'    if char == "b":'.$EOL.'        msg = "a!"'.$EOL.'    else:'.$EOL.'        msg = "Not a!"'.$EOL.'    return msg'.$EOL.'print(getChar("a") == "a!")'.$EOL.'print(getChar("b") == "Not a!")'.$EOL.'print(getChar("c") == "Not a!")'.$EOL.'','test_code' => 'test_equal(getChar("a"), "a!")'.$EOL.'test_equal(getChar("b"), "Not a!")'.$EOL.'test_equal(getChar("c"), "Not a!")'.$EOL.'','lesson_id' => $lesson19->id,'user_id' => $user->id]);
        $exercise240 = Exercise::create(['prompt' => 'Complete the getChar function so that True values are printed.','pre_code' => '','start_code' => 'def getChar(char):'.$EOL.'print(getChar("a") == "a!")'.$EOL.'print(getChar("b") == "Not a!")'.$EOL.'print(getChar("c") == "Not a!")'.$EOL.'','test_code' => 'test_equal(getChar("a"), "a!")'.$EOL.'test_equal(getChar("b"), "Not a!")'.$EOL.'test_equal(getChar("c"), "Not a!")'.$EOL.'','lesson_id' => $lesson19->id,'previous_exercise_id' => $exercise239->id,'user_id' => $user->id]);
        $exercise241 = Exercise::create(['prompt' => 'Write the getChar function so that True values are printed.','pre_code' => '','start_code' => 'print(getChar("a") == "a!")'.$EOL.'print(getChar("b") == "Not a!")'.$EOL.'print(getChar("c") == "Not a!")'.$EOL.'','test_code' => 'test_equal(getChar("a"), "a!")'.$EOL.'test_equal(getChar("b"), "Not a!")'.$EOL.'test_equal(getChar("c"), "Not a!")'.$EOL.'','lesson_id' => $lesson19->id,'previous_exercise_id' => $exercise240->id,'user_id' => $user->id]);
        $exercise242 = Exercise::create(['prompt' => 'Change the string in the conditional from "BSU" to "ISU".','pre_code' => '','start_code' => 'def loyalty(school):'.$EOL.'    if school == "BSU":'.$EOL.'        msg = "Win!"'.$EOL.'    else:'.$EOL.'        msg = "Lose!"'.$EOL.'    return msg'.$EOL.'print(loyalty("ISU") == "Win!")'.$EOL.'print(loyalty("BSU") == "Lose!")'.$EOL.'print(loyalty("UofI") == "Lose!")'.$EOL.'','test_code' => 'test_equal(loyalty("ISU"), "Win!")'.$EOL.'test_equal(loyalty("BSU"), "Lose!")'.$EOL.'test_equal(loyalty("UofI"), "Lose!")'.$EOL.'','lesson_id' => $lesson19->id,'previous_exercise_id' => $exercise241->id,'user_id' => $user->id]);
        $exercise243 = Exercise::create(['prompt' => 'Write a function called loyalty that returns "Win!" if the parameter is "ISU" and "Lose!" otherwise.','pre_code' => '','start_code' => 'print(loyalty("ISU") == "Win!")'.$EOL.'print(loyalty("BSU") == "Lose!")'.$EOL.'print(loyalty("UofI") == "Lose!")'.$EOL.'','test_code' => 'test_equal(loyalty("ISU"), "Win!")'.$EOL.'test_equal(loyalty("BSU"), "Lose!")'.$EOL.'test_equal(loyalty("UofI"), "Lose!")'.$EOL.'','lesson_id' => $lesson19->id,'previous_exercise_id' => $exercise242->id,'user_id' => $user->id]);
        $exercise244 = Exercise::create(['prompt' => 'The second if statement is a "nested" if statement since it is inside of another if statement. Modify the nested if statement so that we print "Lose!" only if team is "BSU".','pre_code' => '','start_code' => 'def loyalty(team):'.$EOL.'    if team == "ISU":'.$EOL.'        msg = "Win!"'.$EOL.'    else:'.$EOL.'        if team == "UofI":'.$EOL.'            msg = "Lose!"'.$EOL.'        else:'.$EOL.'            msg = "Don"t care"'.$EOL.'    return msg'.$EOL.'print(loyalty("ISU") == "Win!")'.$EOL.'print(loyalty("BSU") == "Lose!")'.$EOL.'print(loyalty("UofI") == "Don"t care")'.$EOL.'','test_code' => 'test_equal(loyalty("ISU"), "Win!")'.$EOL.'test_equal(loyalty("BSU"), "Lose!")'.$EOL.'test_equal(loyalty("UofI"), "Don"t care")'.$EOL.'','lesson_id' => $lesson19->id,'previous_exercise_id' => $exercise243->id,'user_id' => $user->id]);
        $exercise245 = Exercise::create(['prompt' => 'Complete the loyalty function so that it returns "Win!" if the team is ISU, "Lose!" if the team is BSU, and "Don"t care" if it is any other team. Your second if statement will be a nested if statement.','pre_code' => '','start_code' => 'def loyalty(team):'.$EOL.'print(loyalty("ISU") == "Win!")'.$EOL.'print(loyalty("BSU") == "Lose!")'.$EOL.'print(loyalty("UofI") == "Don"t care")'.$EOL.'','test_code' => 'test_equal(loyalty("ISU"), "Win!")'.$EOL.'test_equal(loyalty("BSU"), "Lose!")'.$EOL.'test_equal(loyalty("UofI"), "Don"t care")'.$EOL.'','lesson_id' => $lesson19->id,'previous_exercise_id' => $exercise244->id,'user_id' => $user->id]);
        $exercise246 = Exercise::create(['prompt' => 'Modify the nested if statement so that we print "Lose!" if team is "BSU" or "UofI". Hint: you will use the "or" operator.','pre_code' => '','start_code' => 'def loyalty(team):'.$EOL.'    if team == "ISU":'.$EOL.'        msg = "Win!"'.$EOL.'    else:'.$EOL.'        if team == "UofI":'.$EOL.'            msg = "Lose!"'.$EOL.'        else:'.$EOL.'            msg = "Don"t care"'.$EOL.'    return msg'.$EOL.'print(loyalty("ISU") == "Win!")'.$EOL.'print(loyalty("BSU") == "Lose!")'.$EOL.'print(loyalty("UofI") == "Lose!")'.$EOL.'print(loyalty("USU") == "Don"t care")'.$EOL.'','test_code' => 'test_equal(loyalty("ISU"), "Win!")'.$EOL.'test_equal(loyalty("BSU"), "Lose!")'.$EOL.'test_equal(loyalty("UofI"), "Lose!")'.$EOL.'test_equal(loyalty("USU"), "Don"t care")'.$EOL.'','lesson_id' => $lesson19->id,'previous_exercise_id' => $exercise245->id,'user_id' => $user->id]);
        $lesson20= Lesson::create(['name' => 'If/elif','module_id' =>  $module8->id,'previous_lesson_id' => $lesson19->id,'user_id' => $user->id]);
        $exercise247 = Exercise::create(['prompt' => 'Change the if conditional so that True values are printed.','pre_code' => '','start_code' => 'def getNum(a):'.$EOL.'    if a == 8:'.$EOL.'        msg = "Is three"'.$EOL.'    elif a == 4:'.$EOL.'        msg = "Is four"'.$EOL.'    else:'.$EOL.'        msg = "Is something else"'.$EOL.'    return msg'.$EOL.'print(getNum(3) == "Is three")'.$EOL.'print(getNum(4) == "Is four")'.$EOL.'print(getNum(5) == "Is something else")'.$EOL.'','test_code' => 'test_equal(getNum(3), "Is three")'.$EOL.'test_equal(getNum(4), "Is four")'.$EOL.'test_equal(getNum(5), "Is something else")'.$EOL.'','lesson_id' => $lesson20->id,'user_id' => $user->id]);
        $exercise248 = Exercise::create(['prompt' => '"elif" is short for "else if" and gives us a lot of flexibility in our if statements. Add a new elif statement after the existing elif that returns "Is five" if a == 5.','pre_code' => '','start_code' => 'def getNum(a):'.$EOL.'    if a == 3:'.$EOL.'        msg = "Is three"'.$EOL.'    elif a == 4:'.$EOL.'        msg = "Is four"'.$EOL.'    else:'.$EOL.'        msg = "Is something else"'.$EOL.'    return msg'.$EOL.'print(getNum(3) == "Is three")'.$EOL.'print(getNum(4) == "Is four")'.$EOL.'print(getNum(5) == "Is five")'.$EOL.'print(getNum(6) == "Is something else")'.$EOL.'','test_code' => 'test_equal(getNum(3), "Is three")'.$EOL.'test_equal(getNum(4), "Is four")'.$EOL.'test_equal(getNum(5), "Is five")'.$EOL.'test_equal(getNum(6), "Is something else")'.$EOL.'','lesson_id' => $lesson20->id,'previous_exercise_id' => $exercise247->id,'user_id' => $user->id]);
        $exercise249 = Exercise::create(['prompt' => 'Add a new elif statement after all existing elifs that prints "Is over four" if a > 4.','pre_code' => '','start_code' => 'def getNum(a):'.$EOL.'    if a == 3:'.$EOL.'        msg = "Is three"'.$EOL.'    elif a == 4:'.$EOL.'        msg = "Is four"'.$EOL.'    else:'.$EOL.'        msg = "Is something else"'.$EOL.'    return msg'.$EOL.'print(getNum(2) == "Is something else")'.$EOL.'print(getNum(3) == "Is three")'.$EOL.'print(getNum(4) == "Is four")'.$EOL.'print(getNum(5) == "Is over four")'.$EOL.'print(getNum(6) == "Is over four")'.$EOL.'','test_code' => 'test_equal(getNum(2), "Is something else")'.$EOL.'test_equal(getNum(3), "Is three")'.$EOL.'test_equal(getNum(4), "Is four")'.$EOL.'test_equal(getNum(5), "Is over four")'.$EOL.'test_equal(getNum(6), "Is over four")'.$EOL.'','lesson_id' => $lesson20->id,'previous_exercise_id' => $exercise248->id,'user_id' => $user->id]);
        $exercise250 = Exercise::create(['prompt' => 'Complete the isBinary function. Write if/elif/else statements that return "zero" if a == 0, "one" if a == 1, and "not binary" if a is something else.','pre_code' => '','start_code' => 'def isBinary(a):'.$EOL.'print(isBinary(-1) == "not binary")'.$EOL.'print(isBinary(0) == "zero")'.$EOL.'print(isBinary(1) == "one")'.$EOL.'print(isBinary(2) == "not binary")'.$EOL.'','test_code' => 'test_equal(isBinary(-1), "not binary")'.$EOL.'test_equal(isBinary(0), "zero")'.$EOL.'test_equal(isBinary(1), "one")'.$EOL.'test_equal(isBinary(2), "not binary")'.$EOL.'','lesson_id' => $lesson20->id,'previous_exercise_id' => $exercise249->id,'user_id' => $user->id]);
        $exercise251 = Exercise::create(['prompt' => 'Write if/elif/else statements that print "unlucky" if a is 3, 6 or 13, "lucky" if a is 7 or 49, and "boring" if a is something else. You will have a few "or" statements and a single "elif".','pre_code' => '','start_code' => 'def getMsg(a):'.$EOL.'print(getMsg(3) == "unlucky")'.$EOL.'print(getMsg(6) == "unlucky")'.$EOL.'print(getMsg(13) == "unlucky")'.$EOL.'print(getMsg(7) == "lucky")'.$EOL.'print(getMsg(49) == "lucky")'.$EOL.'print(getMsg(1) == "boring")'.$EOL.'print(getMsg(50) == "boring")'.$EOL.'','test_code' => 'test_equal(getMsg(3), "unlucky")'.$EOL.'test_equal(getMsg(6), "unlucky")'.$EOL.'test_equal(getMsg(13), "unlucky")'.$EOL.'test_equal(getMsg(7), "lucky")'.$EOL.'test_equal(getMsg(49), "lucky")'.$EOL.'test_equal(getMsg(1), "boring")'.$EOL.'test_equal(getMsg(50), "boring")'.$EOL.'','lesson_id' => $lesson20->id,'previous_exercise_id' => $exercise250->id,'user_id' => $user->id]);
        $exercise252 = Exercise::create(['prompt' => 'Write if/elif/else statements that print "prime" if a is 7, 11, or 13, "highly composite" if a is 6, 12, or 24, and "composite" if a is something else. You will have a few or statements and a single elif.','pre_code' => '','start_code' => 'def getMsg(a):'.$EOL.'print(getMsg(7) == "prime")'.$EOL.'print(getMsg(11) == "prime")'.$EOL.'print(getMsg(13) == "prime")'.$EOL.'print(getMsg(6) == "highly composite")'.$EOL.'print(getMsg(12) == "highly composite")'.$EOL.'print(getMsg(24) == "highly composite")'.$EOL.'print(getMsg(4) == "composite")'.$EOL.'print(getMsg(9) == "composite")'.$EOL.'','test_code' => 'test_equal(getMsg(7), "prime")'.$EOL.'test_equal(getMsg(11), "prime")'.$EOL.'test_equal(getMsg(13), "prime")'.$EOL.'test_equal(getMsg(6), "highly composite")'.$EOL.'test_equal(getMsg(12), "highly composite")'.$EOL.'test_equal(getMsg(24), "highly composite")'.$EOL.'test_equal(getMsg(4), "composite")'.$EOL.'test_equal(getMsg(9), "composite")'.$EOL.'','lesson_id' => $lesson20->id,'previous_exercise_id' => $exercise251->id,'user_id' => $user->id]);
        $exercise253 = Exercise::create(['prompt' => 'Write the loyalty function so that it returns "Win!" if team is "ISU", "Lose!" if team is "BSU" or "UofI" and "Don"t care" if team is something else. You"ll use an "or" operator and if/elif/else.','pre_code' => '','start_code' => 'def loyalty(team):'.$EOL.'print(loyalty("ISU") == "Win!")'.$EOL.'print(loyalty("BSU") == "Lose!")'.$EOL.'print(loyalty("UofI") == "Lose!")'.$EOL.'print(loyalty("USU") == "Don"t care")'.$EOL.'','test_code' => 'test_equal(loyalty("ISU"), "Win!")'.$EOL.'test_equal(loyalty("BSU"), "Lose!")'.$EOL.'test_equal(loyalty("UofI"), "Lose!")'.$EOL.'test_equal(loyalty("USU"), "Don"t care")'.$EOL.'','lesson_id' => $lesson20->id,'previous_exercise_id' => $exercise252->id,'user_id' => $user->id]);
        $exercise254 = Exercise::create(['prompt' => 'm represents the month number. Print "Jan" if m is one, "Feb" if m is two, "March" if m is three and "Other" if m is something else.','pre_code' => '','start_code' => 'def month(m):'.$EOL.'print(month(1) == "Jan")'.$EOL.'print(month(2) == "Feb")'.$EOL.'print(month(3) == "March")'.$EOL.'print(month(4) == "Other")'.$EOL.'print(month(-4) == "Other")'.$EOL.'','test_code' => 'test_equal(month(1), "Jan")'.$EOL.'test_equal(month(2), "Feb")'.$EOL.'test_equal(month(3), "March")'.$EOL.'test_equal(month(4), "Other")'.$EOL.'test_equal(month(-4), "Other")'.$EOL.'','lesson_id' => $lesson20->id,'previous_exercise_id' => $exercise253->id,'user_id' => $user->id]);
        $exercise255 = Exercise::create(['prompt' => 'Return "Prisoner" if number is three, "Goblet" if number is four, "Deathly" if number is seven or eight and "Other" if number is something else.','pre_code' => '','start_code' => 'def movie(number):'.$EOL.'print(movie(1) == "Other")'.$EOL.'print(movie(2) == "Other")'.$EOL.'print(movie(3) == "Prisoner")'.$EOL.'print(movie(4) == "Goblet")'.$EOL.'print(movie(5) == "Other")'.$EOL.'print(movie(6) == "Other")'.$EOL.'print(movie(7) == "Deathly")'.$EOL.'print(movie(8) == "Deathly")'.$EOL.'','test_code' => 'test_equal(movie(1), "Other")'.$EOL.'test_equal(movie(2), "Other")'.$EOL.'test_equal(movie(3), "Prisoner")'.$EOL.'test_equal(movie(4), "Goblet")'.$EOL.'test_equal(movie(5), "Other")'.$EOL.'test_equal(movie(6), "Other")'.$EOL.'test_equal(movie(7), "Deathly")'.$EOL.'test_equal(movie(8), "Deathly")'.$EOL.'','lesson_id' => $lesson20->id,'previous_exercise_id' => $exercise254->id,'user_id' => $user->id]);
        $exercise256 = Exercise::create(['prompt' => 'Complete the function so that "Big!" is returned if the number is greater than 10, "Small!" if the number is less than 1, and "Medium!" otherwise.','pre_code' => '','start_code' => 'def isBig(number):'.$EOL.'print(isBig(13) == "Big!")'.$EOL.'print(isBig(11) == "Big!")'.$EOL.'print(isBig(10) == "Medium!")'.$EOL.'print(isBig(8) == "Medium!")'.$EOL.'print(isBig(3) == "Medium!")'.$EOL.'print(isBig(1) == "Medium!")'.$EOL.'print(isBig(0) == "Small!")'.$EOL.'print(isBig(-3) == "Small!")'.$EOL.'','test_code' => 'test_equal(isBig(13), "Big!")'.$EOL.'test_equal(isBig(11), "Big!")'.$EOL.'test_equal(isBig(10), "Medium!")'.$EOL.'test_equal(isBig(8), "Medium!")'.$EOL.'test_equal(isBig(3), "Medium!")'.$EOL.'test_equal(isBig(1), "Medium!")'.$EOL.'test_equal(isBig(0), "Small!")'.$EOL.'test_equal(isBig(-3), "Small!")'.$EOL.'','lesson_id' => $lesson20->id,'previous_exercise_id' => $exercise255->id,'user_id' => $user->id]);
        $module9= Module::create(['name' => 'Random','concept_id' => $concept7->id,'open_date' => '2018-06-27 0:00:00','previous_module_id' => $module8->id,'user_id' => $user->id]);
        $lesson21= Lesson::create(['name' => 'random','module_id' =>  $module9->id,'user_id' => $user->id]);
        $exercise257 = Exercise::create(['prompt' => 'random.randint(1, 5) returns a random number between 1 and 5, inclusive. Modify the code so it returns a random number between 1 and 3.','pre_code' => '','start_code' => 'import random'.$EOL.'def getRand():'.$EOL.'    return random.randint(1, 5)'.$EOL.'print(getRand())'.$EOL.'','test_code' => 'random.seed(0)'.$EOL.'test_equal(getRand(), 2)'.$EOL.'','lesson_id' => $lesson21->id,'user_id' => $user->id]);
        $exercise258 = Exercise::create(['prompt' => 'Implement getRand() so that it returns a random number between 1 and 10.','pre_code' => '','start_code' => 'import random'.$EOL.'def getRand():'.$EOL.'print(getRand())'.$EOL.'','test_code' => 'random.seed(0)'.$EOL.'test_equal(getRand(), 6)'.$EOL.'','lesson_id' => $lesson21->id,'previous_exercise_id' => $exercise257->id,'user_id' => $user->id]);
        $project10 = Project::create(['name' => ' Draw shape on click','open_date' => '2018-07-01 0:00:00','close_date' => '2018-07-03 0:00:00','prompt' => ''.$EOL.'<div>When the user clicks on the drawing canvas you will prompt the user for two things: which shape to draw and what color to draw it. You will then draw the shape in the location where the user clicked. See <a href="https://youtu.be/SNf1vpAUH0U" target="shape">this video</a> for a demonstration. (Note: the second prompt in the video should read "What color?".)'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'t.tracer(0) # remember to call t.update after any kind of draw!'.$EOL.'t.hideturtle()'.$EOL.'def drawSquare():'.$EOL.'    for i in range(4):'.$EOL.'        t.forward(100)'.$EOL.'        t.left(90)'.$EOL.'# TODO: Most or all of your code should go in this function.'.$EOL.'def drawShape(x, y):'.$EOL.'    t.up()'.$EOL.'    t.setpos(x, y)'.$EOL.'    t.down()'.$EOL.'    drawSquare()'.$EOL.'    # Be sure to call t.update() after any drawing code. We set'.$EOL.'    # t.tracer to 0, so we won"t see the turtle moving.'.$EOL.'    t.update()'.$EOL.'screen.onclick(drawShape)'.$EOL.'','solution' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'t.tracer(0) # remember to call t.update after any kind of draw!'.$EOL.'t.hideturtle()'.$EOL.'def drawSquare():'.$EOL.'    for i in range(4):'.$EOL.'        t.forward(100)'.$EOL.'        t.left(90)'.$EOL.'def drawSpiral():'.$EOL.'    for i in range(40):'.$EOL.'        t.forward(100)'.$EOL.'        t.left(99)'.$EOL.'def drawCircle():'.$EOL.'    for i in range(360):'.$EOL.'        t.forward(1)'.$EOL.'        t.left(1)'.$EOL.'# Most or all of your code should go in this function.'.$EOL.'def drawShape(x, y):'.$EOL.'    s = int(input("What shape would you like to draw? (0=square, 1=spiral, 2=circle)"))'.$EOL.'    c = int(input("What color? (0=black, 1=red, 2=blue)"))'.$EOL.'    t.up()'.$EOL.'    t.setpos(x, y)'.$EOL.'    t.down()'.$EOL.'    if c == 0:'.$EOL.'        t.color("black")'.$EOL.'    elif c == 1:'.$EOL.'        t.color("red")'.$EOL.'    elif c == 2:'.$EOL.'        t.color("blue")'.$EOL.'    if s == 0:'.$EOL.'        drawSquare()'.$EOL.'    elif s == 1:'.$EOL.'        drawSpiral()'.$EOL.'    elif s == 2:'.$EOL.'        drawCircle()'.$EOL.'    t.update()'.$EOL.'screen.onclick(drawShape)'.$EOL.'','module_id' => $module9->id,'previous_lesson_id' => $lesson21->id,'user_id' => $user->id]);
        $concept8= Concept::create(['name' => 'More Iteration','course_id' => $course->id,'previous_concept_id' => $concept7->id,'user_id' => $user->id]);
        $module10= Module::create(['name' => 'For Loops Again','concept_id' => $concept8->id,'open_date' => '2018-07-03 0:00:00','user_id' => $user->id]);
        $lesson22= Lesson::create(['name' => 'For loops II','module_id' =>  $module10->id,'user_id' => $user->id]);
        $exercise259 = Exercise::create(['prompt' => 'Change the code so that True values are printed. Hint: change the second argument to the range call to n+1.','pre_code' => '','start_code' => '# Returns the number of integers between 1 and n, inclusive.'.$EOL.'def getCount(n):'.$EOL.'    count = 0'.$EOL.'    for i in range(1, n):'.$EOL.'        count = count + 1'.$EOL.'    return count'.$EOL.'print(getCount(3) == 3)'.$EOL.'print(getCount(6) == 6)'.$EOL.'','test_code' => 'test_equal(getCount(3), 3)'.$EOL.'test_equal(getCount(5), 5)'.$EOL.'','lesson_id' => $lesson22->id,'user_id' => $user->id]);
        $exercise260 = Exercise::create(['prompt' => 'Complete the function getCount(n). Be sure to use a for loop.','pre_code' => '','start_code' => '# Returns the number of integers between 1 and n, inclusive.'.$EOL.'def getCount(n):'.$EOL.'print(getCount(3) == 3)'.$EOL.'print(getCount(6) == 6)'.$EOL.'','test_code' => 'test_equal(getCount(3), 3)'.$EOL.'test_equal(getCount(5), 5)'.$EOL.'test_in("range")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise259->id,'user_id' => $user->id]);
        $exercise261 = Exercise::create(['prompt' => 'Complete the function getDoubleCount(n). Hint: you can either add 2 to count each iteration or multiply the final count by 2.','pre_code' => '','start_code' => '# Returns double the number of integers between 1 and n, inclusive.'.$EOL.'def getDoubleCount(n):'.$EOL.'print(getDoubleCount(3) == 6)'.$EOL.'print(getDoubleCount(4) == 8)'.$EOL.'print(getDoubleCount(6) == 12)'.$EOL.'','test_code' => 'test_equal(getDoubleCount(3), 6)'.$EOL.'test_equal(getDoubleCount(5), 10)'.$EOL.'test_in("range")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise260->id,'user_id' => $user->id]);
        $exercise262 = Exercise::create(['prompt' => 'Complete the function numbers2String(n). Hint: add a return statement at the end.','pre_code' => '','start_code' => '# Returns a string with numbers 1 to n, inclusive. Note that there'.$EOL.'# is a single space character at the end of the returned string.'.$EOL.'def numbers2String(n):'.$EOL.'    string = ""'.$EOL.'    for i in range(1, n+1):'.$EOL.'        string = string + str(i) + " "'.$EOL.'print(numbers2String(3) == "1 2 3 ")'.$EOL.'print(numbers2String(6) == "1 2 3 4 5 6 ")'.$EOL.'','test_code' => 'test_equal(numbers2String(3), "1 2 3 ")'.$EOL.'test_equal(numbers2String(5), "1 2 3 4 5 ")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise261->id,'user_id' => $user->id]);
        $exercise263 = Exercise::create(['prompt' => 'Write the function numbers2String(n). Hint: add a return statement at the end.','pre_code' => '','start_code' => '# Returns a string with numbers 1 to n, inclusive. Note that there'.$EOL.'# is a single space character at the end of the returned string.'.$EOL.'print(numbers2String(3) == "1 2 3 ")'.$EOL.'print(numbers2String(6) == "1 2 3 4 5 6 ")'.$EOL.'','test_code' => 'test_equal(numbers2String(3), "1 2 3 ")'.$EOL.'test_equal(numbers2String(5), "1 2 3 4 5 ")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise262->id,'user_id' => $user->id]);
        $exercise264 = Exercise::create(['prompt' => 'Write the function numbers2StringDouble(n). Your function will look exactly like numbers2String(n) written in the previous exercise except that you will append the number to the string twice in the loop body. Hint: Write it like the previous exercise, but copy the line that adds the number to the string, so that line appears twice. Be sure to not change the indentation.','pre_code' => '','start_code' => '# Returns a string with numbers 1 to n, inclusive, with each number'.$EOL.'# appearing twice. Note that there is a single space character at the'.$EOL.'# end of the returned string.'.$EOL.'print(numbers2StringDouble(3) == "1 1 2 2 3 3 ")'.$EOL.'print(numbers2StringDouble(6) == "1 1 2 2 3 3 4 4 5 5 6 6 ")'.$EOL.'','test_code' => 'test_equal(numbers2StringDouble(3), "1 1 2 2 3 3 ")'.$EOL.'test_equal(numbers2StringDouble(5), "1 1 2 2 3 3 4 4 5 5 ")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise263->id,'user_id' => $user->id]);
        $exercise265 = Exercise::create(['prompt' => 'Complete the function numbers2String(n). Note: we"re now getting numbers 0 through n-1.','pre_code' => '','start_code' => '# Returns a string with numbers 0 to n-1, inclusive. Note that there'.$EOL.'# is a single space character at the end of the returned string.'.$EOL.'print(numbers2String(3) == "0 1 2 ")'.$EOL.'print(numbers2String(6) == "0 1 2 3 4 5 ")'.$EOL.'','test_code' => 'test_equal(numbers2String(3), "0 1 2 ")'.$EOL.'test_equal(numbers2String(5), "0 1 2 3 4 ")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise264->id,'user_id' => $user->id]);
        $exercise266 = Exercise::create(['prompt' => 'Complete the function numbers2String(n). Note: we"re now getting numbers 0 through n.','pre_code' => '','start_code' => '# Returns a string with numbers 0 to n, inclusive. Note that there'.$EOL.'# is a single space character at the end of the returned string.'.$EOL.'print(numbers2String(3) == "0 1 2 3 ")'.$EOL.'print(numbers2String(6) == "0 1 2 3 4 5 6 ")'.$EOL.'','test_code' => 'test_equal(numbers2String(3), "0 1 2 3 ")'.$EOL.'test_equal(numbers2String(5), "0 1 2 3 4 5 ")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise265->id,'user_id' => $user->id]);
        $exercise267 = Exercise::create(['prompt' => 'Complete the function evenNumbers2String(n). Hint: add 2 as a third argument to range().','pre_code' => '','start_code' => '# Returns a string with even numbers 0 to n, inclusive. Note that there'.$EOL.'# is a single space character at the end of the returned string.'.$EOL.'def evenNumbers2String(n):'.$EOL.'    string = ""'.$EOL.'    for i in range(0, n+1):'.$EOL.'        string = string + str(i) + " "'.$EOL.'    return string'.$EOL.'print(evenNumbers2String(3) == "0 2 ")'.$EOL.'print(evenNumbers2String(6) == "0 2 4 6 ")'.$EOL.'','test_code' => 'test_equal(evenNumbers2String(3), "0 2 ")'.$EOL.'test_equal(evenNumbers2String(5), "0 2 4 ")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise266->id,'user_id' => $user->id]);
        $exercise268 = Exercise::create(['prompt' => 'Complete the function evenNumbers2String(n).','pre_code' => '','start_code' => '# Returns a string with even numbers 0 to n, inclusive. Note that there'.$EOL.'# is a single space character at the end of the returned string.'.$EOL.'def evenNumbers2String(n):'.$EOL.'    string = ""'.$EOL.'    # add code here'.$EOL.'    return string'.$EOL.'print(evenNumbers2String(3) == "0 2 ")'.$EOL.'print(evenNumbers2String(6) == "0 2 4 6 ")'.$EOL.'','test_code' => 'test_equal(evenNumbers2String(3), "0 2 ")'.$EOL.'test_equal(evenNumbers2String(5), "0 2 4 ")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise267->id,'user_id' => $user->id]);
        $exercise269 = Exercise::create(['prompt' => 'Everything that is indented after the for loop line is done in each iteration of the loop. As soon as a line that is not indented appears then the "body" of the for loop is done. Run the code and see that "Done!" is added at each iteration. Fix the code so that "Done!" is added only to the end of the string. Hint: change the indentation of the line that adds "Done!".','pre_code' => '','start_code' => '# Returns a string with numbers 1 to n, inclusive. Note that there'.$EOL.'# is a single space character at the end of the returned string.'.$EOL.'def numbers2String(n):'.$EOL.'    string = ""'.$EOL.'    for i in range(1, n+1):'.$EOL.'        string = string + str(i) + " "'.$EOL.'        string = string + "Done!"'.$EOL.'    return string'.$EOL.'print(numbers2String(3))'.$EOL.'print(numbers2String(3) == "1 2 3 Done!")'.$EOL.'print(numbers2String(6) == "1 2 3 4 5 6 Done!")'.$EOL.'','test_code' => 'test_equal(numbers2String(3), "1 2 3 Done!")'.$EOL.'test_equal(numbers2String(5), "1 2 3 4 5 Done!")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise268->id,'user_id' => $user->id]);
        $exercise270 = Exercise::create(['prompt' => 'Fix the indentation so that each number is added to the string twice.','pre_code' => '','start_code' => '# Returns a string with numbers 1 to n, inclusive, with each number'.$EOL.'# appearing twice. Note that there is a single space character at the'.$EOL.'# end of the returned string.'.$EOL.'def numbers2StringDouble(n):'.$EOL.'    string = ""'.$EOL.'    for i in range(1, n+1):'.$EOL.'        string = string + str(i) + " "'.$EOL.'    string = string + str(i) + " "'.$EOL.'    return string'.$EOL.'print(numbers2StringDouble(3) == "1 1 2 2 3 3 ")'.$EOL.'print(numbers2StringDouble(6) == "1 1 2 2 3 3 4 4 5 5 6 6 ")'.$EOL.'','test_code' => 'test_equal(numbers2StringDouble(3), "1 1 2 2 3 3 ")'.$EOL.'test_equal(numbers2StringDouble(5), "1 1 2 2 3 3 4 4 5 5 ")'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise269->id,'user_id' => $user->id]);
        $exercise271 = Exercise::create(['prompt' => 'getSum(n) returns the sum of numbers from 0 to n, inclusive. Add a return statement.','pre_code' => '','start_code' => 'def getSum(n):'.$EOL.'    sum = 0'.$EOL.'    for i in range(0, n+1):'.$EOL.'        sum = sum + i'.$EOL.'print(getSum(3) == 6)'.$EOL.'print(getSum(4) == 10)'.$EOL.'','test_code' => 'test_equal(getSum(3), 6)'.$EOL.'test_equal(getSum(5), 15)'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise270->id,'user_id' => $user->id]);
        $exercise272 = Exercise::create(['prompt' => 'Write a function called getSum(n) that returns the sum of numbers from 0 to n, inclusive.','pre_code' => '','start_code' => 'print(getSum(3) == 6)'.$EOL.'print(getSum(4) == 10)'.$EOL.'','test_code' => 'test_equal(getSum(3), 6)'.$EOL.'test_equal(getSum(5), 15)'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise271->id,'user_id' => $user->id]);
        $exercise273 = Exercise::create(['prompt' => 'Complete the function called getSumEvens(n) that returns the sum of even numbers from 0 to n, inclusive. Hint: add a return statement.','pre_code' => '','start_code' => 'def getSumEvens(n):'.$EOL.'    sum = 0'.$EOL.'    for i in range(0, n+1, 2):'.$EOL.'        sum = sum + i'.$EOL.'print(getSumEvens(3) == 2)'.$EOL.'print(getSumEvens(4) == 6)'.$EOL.'print(getSumEvens(7) == 12)'.$EOL.'','test_code' => 'test_equal(getSumEvens(3), 2)'.$EOL.'test_equal(getSumEvens(4), 6)'.$EOL.'test_equal(getSumEvens(7), 12)'.$EOL.'','lesson_id' => $lesson22->id,'previous_exercise_id' => $exercise272->id,'user_id' => $user->id]);
        $project11 = Project::create(['name' => ' Stats','open_date' => '2018-07-07 0:00:00','close_date' => '2018-07-09 0:00:00','prompt' => ''.$EOL.'<div>Prompt the user for three numbers (using three calls to input()). Then output the sum, average, product and max of the three numbers. The average will be computed as sum/3. Write four functions: getSum, getAverage, getProduct and getMax.'.$EOL.'<p>Sample output:'.$EOL.'<br><code>Enter a number: 3</code>'.$EOL.'<br><code>Enter a number: 8</code>'.$EOL.'<br><code>Enter a number: 5</code>'.$EOL.'<br><code>The sum is 16</code>'.$EOL.'<br><code>The product is 120</code>'.$EOL.'<br><code>The average is 5.33333333333</code>'.$EOL.'<br><code>The max is 8</code>'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => 'def getSum(a, b, c):'.$EOL.'    return a+b+c'.$EOL.'def getProduct(a, b, c):'.$EOL.'    return a*b*c'.$EOL.'def getAverage(a, b, c):'.$EOL.'    return getSum(a, b, c)/3.0'.$EOL.'def getMax(a, b, c):'.$EOL.'    if a > b:'.$EOL.'        if a > c:'.$EOL.'            return a'.$EOL.'        return c'.$EOL.'    if b > c:'.$EOL.'        return b'.$EOL.'    return c'.$EOL.'a = int(input("a"))'.$EOL.'b = int(input("b"))'.$EOL.'c = int(input("c"))'.$EOL.'print("The sum is {}\nThe product is {}\nThe average is {}\nThe max is {}".format(getSum(a,b,c), getProduct(a,b,c), getAverage(a,b,c), getMax(a,b,c)))'.$EOL.'','module_id' => $module10->id,'previous_lesson_id' => $lesson22->id,'user_id' => $user->id]);
        $module11= Module::create(['name' => 'While Loops','concept_id' => $concept8->id,'open_date' => '2018-07-04 0:00:00','previous_module_id' => $module10->id,'user_id' => $user->id]);
        $lesson23= Lesson::create(['name' => 'While loops','module_id' =>  $module11->id,'user_id' => $user->id]);
        $exercise274 = Exercise::create(['prompt' => 'A while loop is like a for loop combined with an if statement. It loops until the conditional evaluates to false. Change the conditional in the while loop so that 0 through 3, inclusive, are printed.','pre_code' => '','start_code' => 'def getString():'.$EOL.'    string = ""'.$EOL.'    count = 0'.$EOL.'    while count < 3:'.$EOL.'        string = string + str(count) + " "'.$EOL.'        count = count + 1'.$EOL.'    return string'.$EOL.'print(getString() == "0 1 2 3 ")'.$EOL.'','test_code' => 'test_equal(getString(), "0 1 2 3 ")'.$EOL.'','lesson_id' => $lesson23->id,'user_id' => $user->id]);
        $exercise275 = Exercise::create(['prompt' => 'Change the conditional in the while loop so that 0 through 3, inclusive, are printed.','pre_code' => '','start_code' => 'def getString():'.$EOL.'    string = ""'.$EOL.'    count = 0'.$EOL.'    while count < 2:'.$EOL.'        string = string + str(count) + " "'.$EOL.'        count = count + 1'.$EOL.'    return string'.$EOL.'print(getString() == "0 1 2 3 ")'.$EOL.'','test_code' => 'test_equal(getString(), "0 1 2 3 ")'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise274->id,'user_id' => $user->id]);
        $exercise276 = Exercise::create(['prompt' => 'Change the conditional in the while loop so that 8 is printed.','pre_code' => '','start_code' => 'def getString():'.$EOL.'    string = ""'.$EOL.'    count = 4'.$EOL.'    while count < 8:'.$EOL.'        string = string + str(count) + " "'.$EOL.'        count = count + 1'.$EOL.'    return string'.$EOL.'print(getString() == "4 5 6 7 8 ")'.$EOL.'','test_code' => 'test_equal(getString(), "4 5 6 7 8 ")'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise275->id,'user_id' => $user->id]);
        $exercise277 = Exercise::create(['prompt' => 'Change the increment of count so that only even numbers are printed. Hint: add 2 to count instead of adding 1 inside the while loop.','pre_code' => '','start_code' => 'def getString():'.$EOL.'    string = ""'.$EOL.'    count = 4'.$EOL.'    while count < 9:'.$EOL.'        string = string + str(count) + " "'.$EOL.'        count = count + 1'.$EOL.'    return string'.$EOL.'print(getString() == "4 6 8 ")'.$EOL.'','test_code' => 'test_equal(getString(), "4 6 8 ")'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise276->id,'user_id' => $user->id]);
        $exercise278 = Exercise::create(['prompt' => 'Change the first assignment of a value to count so that 2 through 8 are printed. Hint: change the 4 to a 2.','pre_code' => '','start_code' => 'def getString():'.$EOL.'    string = ""'.$EOL.'    count = 4'.$EOL.'    while count < 9:'.$EOL.'        string = string + str(count) + " "'.$EOL.'        count = count + 1'.$EOL.'    return string'.$EOL.'print(getString() == "2 3 4 5 6 7 8 ")'.$EOL.'','test_code' => 'test_equal(getString(), "2 3 4 5 6 7 8 ")'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise277->id,'user_id' => $user->id]);
        $exercise279 = Exercise::create(['prompt' => 'Write a while loop in getString() that concatenates numbers from 0 to 4 and returns it.','pre_code' => '','start_code' => 'def getString():'.$EOL.'print(getString() == "0 1 2 3 4 ")'.$EOL.'','test_code' => 'test_equal(getString(), "0 1 2 3 4 ")'.$EOL.'test_in("while")'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise278->id,'user_id' => $user->id]);
        $exercise280 = Exercise::create(['prompt' => 'Fix the bug so that the numbers from 4 to n, inclusive, are printed. Hint: initialize count to 4 instead of initializing it to 0.','pre_code' => '','start_code' => 'def getString(n):'.$EOL.'    string = ""'.$EOL.'    count = 0'.$EOL.'    while count <= n:'.$EOL.'        string = string + str(count) + " "'.$EOL.'        count = count + 1'.$EOL.'    return string'.$EOL.'print(getString(7) == "4 5 6 7 ")'.$EOL.'print(getString(10) == "4 5 6 7 8 9 10 ")'.$EOL.'','test_code' => 'test_equal(getString(7), "4 5 6 7 ")'.$EOL.'test_equal(getString(10), "4 5 6 7 8 9 10 ")'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise279->id,'user_id' => $user->id]);
        $exercise281 = Exercise::create(['prompt' => 'Complete getString(n) so that numbers from 4 to n, inclusive, are printed.','pre_code' => '','start_code' => 'def getString(n):'.$EOL.'print(getString(7) == "4 5 6 7 ")'.$EOL.'print(getString(10) == "4 5 6 7 8 9 10 ")'.$EOL.'','test_code' => 'test_equal(getString(7), "4 5 6 7 ")'.$EOL.'test_equal(getString(10), "4 5 6 7 8 9 10 ")'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise280->id,'user_id' => $user->id]);
        $exercise282 = Exercise::create(['prompt' => 'Complete getString(n) so that every third number from 4 to n, inclusive, are printed. Hint: when you increment count, increment it by 3 instead of 1.','pre_code' => '','start_code' => 'def getString(n):'.$EOL.'print(getString(7) == "4 7 ")'.$EOL.'print(getString(10) == "4 7 10 ")'.$EOL.'print(getString(18) == "4 7 10 13 16 ")'.$EOL.'','test_code' => 'test_equal(getString(7), "4 7 ")'.$EOL.'test_equal(getString(10), "4 7 10 ")'.$EOL.'test_equal(getString(18), "4 7 10 13 16 ")'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise281->id,'user_id' => $user->id]);
        $exercise283 = Exercise::create(['prompt' => 'The given code simulates playing a slot machine. We want to allow the user to pull the level every time they answer "y" to the question. Fix the bug in the code. Hint: Look at the conditional in the while loop -- it actually loops if the user enters "n". Change it to "y".','pre_code' => '','start_code' => '# Simulates playing a slot machine'.$EOL.'def slot():'.$EOL.'    playAgain = input("Play? [y/n]")'.$EOL.'    # play the slot machine again as long'.$EOL.'    # as the user says y'.$EOL.'    while playAgain == "n":'.$EOL.'        print("Pull the lever.")'.$EOL.'        playAgain = input("Play again? [y/n]")'.$EOL.'    print("Have a nice day.")'.$EOL.'slot()'.$EOL.'','test_code' => 'count = 0'.$EOL.'def input(s):'.$EOL.'    global count'.$EOL.'    count += 1'.$EOL.'    return "y" if count < 5 else "n"'.$EOL.'slot()'.$EOL.'test_equal(count, 5)'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise282->id,'user_id' => $user->id]);
        $exercise284 = Exercise::create(['prompt' => 'Do not run this code until you make changes! If you run the code it will cause an infinite loop and you will have to refresh your web page. Add a line after the "Pull the lever" print statement that resets the playAgain variable. That is, add a line inside the while loop that asks the user if they would like to play again.','pre_code' => '','start_code' => '# Simulates playing a slot machine'.$EOL.'def slot():'.$EOL.'    playAgain = input("Play? [y/n]")'.$EOL.'    # play the slot machine again as long'.$EOL.'    # as the user says y'.$EOL.'    while playAgain == "y":'.$EOL.'        print("Pull the lever.")'.$EOL.'    print("Have a nice day.")'.$EOL.'slot()'.$EOL.'','test_code' => 'count = 0'.$EOL.'def input(s):'.$EOL.'    global count'.$EOL.'    count += 1'.$EOL.'    return "y" if count < 5 else "n"'.$EOL.'slot()'.$EOL.'test_equal(count, 5)'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise283->id,'user_id' => $user->id]);
        $exercise285 = Exercise::create(['prompt' => 'Complete the slot() function, which should ask the user if they would like to play. If the user answers "y", print an instruction to pull the lever. Then ask the user if they would like to play again.','pre_code' => '','start_code' => '# Simulates playing a slot machine'.$EOL.'def slot():'.$EOL.'slot()'.$EOL.'','test_code' => 'count = 0'.$EOL.'def input(s):'.$EOL.'    global count'.$EOL.'    count += 1'.$EOL.'    return "y" if count < 5 else "n"'.$EOL.'slot()'.$EOL.'test_equal(count, 5)'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise284->id,'user_id' => $user->id]);
        $exercise286 = Exercise::create(['prompt' => 'Complete the drawShapes() function by making a call to drawSquare() inside the while loop.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.speed(8)'.$EOL.'def drawSquare():'.$EOL.'    for i in range(4):'.$EOL.'        t.forward(100)'.$EOL.'        t.left(90)'.$EOL.'def drawShapes():'.$EOL.'    doDraw = input("Draw a shape? [y/n]")'.$EOL.'    while doDraw == "y":'.$EOL.'        doDraw = input("Draw a shape? [y/n]")'.$EOL.'drawShapes()'.$EOL.'','test_code' => 'count = 0'.$EOL.'sc = 0'.$EOL.'def drawSquare():'.$EOL.'    global sc'.$EOL.'    sc += 1'.$EOL.'def input(s):'.$EOL.'    global count'.$EOL.'    count += 1'.$EOL.'    return "y" if count < 5 else "n"'.$EOL.'drawShapes()'.$EOL.'test_equal(count, 5)'.$EOL.'test_equal(sc, 4)'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise285->id,'user_id' => $user->id]);
        $exercise287 = Exercise::create(['prompt' => 'Fix the bug by adding a call to input() asking the user if they would like to draw another shape. Heads up: if you end up in an infinite loop, refresh the page.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.speed(8)'.$EOL.'def drawSquare():'.$EOL.'    for i in range(4):'.$EOL.'        t.forward(100)'.$EOL.'        t.left(90)'.$EOL.'def drawShapes():'.$EOL.'    doDraw = input("Draw a shape? [y/n]")'.$EOL.'    while doDraw == "y":'.$EOL.'        drawSquare()'.$EOL.'drawShapes()'.$EOL.'','test_code' => 'sc = 0'.$EOL.'def drawSquare():'.$EOL.'    global sc'.$EOL.'    sc += 1'.$EOL.'count = 0'.$EOL.'def input(s):'.$EOL.'    global count'.$EOL.'    count += 1'.$EOL.'    return "y" if count < 5 else "n"'.$EOL.'drawShapes()'.$EOL.'test_equal(count, 5)'.$EOL.'test_equal(sc, 4)'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise286->id,'user_id' => $user->id]);
        $exercise288 = Exercise::create(['prompt' => 'Complete the drawShapes() function. It should draw a square everytime the user responds "y".','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.speed(8)'.$EOL.'def drawSquare():'.$EOL.'    for i in range(4):'.$EOL.'        t.forward(100)'.$EOL.'        t.left(90)'.$EOL.'def drawShapes():'.$EOL.'drawShapes()'.$EOL.'','test_code' => 'sc = 0'.$EOL.'def drawSquare():'.$EOL.'    global sc'.$EOL.'    sc += 1'.$EOL.'count = 0'.$EOL.'def input(s):'.$EOL.'    global count'.$EOL.'    count += 1'.$EOL.'    return "y" if count < 5 else "n"'.$EOL.'drawShapes()'.$EOL.'test_equal(count, 5)'.$EOL.'test_equal(sc, 4)'.$EOL.'','lesson_id' => $lesson23->id,'previous_exercise_id' => $exercise287->id,'user_id' => $user->id]);
        $project12 = Project::create(['name' => ' Prompt for shapes','open_date' => '2018-07-08 0:00:00','close_date' => '2018-07-10 0:00:00','prompt' => ''.$EOL.'<div>Prompt the user using the input() function: "Draw another shape? [y]es [n]o". Repeat the prompt until they answer with either "y" or "n". If they reply [n], then end the program. If they reply [y] then prompt asking where to draw the shape. This will require two prompts, one for the x coordinate and one for the y coordinate. Then prompt asking what shape (e.g. spiral, box, circle, smiley face, etc) they want to draw. You can choose the shape options, but there must be at least three options and one of them must be a spiral.'.$EOL.'<br><br>You will loop, drawing shape after shape as requested by the user, until the user enters "n" when asked if we should draw another shape. You may add additional prompts (e.g. color, shape size, etc) for the wow factor if you wish.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => ''.$EOL.'','module_id' => $module11->id,'previous_lesson_id' => $lesson23->id,'user_id' => $user->id]);
        $lesson24= Lesson::create(['name' => 'While loops II','module_id' =>  $module11->id,'previous_lesson_id' => $lesson23->id,'user_id' => $user->id]);
        $exercise289 = Exercise::create(['prompt' => 'Complete the drawShapes() function. It should draw a square everytime the user responds "y".','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.speed(8)'.$EOL.'def drawSquare():'.$EOL.'    for i in range(4):'.$EOL.'        t.forward(100)'.$EOL.'        t.left(90)'.$EOL.'def drawShapes():'.$EOL.'drawShapes()'.$EOL.'','test_code' => 'sc = 0'.$EOL.'def drawSquare():'.$EOL.'    global sc'.$EOL.'    sc += 1'.$EOL.'count = 0'.$EOL.'def input(s):'.$EOL.'    global count'.$EOL.'    count += 1'.$EOL.'    return "y" if count < 5 else "n"'.$EOL.'drawShapes()'.$EOL.'test_equal(count, 5)'.$EOL.'test_equal(sc, 4)'.$EOL.'','lesson_id' => $lesson24->id,'user_id' => $user->id]);
        $exercise290 = Exercise::create(['prompt' => 'Complete the function oneIfGold.','pre_code' => '','start_code' => '# Returns 1 if medalType is "g". Returns 0 otherwise.'.$EOL.'def oneIfGold(medalType):'.$EOL.'print(oneIfGold("g") == 1)'.$EOL.'print(oneIfGold("s") == 0)'.$EOL.'print(oneIfGold("b") == 0)'.$EOL.'print(oneIfGold("gold") == 0)'.$EOL.'','test_code' => 'test_equal(oneIfGold("g"), 1)'.$EOL.'test_equal(oneIfGold("s"), 0)'.$EOL.'test_equal(oneIfGold("b"), 0)'.$EOL.'test_equal(oneIfGold("gold"), 0)'.$EOL.'test_equal(oneIfGold("silver"), 0)'.$EOL.'','lesson_id' => $lesson24->id,'previous_exercise_id' => $exercise289->id,'user_id' => $user->id]);
        $exercise291 = Exercise::create(['prompt' => 'Complete the function countGold. Hint: add an additional input at the end of the loop that prompts the user if they would like to enter another medal. Also, return the value.','pre_code' => '','start_code' => '# Returns 1 if medalType is "g". Returns 0 otherwise.'.$EOL.'def oneIfGold(medalType):'.$EOL.'    if medalType == "g":'.$EOL.'        return 1'.$EOL.'    else:'.$EOL.'        return 0'.$EOL.'# Prompts the user if they would like to enter a medal. If yes,'.$EOL.'# prompts for the medal type. Counts the number of gold medals'.$EOL.'# and returns it.'.$EOL.'def countGold():'.$EOL.'    goldCount = 0'.$EOL.'    more = input("Enter another medal? [y/n]")'.$EOL.'    while more == "y":'.$EOL.'        medalType = input("Gold, silver or bronze? [g/s/b]")'.$EOL.'        goldCount = goldCount + oneIfGold(medalType)'.$EOL.'print(countGold())'.$EOL.'','test_code' => 'abc = 0'.$EOL.'def input(s):'.$EOL.'    global abc'.$EOL.'    if abc % 2 == 0:'.$EOL.'        retVal = "y" if abc < 13 else "n"'.$EOL.'    else:'.$EOL.'        n = (abc/2)%3'.$EOL.'        retVal = "g" if n == 0 else ("s" if n == 1 else "b")'.$EOL.'    abc += 1'.$EOL.'    return retVal'.$EOL.'test_equal(countGold(), 3)'.$EOL.'','lesson_id' => $lesson24->id,'previous_exercise_id' => $exercise290->id,'user_id' => $user->id]);
        $exercise292 = Exercise::create(['prompt' => 'Complete the function countGold.','pre_code' => '','start_code' => '# Returns 1 if medalType is "g". Returns 0 otherwise.'.$EOL.'def oneIfGold(medalType):'.$EOL.'    if medalType == "g":'.$EOL.'        return 1'.$EOL.'    else:'.$EOL.'        return 0'.$EOL.'# Prompts the user if they would like to enter a medal. If yes,'.$EOL.'# prompts for the medal type. Counts the number of gold medals'.$EOL.'# and returns it.'.$EOL.'def countGold():'.$EOL.'print(countGold())'.$EOL.'','test_code' => 'abc = 0'.$EOL.'def input(s):'.$EOL.'    global abc'.$EOL.'    if abc % 2 == 0:'.$EOL.'        retVal = "y" if abc < 13 else "n"'.$EOL.'    else:'.$EOL.'        n = (abc/2)%3'.$EOL.'        retVal = "g" if n == 0 else ("s" if n == 1 else "b")'.$EOL.'    abc += 1'.$EOL.'    return retVal'.$EOL.'test_equal(countGold(), 3)'.$EOL.'','lesson_id' => $lesson24->id,'previous_exercise_id' => $exercise291->id,'user_id' => $user->id]);
        $exercise293 = Exercise::create(['prompt' => 'Complete the function countGold. You must also write a function oneIfGold and use it in countGold.','pre_code' => '','start_code' => '# Prompts the user if they would like to enter a medal. If yes,'.$EOL.'# prompts for the medal type. Counts the number of gold medals'.$EOL.'# and returns it.'.$EOL.'def countGold():'.$EOL.'print(countGold())'.$EOL.'','test_code' => 'abc = 0'.$EOL.'def input(s):'.$EOL.'    global abc'.$EOL.'    if abc % 2 == 0:'.$EOL.'        retVal = "y" if abc < 13 else "n"'.$EOL.'    else:'.$EOL.'        n = (abc/2)%3'.$EOL.'        retVal = "g" if n == 0 else ("s" if n == 1 else "b")'.$EOL.'    abc += 1'.$EOL.'    return retVal'.$EOL.'test_equal(countGold(), 3)'.$EOL.'test_equal(oneIfGold("g"), 1)'.$EOL.'test_equal(oneIfGold("s"), 0)'.$EOL.'test_equal(oneIfGold("b"), 0)'.$EOL.'test_equal(oneIfGold("gold"), 0)'.$EOL.'test_equal(oneIfGold("silver"), 0)'.$EOL.'','lesson_id' => $lesson24->id,'previous_exercise_id' => $exercise292->id,'user_id' => $user->id]);
        $project13 = Project::create(['name' => ' Medal count','open_date' => '2018-07-08 0:00:00','close_date' => '2018-07-10 0:00:00','prompt' => ''.$EOL.'<div>You will write a program that could be used by Olympic medal count tabulators. You will prompt the user as to whether they would like to add another medal. If they do, then prompt first for the medal type (g=gold/s=silver/b=bronze) then prompt for the country who won the medal (u=United States/o=other). After the user has finished entering the medal types, print out the medal counts as follows:'.$EOL.'<p><code>USA: 18 gold, 14 silver, 19 bronze</code>'.$EOL.'<p><code>Everyone else: 30 gold, 10 silver, 22 bronze</code>'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => 'def oneIfGold(t):'.$EOL.'    return 1 if t=="g" else 0'.$EOL.'def oneIfSilver(t):'.$EOL.'    return 1 if t=="s" else 0'.$EOL.'def oneIfBronze(t):'.$EOL.'    return 1 if t=="b" else 0'.$EOL.'usGold = 0'.$EOL.'usSilver = 0'.$EOL.'usBronze = 0'.$EOL.'otherGold = 0'.$EOL.'otherSilver = 0'.$EOL.'otherBronze = 0'.$EOL.'more = input("Enter a medal? [y/n]")'.$EOL.'while more == "y":'.$EOL.'    medalType = input("Enter a medal type. [g/s/b]")'.$EOL.'    country = input("Enter a country. [u=USA]")'.$EOL.'    if country == "u":'.$EOL.'        usGold += oneIfGold(medalType)'.$EOL.'        usSilver += oneIfSilver(medalType)'.$EOL.'        usBronze += oneIfBronze(medalType)'.$EOL.'    else:'.$EOL.'        otherGold += oneIfGold(medalType)'.$EOL.'        otherSilver += oneIfSilver(medalType)'.$EOL.'        otherBronze += oneIfBronze(medalType)'.$EOL.'    more = input("Enter another medal? [y/n]")'.$EOL.'print("USA: {} gold, {} silver, {} bronze".format(usGold, usSilver, usBronze))'.$EOL.'print("Everyone else: {} gold, {} silver, {} bronze".format(otherGold, otherSilver, otherBronze))'.$EOL.'','module_id' => $module11->id,'previous_lesson_id' => $lesson24->id,'user_id' => $user->id]);
        $concept9= Concept::create(['name' => 'Arithmetic','course_id' => $course->id,'previous_concept_id' => $concept8->id,'user_id' => $user->id]);
        $module12= Module::create(['name' => 'Modulus','concept_id' => $concept9->id,'open_date' => '2018-07-10 0:00:00','user_id' => $user->id]);
        $lesson25= Lesson::create(['name' => 'Modulo operator','module_id' =>  $module12->id,'user_id' => $user->id]);
        $exercise294 = Exercise::create(['prompt' => 'We"re familiar with adding, subtracting, multiplying, and dividing. In programming, we often use an additional operator: modulo. The % sign represents the modulo operator and gives the remainder after an integer division. The mod3() function below returns 2, which is the remainder after 5/3. Change a to a multiple of 3 so that zero is returned. Do not change the return statement.','pre_code' => '','start_code' => 'def mod3():'.$EOL.'    a = 5'.$EOL.'    return a % 3'.$EOL.'print(mod3() == 0)'.$EOL.'','test_code' => 'test_equal(mod3(), 0)'.$EOL.'','lesson_id' => $lesson25->id,'user_id' => $user->id]);
        $exercise295 = Exercise::create(['prompt' => 'Change a so that 1 is returned. Do not change the return statement.','pre_code' => '','start_code' => 'def mod3():'.$EOL.'    a = 5'.$EOL.'    return a % 3'.$EOL.'print(mod3() == 1)'.$EOL.'','test_code' => 'test_equal(mod3(), 1)'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise294->id,'user_id' => $user->id]);
        $exercise296 = Exercise::create(['prompt' => 'Complete the mod3() function. Hint: add a return of a % 3.','pre_code' => '','start_code' => 'def mod3(a):'.$EOL.'print(mod3(3) == 0)'.$EOL.'print(mod3(4) == 1)'.$EOL.'print(mod3(5) == 2)'.$EOL.'print(mod3(6) == 0)'.$EOL.'','test_code' => 'test_equal(mod3(3), 0)'.$EOL.'test_equal(mod3(4), 1)'.$EOL.'test_equal(mod3(5), 2)'.$EOL.'test_equal(mod3(6), 0)'.$EOL.'test_equal(mod3(7), 1)'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise295->id,'user_id' => $user->id]);
        $exercise297 = Exercise::create(['prompt' => 'Complete the mod3() function.','pre_code' => '','start_code' => 'def mod3(a):'.$EOL.'print(mod3(3) == 0)'.$EOL.'print(mod3(4) == 1)'.$EOL.'print(mod3(5) == 2)'.$EOL.'print(mod3(6) == 0)'.$EOL.'','test_code' => 'test_equal(mod3(3), 0)'.$EOL.'test_equal(mod3(4), 1)'.$EOL.'test_equal(mod3(5), 2)'.$EOL.'test_equal(mod3(6), 0)'.$EOL.'test_equal(mod3(7), 1)'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise296->id,'user_id' => $user->id]);
        $exercise298 = Exercise::create(['prompt' => 'Complete the mod() function. Hint: return a % b','pre_code' => '','start_code' => 'def mod3(a, b):'.$EOL.'print(mod3(3, 3) == 0)'.$EOL.'print(mod3(4, 3) == 1)'.$EOL.'print(mod3(5, 3) == 2)'.$EOL.'print(mod3(6, 3) == 0)'.$EOL.'print(mod3(3, 4) == 3)'.$EOL.'print(mod3(4, 4) == 0)'.$EOL.'print(mod3(5, 4) == 1)'.$EOL.'print(mod3(6, 4) == 2)'.$EOL.'','test_code' => 'test_equal(mod3(3, 3), 0)'.$EOL.'test_equal(mod3(4, 3), 1)'.$EOL.'test_equal(mod3(5, 3), 2)'.$EOL.'test_equal(mod3(6, 3), 0)'.$EOL.'test_equal(mod3(3, 4), 3)'.$EOL.'test_equal(mod3(4, 4), 0)'.$EOL.'test_equal(mod3(5, 4), 1)'.$EOL.'test_equal(mod3(6, 4), 2)'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise297->id,'user_id' => $user->id]);
        $exercise299 = Exercise::create(['prompt' => 'The following code counts up to n printing n%3 along the way. Change the 3 to a 4 so that 0 1 2 3 0 1 2 3... is printed.','pre_code' => '','start_code' => 'def mods(n):'.$EOL.'    string = ""'.$EOL.'    for i in range(n):'.$EOL.'        string = string + str(i%3) + " "'.$EOL.'    return string'.$EOL.'print(mods(4) == "0 1 2 3 ")'.$EOL.'print(mods(7) == "0 1 2 3 0 1 2 ")'.$EOL.'','test_code' => 'test_equal(mods(4), "0 1 2 3 ")'.$EOL.'test_equal(mods(7), "0 1 2 3 0 1 2 ")'.$EOL.'test_equal(mods(8), "0 1 2 3 0 1 2 3 ")'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise298->id,'user_id' => $user->id]);
        $exercise300 = Exercise::create(['prompt' => 'Change the arguments to the modulo operator so that True values are printed.','pre_code' => '','start_code' => 'def mods(n):'.$EOL.'    string = ""'.$EOL.'    for i in range(n):'.$EOL.'        string = string + str(i%2) + " "'.$EOL.'    return string'.$EOL.'print(mods(4) == "0 1 2 3 ")'.$EOL.'print(mods(7) == "0 1 2 3 0 1 2 ")'.$EOL.'','test_code' => 'test_equal(mods(4), "0 1 2 3 ")'.$EOL.'test_equal(mods(7), "0 1 2 3 0 1 2 ")'.$EOL.'test_equal(mods(8), "0 1 2 3 0 1 2 3 ")'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise299->id,'user_id' => $user->id]);
        $exercise301 = Exercise::create(['prompt' => 'Change the arguments to the modulo operator so that True values are printed.','pre_code' => '','start_code' => 'def mods(n):'.$EOL.'    string = ""'.$EOL.'    for i in range(n):'.$EOL.'        string = string + str(i%2) + " "'.$EOL.'    return string'.$EOL.'print(mods(4) == "0 1 2 0 ")'.$EOL.'print(mods(7) == "0 1 2 0 1 2 0 ")'.$EOL.'','test_code' => 'test_equal(mods(4), "0 1 2 0 ")'.$EOL.'test_equal(mods(7), "0 1 2 0 1 2 0 ")'.$EOL.'test_equal(mods(8), "0 1 2 0 1 2 0 1 ")'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise300->id,'user_id' => $user->id]);
        $exercise302 = Exercise::create(['prompt' => 'Change the arguments to the modulo operator so that True values are printed.','pre_code' => '','start_code' => 'def mods(n):'.$EOL.'    string = ""'.$EOL.'    for i in range(n):'.$EOL.'        string = string + str(i%3) + " "'.$EOL.'    return string'.$EOL.'print(mods(4) == "0 1 0 1 ")'.$EOL.'print(mods(7) == "0 1 0 1 0 1 0 ")'.$EOL.'','test_code' => 'test_equal(mods(4), "0 1 0 1 ")'.$EOL.'test_equal(mods(7), "0 1 0 1 0 1 0 ")'.$EOL.'test_equal(mods(8), "0 1 0 1 0 1 0 1 ")'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise301->id,'user_id' => $user->id]);
        $exercise303 = Exercise::create(['prompt' => 'Complete the mods() function so that True values are printed.','pre_code' => '','start_code' => 'def mods(n):'.$EOL.'    string = ""'.$EOL.'    return string'.$EOL.'print(mods(4) == "0 1 0 1 ")'.$EOL.'print(mods(7) == "0 1 0 1 0 1 0 ")'.$EOL.'','test_code' => 'test_equal(mods(4), "0 1 0 1 ")'.$EOL.'test_equal(mods(7), "0 1 0 1 0 1 0 ")'.$EOL.'test_equal(mods(8), "0 1 0 1 0 1 0 1 ")'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise302->id,'user_id' => $user->id]);
        $exercise304 = Exercise::create(['prompt' => 'Note that a%2 == 0 if a is even and a%2 == 1 if a is odd. Change the isEven() function so that it returns the correct value.','pre_code' => '','start_code' => 'def isEven(a):'.$EOL.'    return a % 2 == 1'.$EOL.'print(isEven(1) == False)'.$EOL.'print(isEven(2) == True)'.$EOL.'print(isEven(3) == False)'.$EOL.'print(isEven(4) == True)'.$EOL.'','test_code' => 'test_equal(isEven(1), False)'.$EOL.'test_equal(isEven(2), True)'.$EOL.'test_equal(isEven(3), False)'.$EOL.'test_equal(isEven(4), True)'.$EOL.'test_equal(isEven(5), False)'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise303->id,'user_id' => $user->id]);
        $exercise305 = Exercise::create(['prompt' => 'Complete the isEven() function.','pre_code' => '','start_code' => 'def isEven(a):'.$EOL.'print(isEven(1) == False)'.$EOL.'print(isEven(2) == True)'.$EOL.'print(isEven(3) == False)'.$EOL.'print(isEven(4) == True)'.$EOL.'','test_code' => 'test_equal(isEven(1), False)'.$EOL.'test_equal(isEven(2), True)'.$EOL.'test_equal(isEven(3), False)'.$EOL.'test_equal(isEven(4), True)'.$EOL.'test_equal(isEven(5), False)'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise304->id,'user_id' => $user->id]);
        $exercise306 = Exercise::create(['prompt' => 'Write a function isOdd().','pre_code' => '','start_code' => 'print(isOdd(2) == False)'.$EOL.'print(isOdd(3) == True)'.$EOL.'print(isOdd(4) == False)'.$EOL.'print(isOdd(5) == True)'.$EOL.'','test_code' => 'test_equal(isOdd(2), False)'.$EOL.'test_equal(isOdd(3), True)'.$EOL.'test_equal(isOdd(4), False)'.$EOL.'test_equal(isOdd(5), True)'.$EOL.'test_equal(isOdd(6), False)'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise305->id,'user_id' => $user->id]);
        $exercise307 = Exercise::create(['prompt' => 'Add an else that returns "odd" if the variable "a" is odd.','pre_code' => '','start_code' => 'def evenOrOdd(a):'.$EOL.'    if a % 2 == 0:'.$EOL.'        return "even"'.$EOL.'print(evenOrOdd(1) == "odd")'.$EOL.'print(evenOrOdd(2) == "even")'.$EOL.'print(evenOrOdd(3) == "odd")'.$EOL.'print(evenOrOdd(4) == "even")'.$EOL.'print(evenOrOdd(5) == "odd")'.$EOL.'','test_code' => 'test_equal(evenOrOdd(1), "odd")'.$EOL.'test_equal(evenOrOdd(2), "even")'.$EOL.'test_equal(evenOrOdd(3), "odd")'.$EOL.'test_equal(evenOrOdd(4), "even")'.$EOL.'test_equal(evenOrOdd(5), "odd")'.$EOL.'test_equal(evenOrOdd(6), "even")'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise306->id,'user_id' => $user->id]);
        $exercise308 = Exercise::create(['prompt' => 'Write a function evenOrOdd that returns "even" if the parameter is even and "odd" otherwise.','pre_code' => '','start_code' => 'print(evenOrOdd(1) == "odd")'.$EOL.'print(evenOrOdd(2) == "even")'.$EOL.'print(evenOrOdd(3) == "odd")'.$EOL.'print(evenOrOdd(4) == "even")'.$EOL.'print(evenOrOdd(5) == "odd")'.$EOL.'','test_code' => 'test_equal(evenOrOdd(1), "odd")'.$EOL.'test_equal(evenOrOdd(2), "even")'.$EOL.'test_equal(evenOrOdd(3), "odd")'.$EOL.'test_equal(evenOrOdd(4), "even")'.$EOL.'test_equal(evenOrOdd(5), "odd")'.$EOL.'test_equal(evenOrOdd(6), "even")'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise307->id,'user_id' => $user->id]);
        $exercise309 = Exercise::create(['prompt' => 'Given a number of seconds, we can divide that value by 60 to get the number of minutes. Complete the function getMinutes(). Hint: return seconds divided by 60.','pre_code' => '','start_code' => '# Returns the number of complete minutes given'.$EOL.'# the number of seconds. '.$EOL.'def getMinutes(seconds):'.$EOL.'print(getMinutes(10) == 0)'.$EOL.'print(getMinutes(100) == 1)'.$EOL.'print(getMinutes(200) == 3)'.$EOL.'','test_code' => 'test_equal(getMinutes(170), 2)'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise308->id,'user_id' => $user->id]);
        $exercise310 = Exercise::create(['prompt' => 'Write the getMinutes() function.','pre_code' => '','start_code' => '# Returns the number of complete minutes given'.$EOL.'# the number of seconds. '.$EOL.'print(getMinutes(10) == 0)'.$EOL.'print(getMinutes(100) == 1)'.$EOL.'print(getMinutes(200) == 3)'.$EOL.'','test_code' => 'test_equal(getMinutes(170), 2)'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise309->id,'user_id' => $user->id]);
        $exercise311 = Exercise::create(['prompt' => 'Given a number of seconds, we can compute the same time using minutes and seconds. We first find the number of minutes using divide and then the number of seconds using modulo. Complete the function by assigning minutes equal to totalSeconds divided by 60.','pre_code' => '','start_code' => 'def minutesAndSeconds(totalSeconds):'.$EOL.'    minutes = '.$EOL.'    seconds = totalSeconds % 60'.$EOL.'    return "{}:{:0>2}".format(minutes, seconds)'.$EOL.'print(minutesAndSeconds(59) == "0:59")'.$EOL.'print(minutesAndSeconds(60) == "1:00")'.$EOL.'print(minutesAndSeconds(61) == "1:01")'.$EOL.'print(minutesAndSeconds(119) == "1:59")'.$EOL.'print(minutesAndSeconds(181) == "3:01")'.$EOL.'','test_code' => 'test_equal(minutesAndSeconds(10), "0:10")'.$EOL.'test_equal(minutesAndSeconds(100), "1:40")'.$EOL.'test_equal(minutesAndSeconds(170), "2:50")'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise310->id,'user_id' => $user->id]);
        $exercise312 = Exercise::create(['prompt' => 'Complete the function by assigning minutes and seconds.','pre_code' => '','start_code' => 'def minutesAndSeconds(totalSeconds):'.$EOL.'    return "{}:{:0>2}".format(minutes, seconds)'.$EOL.'print(minutesAndSeconds(59) == "0:59")'.$EOL.'print(minutesAndSeconds(60) == "1:00")'.$EOL.'print(minutesAndSeconds(61) == "1:01")'.$EOL.'print(minutesAndSeconds(119) == "1:59")'.$EOL.'print(minutesAndSeconds(181) == "3:01")'.$EOL.'','test_code' => 'test_equal(minutesAndSeconds(10), "0:10")'.$EOL.'test_equal(minutesAndSeconds(100), "1:40")'.$EOL.'test_equal(minutesAndSeconds(170), "2:50")'.$EOL.'','lesson_id' => $lesson25->id,'previous_exercise_id' => $exercise311->id,'user_id' => $user->id]);
        $project14 = Project::create(['name' => ' Day of the Week','open_date' => '2018-07-14 0:00:00','close_date' => '2018-07-16 0:00:00','prompt' => ''.$EOL.'<div>See the project instructions at <a href="http://www2.cose.isu.edu/~edwajohn/teaching/cs1181-3/project-day-of-week.pdf" target="_blank">this link</a>.</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => '# Prompt the user and get the day, month and year'.$EOL.'day = 3#input("Please enter the day: ")'.$EOL.'month = 12#input("Please enter the month (January = 1, February = 2, etc): ")'.$EOL.'year = 1974#input("Please enter the year: ")'.$EOL.'# Compute the day of the week using Gauss" algorithm,'.$EOL.'# as described on Wikipedia'.$EOL.'d = day'.$EOL.'m = 1 + ((month+9) % 12)'.$EOL.'y = year'.$EOL.'if month == 1 or month == 2:'.$EOL.'    y = year - 1;'.$EOL.'w = (d + (int)(2.6*m - 0.2) + 5 * (y % 4) + 4 * (y % 100) + 6 * (y % 400)) % 7'.$EOL.'print("d = {}\nm = {}\ny = {}".format(d, m, y))'.$EOL.'# Output result by doing if/else on the variable w'.$EOL.'if w == 0:'.$EOL.'    dayOfWeek = "Sunday"'.$EOL.'elif w == 1:'.$EOL.'    dayOfWeek = "Monday"'.$EOL.'elif w == 2:'.$EOL.'    dayOfWeek = "Tuesday"'.$EOL.'elif w == 3:'.$EOL.'    dayOfWeek = "Wednesday"'.$EOL.'elif w == 4:'.$EOL.'    dayOfWeek = "Thursday"'.$EOL.'elif w == 5:'.$EOL.'    dayOfWeek = "Friday"'.$EOL.'elif w == 6:'.$EOL.'    dayOfWeek = "Saturday"'.$EOL.'print("The day of the week is {}.".format(dayOfWeek))'.$EOL.'','module_id' => $module12->id,'previous_lesson_id' => $lesson25->id,'user_id' => $user->id]);
        $project15 = Project::create(['name' => ' Elapsed time','open_date' => '2018-07-14 0:00:00','close_date' => '2018-07-16 0:00:00','prompt' => ''.$EOL.'<div>In this project you find elapsed time. You will prompt the user to enter two times: a start time and a stop time, both in hours, minutes and seconds. You will then convert both to total seconds. Then subtract to find the elapsed number of seconds, then convert back to hours, minutes and seconds and display the result. Here"s an example:'.$EOL.'<pre><p>Enter start time hours: 1'.$EOL.'<p>Enter start time minutes: 30'.$EOL.'<p>Enter start time seconds: 19'.$EOL.'<p>Enter end time hours: 2'.$EOL.'<p>Enter end time minutes: 41'.$EOL.'<p>Enter end time seconds: 18'.$EOL.'<p>'.$EOL.'<p>The time elapsed between 01:30:19 and 02:41:18 is 01:10:59'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => 'h1 = 1#int(input("Enter time 1 hours:"))'.$EOL.'m1 = 30#int(input("Enter time 1 minutes:"))'.$EOL.'s1 = 19#int(input("Enter time 1 seconds:"))'.$EOL.'h2 = 2#int(input("Enter time 2 hours:"))'.$EOL.'m2 = 41#int(input("Enter time 2 minutes:"))'.$EOL.'s2 = 18#int(input("Enter time 2 seconds:"))'.$EOL.'t1 = h1*3600 + m1*60 + s1'.$EOL.'t2 = h2*3600 + m2*60 + s2'.$EOL.'t = t2 - t1'.$EOL.'h3 = t / 3600'.$EOL.'m3 = (t % 3600) / 60'.$EOL.'s3 = (t % 3600) % 60'.$EOL.'t1string = "{:0>2}:{:0>2}:{:0>2}".format(h1, m1, s1)'.$EOL.'t2string = "{:0>2}:{:0>2}:{:0>2}".format(h2, m2, s2)'.$EOL.'t3string = "{:0>2}:{:0>2}:{:0>2}".format(h3, m3, s3)'.$EOL.'print("The time elapsed between {} and {} is {}".format(t1string, t2string, t3string))'.$EOL.'','module_id' => $module12->id,'previous_lesson_id' => $lesson25->id,'user_id' => $user->id]);
        $project16 = Project::create(['name' => ' Random dot','open_date' => '2018-07-14 0:00:00','close_date' => '2018-07-16 0:00:00','prompt' => ''.$EOL.'<div>When the user presses spacebar, draw a dot or some other object flying into space. The dot should appear in some random location and fly in a random direction. Each time the user presses spacebar a new dot should appear and fly off. If a new dot appears, the old dot should disapper. You can use the turtle to be the dot or you can draw dots and clear each iteration. The starter code handles the pressing of the spacebar and will call shootDot() every time the spacebar is pressed.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'t.penup()'.$EOL.'t.shape("circle")'.$EOL.'screen = turtle.Screen()'.$EOL.'def shootDot():'.$EOL.'    # TODO implement this function'.$EOL.'screen.onkey(shootDot, "space")'.$EOL.'screen.listen()'.$EOL.'','solution' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'t.penup()'.$EOL.'t.shape("circle")'.$EOL.'screen = turtle.Screen()'.$EOL.'def shootDot():'.$EOL.'    dx = random.randint(-10, 10)/20.0'.$EOL.'    dy = random.randint(-10, 10)/20.0'.$EOL.'    x = 0'.$EOL.'    y = 0'.$EOL.'    t.setpos(x, y)'.$EOL.'    for i in range(1000):'.$EOL.'        x += dx'.$EOL.'        y += dy'.$EOL.'        t.setpos(x, y)'.$EOL.'screen.onkey(shootDot, "space")'.$EOL.'screen.listen()'.$EOL.'','module_id' => $module12->id,'previous_lesson_id' => $lesson25->id,'user_id' => $user->id]);
        $project17 = Project::create(['name' => ' Throw physics simulation','open_date' => '2018-07-14 0:00:00','close_date' => '2018-07-16 0:00:00','prompt' => ''.$EOL.'<div>Write a physics simulation of a baseball being thrown from a cliff. A person throws a baseball horizontally with velocity v off a cliff. If there was no gravity the ball would travel straight. But since our dear planet has gravity, the ball starts to arc down toward the ground. You will ask the user how fast they want to throw the ball, and then show the parabolic arc traced out by the ball. See a solution in action <a href="https://youtu.be/leqa2zRqd-s" target="_blank">here</a>. (And yes, for you physics geeks out there, we are ignoring friction and all other forces besides gravity.)'.$EOL.'<p>See the two TODO comments for places to implement code.'.$EOL.'<p>To succeed in this project, you should take things in steps. For example, start by simulating a throw without gravity, and watch the turtle travel horizontally across the screen. Then add gravity. Print out values of variables if you get stuck. Take it slow!'.$EOL.'<p>One more tip: comment-out the code that prompts the user for a velocity while you"re writing your code. This way you can quickly test without having to enter in a velocity every time.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'# Returns the distance the ball will have fallen after time t'.$EOL.'def fallingDistance(t):'.$EOL.'    return 0.5*9.8*t*t'.$EOL.'# Simulates throwing a ball from location (startx, starty) with'.$EOL.'# horizontal velocity v.'.$EOL.'def throw(startx, starty, v):'.$EOL.'    y0 = starty'.$EOL.'    y = y0'.$EOL.'    x = startx'.$EOL.'    t.tracer(0)'.$EOL.'    t.up()'.$EOL.'    t.setpos(x, y0)'.$EOL.'    t.down()'.$EOL.'    t.tracer(1)'.$EOL.'    time = 0'.$EOL.'    # TODO Loop, incrementing x by the velocity each iteration.'.$EOL.'    # The y coordinate should be obtained using the fallingDistance'.$EOL.'    # function. Move the ball by calling t.setpos().'.$EOL.'def main():'.$EOL.'    # TODO loop, asking the user what the desired velocity is,'.$EOL.'    # and calling throw() each time the user enters a non-zero'.$EOL.'    # value. Quit after the user enters zero. When calling throw(),'.$EOL.'    # the startx and starty location may be somewhere around'.$EOL.'    # (-180, 150), but this can be adjusted as desired.'.$EOL.'main()'.$EOL.'','solution' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'# Returns the distance the ball will have fallen after time t'.$EOL.'def fallingDistance(t):'.$EOL.'    return 0.5*9.8*t*t'.$EOL.'# Simulates throwing a ball from location (startx, starty) with'.$EOL.'# horizontal velocity v.'.$EOL.'def throw(startx, starty, v):'.$EOL.'    y0 = starty'.$EOL.'    y = y0'.$EOL.'    x = startx'.$EOL.'    t.tracer(0)'.$EOL.'    t.up()'.$EOL.'    t.setpos(x, y0)'.$EOL.'    t.down()'.$EOL.'    t.tracer(1)'.$EOL.'    time = 0'.$EOL.'    # TODO Loop, incrementing x by the velocity each iteration.'.$EOL.'    # The y coordinate should be obtained using the fallingDistance'.$EOL.'    # function. Move the ball by calling t.setpos().'.$EOL.'    while y > -200:'.$EOL.'        time += 1'.$EOL.'        y = y0 - fallingDistance(time) / 10'.$EOL.'        x += v'.$EOL.'        t.setpos(x, y)'.$EOL.'def main():'.$EOL.'    # TODO loop, asking the user what the desired velocity is,'.$EOL.'    # and calling throw() each time the user enters a non-zero'.$EOL.'    # value. Quit after the user enters zero. When calling throw(),'.$EOL.'    # the startx and starty location may be somewhere around'.$EOL.'    # (-180, 150), but this can be adjusted as desired.'.$EOL.'    v = int(input("Enter the velocity (0 to quit):"))'.$EOL.'    while v > 0:'.$EOL.'        throw(-180, 150, v)'.$EOL.'        v = int(input("Enter the velocity (0 to quit):"))'.$EOL.'main()'.$EOL.'','module_id' => $module12->id,'previous_lesson_id' => $lesson25->id,'user_id' => $user->id]);
        $concept10= Concept::create(['name' => 'Collections','course_id' => $course->id,'previous_concept_id' => $concept9->id,'user_id' => $user->id]);
        $module13= Module::create(['name' => 'Lists','concept_id' => $concept10->id,'open_date' => '2018-07-17 0:00:00','user_id' => $user->id]);
        $lesson26= Lesson::create(['name' => 'Lists I','module_id' =>  $module13->id,'user_id' => $user->id]);
        $exercise313 = Exercise::create(['prompt' => 'This code creates a list of names. The name at index 0 is "Mandy". Change the name that is printed to "Mike" by changing the 0 to a 1.','pre_code' => '','start_code' => 'names = ["Mandy", "Mike", "Michelle", "Mulligan"]'.$EOL.'print(names[0])'.$EOL.'','test_code' => 'test_out("Mike")'.$EOL.'','lesson_id' => $lesson26->id,'user_id' => $user->id]);
        $exercise314 = Exercise::create(['prompt' => 'Change the printed name to "Michelle". Hint: change the 0 to a 2.','pre_code' => '','start_code' => 'names = ["Mandy", "Mike", "Michelle", "Mulligan"]'.$EOL.'print(names[0])'.$EOL.'','test_code' => 'test_out("Michelle")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise313->id,'user_id' => $user->id]);
        $exercise315 = Exercise::create(['prompt' => 'The number we put in the brackets is called the "index" into the array. Indices start at 0, strangely enough. Change the printed name to "Mulligan" by changing the index into "names".','pre_code' => '','start_code' => 'names = ["Mandy", "Mike", "Michelle", "Mulligan"]'.$EOL.'print(names[0])'.$EOL.'','test_code' => 'test_out("Mulligan")'.$EOL.'test_in("names[3]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise314->id,'user_id' => $user->id]);
        $exercise316 = Exercise::create(['prompt' => 'Change the printed name to "Mike".','pre_code' => '','start_code' => 'names = ["Mandy", "Mike", "Michelle", "Mulligan"]'.$EOL.'print(names[2])'.$EOL.'','test_code' => 'test_out("Mike")'.$EOL.'test_in("names[1]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise315->id,'user_id' => $user->id]);
        $exercise317 = Exercise::create(['prompt' => 'Change the printed name to "Mandy".','pre_code' => '','start_code' => 'names = ["Mandy", "Mike", "Michelle", "Mulligan"]'.$EOL.'print(names[2])'.$EOL.'','test_code' => 'test_out("Mandy")'.$EOL.'test_in("names[0]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise316->id,'user_id' => $user->id]);
        $exercise318 = Exercise::create(['prompt' => 'Change the printed name to "Mulligan".','pre_code' => '','start_code' => 'names = ["Mandy", "Mike", "Michelle", "Mulligan"]'.$EOL.'print(names[2])'.$EOL.'','test_code' => 'test_out("Mulligan")'.$EOL.'test_in("names[3]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise317->id,'user_id' => $user->id]);
        $exercise319 = Exercise::create(['prompt' => 'Change the printed country to "Mexico".','pre_code' => '','start_code' => 'countries = ["US", "England", "Mexico", "India", "Japan"]'.$EOL.'print(countries[0])'.$EOL.'','test_code' => 'test_out("Mexico")'.$EOL.'test_in("countries[2]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise318->id,'user_id' => $user->id]);
        $exercise320 = Exercise::create(['prompt' => 'Print "England" by printing the element in the countries list at some index. Hint: you"ll add the following code: "print(countries[1])"','pre_code' => '','start_code' => 'countries = ["US", "England", "Mexico", "India", "Japan"]'.$EOL.'','test_code' => 'test_out("England")'.$EOL.'test_in("countries[1]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise319->id,'user_id' => $user->id]);
        $exercise321 = Exercise::create(['prompt' => 'Print "England" by printing the element in the countries list at some index.','pre_code' => '','start_code' => 'countries = ["US", "England", "Mexico", "India", "Japan"]'.$EOL.'','test_code' => 'test_out("England")'.$EOL.'test_in("countries[1]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise320->id,'user_id' => $user->id]);
        $exercise322 = Exercise::create(['prompt' => 'Print "India" by printing the element in the countries list at some index.','pre_code' => '','start_code' => 'countries = ["US", "England", "Mexico", "India", "Japan"]'.$EOL.'','test_code' => 'test_out("India")'.$EOL.'test_in("countries[3]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise321->id,'user_id' => $user->id]);
        $exercise323 = Exercise::create(['prompt' => 'Print "Japan" by printing the element in the countries list at some index.','pre_code' => '','start_code' => 'countries = ["US", "England", "Mexico", "India", "Japan"]'.$EOL.'','test_code' => 'test_out("Japan")'.$EOL.'test_in("countries[4]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise322->id,'user_id' => $user->id]);
        $exercise324 = Exercise::create(['prompt' => 'Add two print statements, so that your output will be "England\nMexico\n".','pre_code' => '','start_code' => 'countries = ["US", "England", "Mexico", "India", "Japan"]'.$EOL.'','test_code' => 'test_out("England\nMexico")'.$EOL.'test_in("countries[1]")'.$EOL.'test_in("countries[2]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise323->id,'user_id' => $user->id]);
        $exercise325 = Exercise::create(['prompt' => 'Modify the print statement so that "England vs. Mexico" will be printed.','pre_code' => '','start_code' => 'countries = ["US", "England", "Mexico", "India", "Japan"]'.$EOL.'print("{} vs. {}".format(countries[0], countries[1]))'.$EOL.'','test_code' => 'test_out("England vs. Mexico")'.$EOL.'test_in("countries[1]")'.$EOL.'test_in("countries[2]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise324->id,'user_id' => $user->id]);
        $exercise326 = Exercise::create(['prompt' => 'Add a print statement so that "England vs. Mexico" will be printed. You should use the countries list to print the names of the countries and you should also use the format() function, like in the previous exercise.','pre_code' => '','start_code' => 'countries = ["US", "England", "Mexico", "India", "Japan"]'.$EOL.'','test_code' => 'test_out("England vs. Mexico")'.$EOL.'test_in("format")'.$EOL.'test_in("countries[1]")'.$EOL.'test_in("countries[2]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise325->id,'user_id' => $user->id]);
        $exercise327 = Exercise::create(['prompt' => 'Create a list so that "US\nEngland\nMexico" is printed. You need only three elements in the list.','pre_code' => '','start_code' => 'print(countries[0])'.$EOL.'print(countries[1])'.$EOL.'print(countries[2])'.$EOL.'','test_code' => 'test_out("US\nEngland\nMexico")'.$EOL.'test_in("countries[0]")'.$EOL.'test_in("countries[1]")'.$EOL.'test_in("countries[2]")'.$EOL.'','lesson_id' => $lesson26->id,'previous_exercise_id' => $exercise326->id,'user_id' => $user->id]);
        $lesson27= Lesson::create(['name' => 'Lists II - indexed assignment','module_id' =>  $module13->id,'previous_lesson_id' => $lesson26->id,'user_id' => $user->id]);
        $exercise328 = Exercise::create(['prompt' => 'Change the code on line 2 so that "Mandy" is now "Mindy". The code should print out "Mindy and Mike". Do not change line 1.','pre_code' => '','start_code' => 'names = ["Mandy", "Mike"]'.$EOL.'names[0] = "Mandy"'.$EOL.'print("{} and {}".format(names[0], names[1]))'.$EOL.'print("{} and {}".format(names[0], names[1]) == "Mindy and Mike")'.$EOL.'','test_code' => 'test_equal(names[0], "Mindy")'.$EOL.'','lesson_id' => $lesson27->id,'user_id' => $user->id]);
        $exercise329 = Exercise::create(['prompt' => 'Add code at the TODO comment that changes names[0] to "Mindy".','pre_code' => '','start_code' => 'names = ["Mandy", "Mike"]'.$EOL.'print(names[0] == "Mandy")'.$EOL.'# TODO put code here'.$EOL.'print("{} and {}".format(names[0], names[1]))'.$EOL.'print("{} and {}".format(names[0], names[1]) == "Mindy and Mike")'.$EOL.'print(names[0] == "Mindy")'.$EOL.'','test_code' => 'test_equal(names[0], "Mindy")'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise328->id,'user_id' => $user->id]);
        $exercise330 = Exercise::create(['prompt' => 'Change numbers[3] to equal 40. Make the change at the TODO comment.','pre_code' => '','start_code' => 'numbers = [1, 2, 3, 4]'.$EOL.'numbers[0] = 10'.$EOL.'# TODO changes numbers[3] here'.$EOL.'print(numbers == [10, 2, 3, 40])'.$EOL.'','test_code' => 'test_equal(numbers, [10, 2, 3, 40])'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise329->id,'user_id' => $user->id]);
        $exercise331 = Exercise::create(['prompt' => 'getFirst() returns the first number in the list. Fix the bug so that it returns numbers[0] instead of numbers[1].','pre_code' => '','start_code' => 'def getFirst(numbers):'.$EOL.'    return numbers[1]'.$EOL.'print(getFirst([1, 2, 3, 4]) == 1)'.$EOL.'print(getFirst([8, 3]) == 8)'.$EOL.'','test_code' => 'test_equal(getFirst([1, 2, 3, 4]), 1)'.$EOL.'test_equal(getFirst([9, 3]), 9)'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise330->id,'user_id' => $user->id]);
        $exercise332 = Exercise::create(['prompt' => 'Implement getFirst() so that it returns the first number in the list.','pre_code' => '','start_code' => 'def getFirst(numbers):'.$EOL.'print(getFirst([1, 2, 3, 4]) == 1)'.$EOL.'print(getFirst([8, 3]) == 8)'.$EOL.'','test_code' => 'test_equal(getFirst([1, 2, 3, 4]), 1)'.$EOL.'test_equal(getFirst([9, 3]), 9)'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise331->id,'user_id' => $user->id]);
        $exercise333 = Exercise::create(['prompt' => 'Implement getThird() so that it returns the third number in the list.','pre_code' => '','start_code' => 'def getThird(numbers):'.$EOL.'print(getThird([1, 2, 3, 4]) == 3)'.$EOL.'print(getThird([8, 3, 9]) == 9)'.$EOL.'','test_code' => 'test_equal(getThird([1, 2, 3, 4]), 3)'.$EOL.'test_equal(getThird([9, 3, 11]), 11)'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise332->id,'user_id' => $user->id]);
        $exercise334 = Exercise::create(['prompt' => 'setFirstTo5() sets the first number in the list to 5 and returns the list. Add a return statement. Hint: add "return numbers".','pre_code' => '','start_code' => 'def setFirstTo5(numbers):'.$EOL.'    numbers[0] = 5'.$EOL.'print(setFirstTo5([1, 2, 3, 4]) == [5, 2, 3, 4])'.$EOL.'print(setFirstTo5([8, 3]) == [5, 3])'.$EOL.'','test_code' => 'test_equal(setFirstTo5([1, 2, 3, 4]), [5, 2, 3, 4])'.$EOL.'test_equal(setFirstTo5([9, 3]), [5, 3])'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise333->id,'user_id' => $user->id]);
        $exercise335 = Exercise::create(['prompt' => 'Complete the setFirstTo5() function so it sets the first number in the list to 5 and returns the list.','pre_code' => '','start_code' => 'def setFirstTo5(numbers):'.$EOL.'    numbers[0] = 5'.$EOL.'print(setFirstTo5([1, 2, 3, 4]) == [5, 2, 3, 4])'.$EOL.'print(setFirstTo5([8, 3]) == [5, 3])'.$EOL.'','test_code' => 'test_equal(setFirstTo5([1, 2, 3, 4]), [5, 2, 3, 4])'.$EOL.'test_equal(setFirstTo5([9, 3]), [5, 3])'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise334->id,'user_id' => $user->id]);
        $exercise336 = Exercise::create(['prompt' => 'doubleFirst() doubles the first number in the list and returns the list. Add a return statement to the function. Hint: add "return numbers".','pre_code' => '','start_code' => 'def doubleFirst(numbers):'.$EOL.'    first = numbers[0]'.$EOL.'    numbers[0] = first * 2'.$EOL.'print(doubleFirst([1, 2, 3, 4]) == [2, 2, 3, 4])'.$EOL.'print(doubleFirst([8, 3]) == [16, 3])'.$EOL.'','test_code' => 'test_equal(doubleFirst([1, 2, 3, 4]), [2, 2, 3, 4])'.$EOL.'test_equal(doubleFirst([9, 3]), [18, 3])'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise335->id,'user_id' => $user->id]);
        $exercise337 = Exercise::create(['prompt' => 'Implement the function doubleFirst() so that it doubles the first number in the list and returns the list.','pre_code' => '','start_code' => 'def doubleFirst(numbers):'.$EOL.'print(doubleFirst([1, 2, 3, 4]) == [2, 2, 3, 4])'.$EOL.'print(doubleFirst([8, 3]) == [16, 3])'.$EOL.'','test_code' => 'test_equal(doubleFirst([1, 2, 3, 4]), [2, 2, 3, 4])'.$EOL.'test_equal(doubleFirst([9, 3]), [18, 3])'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise336->id,'user_id' => $user->id]);
        $exercise338 = Exercise::create(['prompt' => 'Implement the function doubleSecond() so that it doubles the second number in the list and returns the list. Hint: remember that list indices start at 0, so you need to double numbers[1].','pre_code' => '','start_code' => 'def doubleSecond(numbers):'.$EOL.'print(doubleSecond([1, 2, 3, 4]) == [1, 4, 3, 4])'.$EOL.'print(doubleSecond([8, 3]) == [8, 6])'.$EOL.'','test_code' => 'test_equal(doubleSecond([1, 2, 3, 4]), [1, 4, 3, 4])'.$EOL.'test_equal(doubleSecond([9, 3]), [9, 6])'.$EOL.'','lesson_id' => $lesson27->id,'previous_exercise_id' => $exercise337->id,'user_id' => $user->id]);
        $module14= Module::create(['name' => 'Loops Lists','concept_id' => $concept10->id,'open_date' => '2018-07-18 0:00:00','previous_module_id' => $module13->id,'user_id' => $user->id]);
        $lesson28= Lesson::create(['name' => 'Lists II - loops','module_id' =>  $module14->id,'user_id' => $user->id]);
        $exercise339 = Exercise::create(['prompt' => 'Create a list so that "chair\ntable\ndesk" is printed. You need only three elements in the list.','pre_code' => '','start_code' => 'print(furniture[0])'.$EOL.'print(furniture[1])'.$EOL.'print(furniture[2])'.$EOL.'','test_code' => 'test_out("chair\ntable\ndesk")'.$EOL.'test_in("furniture[0]")'.$EOL.'test_in("furniture[1]")'.$EOL.'test_in("furniture[2]")'.$EOL.'','lesson_id' => $lesson28->id,'user_id' => $user->id]);
        $exercise340 = Exercise::create(['prompt' => 'Change the argument to "range" so that only the first two elements are printed.','pre_code' => '','start_code' => 'furniture = ["chair", "table", "desk"]'.$EOL.'for i in range(3):'.$EOL.'    print(furniture[i])'.$EOL.'','test_code' => 'test_out("chair\ntable")'.$EOL.'test_in("range(2)")'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise339->id,'user_id' => $user->id]);
        $exercise341 = Exercise::create(['prompt' => 'Create a list so that "chair\ntable\ndesk" is printed.','pre_code' => '','start_code' => 'for i in range(3):'.$EOL.'    print(furniture[i])'.$EOL.'','test_code' => 'test_out("chair\ntable\ndesk")'.$EOL.'test_in("range(3)")'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise340->id,'user_id' => $user->id]);
        $exercise342 = Exercise::create(['prompt' => 'Add one element to the words list so that "Hello my friend" is printed.','pre_code' => '','start_code' => 'words = ["Hello", "my"]'.$EOL.'msg = ""'.$EOL.'for i in range(3):'.$EOL.'    msg = msg + words[i] + " "'.$EOL.'print(msg)'.$EOL.'','test_code' => 'test_out("Hello my friend ")'.$EOL.'test_in("range(3)")'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise341->id,'user_id' => $user->id]);
        $exercise343 = Exercise::create(['prompt' => 'Create a list so that "Hello my friend " is printed. Hint: you"ll create a list of three words. Do not put spaces in the word strings.','pre_code' => '','start_code' => 'msg = ""'.$EOL.'for i in range(3):'.$EOL.'    msg = msg + words[i] + " "'.$EOL.'print(msg)'.$EOL.'','test_code' => 'test_out("Hello my friend ")'.$EOL.'test_in("range(3)")'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise342->id,'user_id' => $user->id]);
        $exercise344 = Exercise::create(['prompt' => 'Create a list so that "Never tell me the odds " is printed.','pre_code' => '','start_code' => 'msg = ""'.$EOL.'for i in range(5):'.$EOL.'    msg = msg + quote[i] + " "'.$EOL.'print(msg)'.$EOL.'','test_code' => 'test_out("Never tell me the odds ")'.$EOL.'test_in("range(5)")'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise343->id,'user_id' => $user->id]);
        $exercise345 = Exercise::create(['prompt' => 'Write a for loop that appends the elements of "quote" to the string as necessary to print "Never tell me the odds ". Your loop should use the "range" function.','pre_code' => '','start_code' => 'quote = [ "Never", "tell", "me", "the", "odds" ]'.$EOL.'msg = ""'.$EOL.'print(msg)'.$EOL.'','test_code' => 'test_out("Never tell me the odds ")'.$EOL.'test_in("range")'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise344->id,'user_id' => $user->id]);
        $exercise346 = Exercise::create(['prompt' => 'Write a for loop that appends the elements of "quote" to the string as necessary to print "It"s not the critic who counts ". Your loop should use the "range" function.','pre_code' => '','start_code' => 'quote = [ "It"s", "not", "the", "critic", "who", "counts" ]'.$EOL.'msg = ""'.$EOL.'print(msg)'.$EOL.'','test_code' => 'test_out("It"s not the critic who counts ")'.$EOL.'test_in("range")'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise345->id,'user_id' => $user->id]);
        $exercise347 = Exercise::create(['prompt' => 'The function getSum() computes the sum of a list of numbers. Add code to return the sum. Hint: add "return sum" at the end of the function.','pre_code' => '','start_code' => 'def getSum(numbers):'.$EOL.'    sum = 0'.$EOL.'    for i in range(len(numbers)):'.$EOL.'        sum += numbers[i]'.$EOL.'print(getSum([1, 2, 3]) == 6)'.$EOL.'print(getSum([1, 3, 5]) == 9)'.$EOL.'','test_code' => 'test_equal(getSum([1, 2, 3]), 6)'.$EOL.'test_equal(getSum([1, 3, 5]), 9)'.$EOL.'test_equal(getSum([1, 3, 6]), 10)'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise346->id,'user_id' => $user->id]);
        $exercise348 = Exercise::create(['prompt' => 'Write a function getSum() that computes the sum of a list of numbers.','pre_code' => '','start_code' => 'def getSum(numbers):'.$EOL.'print(getSum([1, 2, 3]) == 6)'.$EOL.'print(getSum([1, 3, 5]) == 9)'.$EOL.'','test_code' => 'test_equal(getSum([1, 2, 3]), 6)'.$EOL.'test_equal(getSum([1, 3, 5]), 9)'.$EOL.'test_equal(getSum([1, 3, 6]), 10)'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise347->id,'user_id' => $user->id]);
        $exercise349 = Exercise::create(['prompt' => 'Write a function getSum() that computes the sum of a list of numbers.','pre_code' => '','start_code' => 'print(getSum([1, 2, 3]) == 6)'.$EOL.'print(getSum([1, 3, 5]) == 9)'.$EOL.'','test_code' => 'test_equal(getSum([1, 2, 3]), 6)'.$EOL.'test_equal(getSum([1, 3, 5]), 9)'.$EOL.'test_equal(getSum([1, 3, 6]), 10)'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise348->id,'user_id' => $user->id]);
        $exercise350 = Exercise::create(['prompt' => 'The function getAverage() computes the average of a list of numbers. Add code to return the average.','pre_code' => '','start_code' => 'def getSum(numbers):'.$EOL.'    sum = 0'.$EOL.'    for i in range(len(numbers)):'.$EOL.'        sum += numbers[i]'.$EOL.'    return sum'.$EOL.'def getAverage(numbers):'.$EOL.'    count = len(numbers)'.$EOL.'    average = getSum(numbers) / float(count)'.$EOL.'print(getAverage([1, 2, 3]) == 2)'.$EOL.'print(getAverage([1, 3, 5]) == 3)'.$EOL.'print(getAverage([1, 4]) == 2.5)'.$EOL.'','test_code' => 'test_equal(getAverage([1, 2, 3]), 2)'.$EOL.'test_equal(getAverage([1, 3, 5]), 3)'.$EOL.'test_equal(getAverage([1, 3, 8]), 4)'.$EOL.'test_equal(getAverage([1, 4]), 2.5)'.$EOL.'test_equal(getAverage([1, 6]), 3.5)'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise349->id,'user_id' => $user->id]);
        $exercise351 = Exercise::create(['prompt' => 'Write the function getAverage() that computes the average of a list of numbers.','pre_code' => '','start_code' => 'def getSum(numbers):'.$EOL.'    sum = 0'.$EOL.'    for i in range(len(numbers)):'.$EOL.'        sum += numbers[i]'.$EOL.'    return sum'.$EOL.'def getAverage(numbers):'.$EOL.'print(getAverage([1, 2, 3]) == 2)'.$EOL.'print(getAverage([1, 3, 5]) == 3)'.$EOL.'print(getAverage([1, 4]) == 2.5)'.$EOL.'','test_code' => 'test_equal(getAverage([1, 2, 3]), 2)'.$EOL.'test_equal(getAverage([1, 3, 5]), 3)'.$EOL.'test_equal(getAverage([1, 3, 8]), 4)'.$EOL.'test_equal(getAverage([1, 4]), 2.5)'.$EOL.'test_equal(getAverage([1, 6]), 3.5)'.$EOL.'','lesson_id' => $lesson28->id,'previous_exercise_id' => $exercise350->id,'user_id' => $user->id]);
        $project18 = Project::create(['name' => ' Random dots','open_date' => '2018-07-22 0:00:00','close_date' => '2018-07-24 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'Write code that adds a dot of random x location to the screen when the user presses spacebar. So after pressing the spacebar five times, the user should see five dots on the screen. Also, each time a dot is added after a spacebar press, redraw all of the dots on the screen with random colors.'.$EOL.'<p>You will store the x coordinates of the dots in a list. You can have the y coordinates all be zero. When you call t.dot, you can pass the result of randomColor() as the second argument. You will create a global list like this: "xcoords = []". To add a dot"s x coordinate "x" to the list, you will write "xcoords.append(x)".'.$EOL.'<p> After you call t.dot() for each dot, be sure to call t.update() to render the dots to the screen.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => ''.$EOL.'','module_id' => $module14->id,'previous_lesson_id' => $lesson28->id,'user_id' => $user->id]);
        $project19 = Project::create(['name' => ' Initials','open_date' => '2018-07-22 0:00:00','close_date' => '2018-07-24 0:00:00','prompt' => ''.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'def randomColor():'.$EOL.'    return (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))'.$EOL.'t.tracer(0)'.$EOL.'t.speed(1)'.$EOL.'t.up()'.$EOL.'t.hideturtle()'.$EOL.'def addDot():'.$EOL.'    print("add a dot")'.$EOL.'screen.onkey(addDot, "space")'.$EOL.'screen.listen()'.$EOL.'','solution' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'def randomColor():'.$EOL.'    return (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))'.$EOL.'t.tracer(0)'.$EOL.'t.speed(1)'.$EOL.'t.up()'.$EOL.'t.hideturtle()'.$EOL.'dots = []'.$EOL.'def addDot():'.$EOL.'    dots.append(random.randint(-100, 100))'.$EOL.'    for d in dots:'.$EOL.'        t.setpos(d, 0)'.$EOL.'        t.dot(5, randomColor())'.$EOL.'    t.update()'.$EOL.'screen.onkey(addDot, "space")'.$EOL.'screen.listen()'.$EOL.'addDot()'.$EOL.'','module_id' => $module14->id,'previous_lesson_id' => $lesson28->id,'user_id' => $user->id]);
        $module15= Module::create(['name' => 'Appending Lists','concept_id' => $concept10->id,'open_date' => '2018-07-19 0:00:00','previous_module_id' => $module14->id,'user_id' => $user->id]);
        $lesson29= Lesson::create(['name' => 'Lists III - append','module_id' =>  $module15->id,'user_id' => $user->id]);
        $exercise352 = Exercise::create(['prompt' => 'This code appends "Max" to the list. Append one additional name after Max: "Misty".','pre_code' => '','start_code' => 'names = ["Mandy", "Mike"]'.$EOL.'names.append("Max")'.$EOL.'print(names == ["Mandy", "Mike", "Max", "Misty"])'.$EOL.'','test_code' => 'test_equal(names, ["Mandy", "Mike", "Max", "Misty"])'.$EOL.'','lesson_id' => $lesson29->id,'user_id' => $user->id]);
        $exercise353 = Exercise::create(['prompt' => 'This code initializes an empty list. It then appends 5 values to it. Change the code so that it appends 6 values.','pre_code' => '','start_code' => 'def fill():'.$EOL.'    numbers = []'.$EOL.'    for i in range(5):'.$EOL.'        numbers.append(i)'.$EOL.'    return numbers'.$EOL.'print(fill() == [0, 1, 2, 3, 4, 5])'.$EOL.'','test_code' => 'test_equal(fill(), [0, 1, 2, 3, 4, 5])'.$EOL.'','lesson_id' => $lesson29->id,'previous_exercise_id' => $exercise352->id,'user_id' => $user->id]);
        $exercise354 = Exercise::create(['prompt' => 'Write the function fill() so that it returns an array with the values 0 through 4, inclusive.','pre_code' => '','start_code' => 'def fill():'.$EOL.'print(fill() == [0, 1, 2, 3, 4, 5])'.$EOL.'','test_code' => 'test_equal(fill(), [0, 1, 2, 3, 4, 5])'.$EOL.'','lesson_id' => $lesson29->id,'previous_exercise_id' => $exercise353->id,'user_id' => $user->id]);
        $exercise355 = Exercise::create(['prompt' => 'Write the function fill(n) so that it returns an array with the values 0 through n-1, inclusive.','pre_code' => '','start_code' => 'def fill(n):'.$EOL.'print(fill(2) == [0, 1])'.$EOL.'print(fill(6) == [0, 1, 2, 3, 4, 5])'.$EOL.'','test_code' => 'test_equal(fill(3), [0, 1, 2])'.$EOL.'test_equal(fill(6), [0, 1, 2, 3, 4, 5])'.$EOL.'','lesson_id' => $lesson29->id,'previous_exercise_id' => $exercise354->id,'user_id' => $user->id]);
        $exercise356 = Exercise::create(['prompt' => 'The function fillRandom(n) returns an array with n random numbers between 0 and 9, inclusive. Add a return statement to the function.','pre_code' => '','start_code' => 'import random'.$EOL.'def fillRandom(n):'.$EOL.'    numbers = []'.$EOL.'    for i in range(n):'.$EOL.'        numbers.append(random.randint(0, 9))'.$EOL.'# seed the random number generator so we get the same numbers each time'.$EOL.'random.seed(0)'.$EOL.'print(fillRandom(2) == [5, 7])'.$EOL.'random.seed(0)'.$EOL.'print(fillRandom(4) == [5, 7, 6, 5])'.$EOL.'','test_code' => 'random.seed(0)'.$EOL.'test_equal(fillRandom(2), [5, 7])'.$EOL.'random.seed(0)'.$EOL.'test_equal(fillRandom(6), [5, 7, 6, 5, 4, 6])'.$EOL.'','lesson_id' => $lesson29->id,'previous_exercise_id' => $exercise355->id,'user_id' => $user->id]);
        $exercise357 = Exercise::create(['prompt' => 'Write the function fillRandom(n) so that it returns an array with n random numbers between 0 and 9, inclusive.','pre_code' => '','start_code' => 'import random'.$EOL.'def fillRandom(n):'.$EOL.'# seed the random number generator so we get the same numbers each time'.$EOL.'random.seed(0)'.$EOL.'print(fillRandom(2) == [5, 7])'.$EOL.'random.seed(0)'.$EOL.'print(fillRandom(4) == [5, 7, 6, 5])'.$EOL.'','test_code' => 'random.seed(0)'.$EOL.'test_equal(fillRandom(2), [5, 7])'.$EOL.'random.seed(0)'.$EOL.'test_equal(fillRandom(6), [5, 7, 6, 5, 4, 6])'.$EOL.'','lesson_id' => $lesson29->id,'previous_exercise_id' => $exercise356->id,'user_id' => $user->id]);
        $lesson30= Lesson::create(['name' => 'Lists II','module_id' =>  $module15->id,'previous_lesson_id' => $lesson29->id,'user_id' => $user->id]);
        $exercise358 = Exercise::create(['prompt' => 'We can append elements to a list. Add a line of code that appends "5" to the "numbers" list so that your program outputs "[1, 2, 3, 4, 5]".','pre_code' => '','start_code' => 'numbers = [1, 2, 3]'.$EOL.'numbers.append(4)'.$EOL.'# add line here'.$EOL.'print(numbers == [1, 2, 3, 4, 5])'.$EOL.'','test_code' => 'test_equal(numbers, [1, 2, 3, 4, 5])'.$EOL.'','lesson_id' => $lesson30->id,'user_id' => $user->id]);
        $exercise359 = Exercise::create(['prompt' => 'Add a line of code that appends "3" to the "numbers" list so that your program outputs "[1, 2, 3]".','pre_code' => '','start_code' => 'numbers = []'.$EOL.'numbers.append(1)'.$EOL.'numbers.append(2)'.$EOL.'print(numbers == [1, 2, 3])'.$EOL.'','test_code' => 'test_equal(numbers, [1, 2, 3])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise358->id,'user_id' => $user->id]);
        $exercise360 = Exercise::create(['prompt' => 'Add a line of code that appends "6" to the "numbers" list so that your program outputs "[2, 4, 6]".','pre_code' => '','start_code' => 'numbers = []'.$EOL.'numbers.append(2)'.$EOL.'numbers.append(4)'.$EOL.'print(numbers == [2, 4, 6])'.$EOL.'','test_code' => 'test_equal(numbers, [2, 4, 6])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise359->id,'user_id' => $user->id]);
        $exercise361 = Exercise::create(['prompt' => 'Change the argument to "range" so that numbers is equal to [0, 1, 2, 3].','pre_code' => '','start_code' => 'numbers = []'.$EOL.'for i in range(3):'.$EOL.'    numbers.append(i)'.$EOL.'print(numbers == [0, 1, 2, 3])'.$EOL.'','test_code' => 'test_equal(numbers, [0, 1, 2, 3])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise360->id,'user_id' => $user->id]);
        $exercise362 = Exercise::create(['prompt' => 'Write a for loop that appends numbers to the list so that numbers is equal to [0, 1, 2, 3].','pre_code' => '','start_code' => 'numbers = []'.$EOL.'# add loop here'.$EOL.'print(numbers == [0, 1, 2, 3])'.$EOL.'','test_code' => 'test_equal(numbers, [0, 1, 2, 3])'.$EOL.'test_in("range")'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise361->id,'user_id' => $user->id]);
        $exercise363 = Exercise::create(['prompt' => 'Modify the arguments to the range() function so that numbers is equal to [1, 2, 3, 4].','pre_code' => '','start_code' => 'numbers = [1, 2]'.$EOL.'for i in range(3, 4):'.$EOL.'    numbers.append(i)'.$EOL.'print(numbers == [1, 2, 3, 4])'.$EOL.'','test_code' => 'test_equal(numbers, [1, 2, 3, 4])'.$EOL.'test_in("range")'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise362->id,'user_id' => $user->id]);
        $exercise364 = Exercise::create(['prompt' => 'Write a for loop that appends numbers to the list so that numbers is equal to [1, 2, 3, 4].','pre_code' => '','start_code' => 'numbers = [1, 2]'.$EOL.'# add for loop here'.$EOL.'print(numbers == [1, 2, 3, 4])'.$EOL.'','test_code' => 'test_equal(numbers, [1, 2, 3, 4])'.$EOL.'test_in("range")'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise363->id,'user_id' => $user->id]);
        $exercise365 = Exercise::create(['prompt' => 'A function can return a list. Modify "getList" so that True is printed.','pre_code' => '','start_code' => 'def getList():'.$EOL.'    numbers = [1, 2]'.$EOL.'    return numbers'.$EOL.'print(getList() == [1, 2, 3])'.$EOL.'','test_code' => 'test_equal(getList(), [1, 2, 3])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise364->id,'user_id' => $user->id]);
        $exercise366 = Exercise::create(['prompt' => 'Modify the function called "countUp" so that it takes one parameter "n" and returns a list with the first "n" integers in it, starting at 0. For example, "countUp(4)" would return [0, 1, 2, 3]. Hint: add a return statement.','pre_code' => '','start_code' => 'def countUp(n):'.$EOL.'    numbers = []'.$EOL.'    for i in range(n):'.$EOL.'        numbers.append(i)'.$EOL.'print(countUp(4) == [0, 1, 2, 3])'.$EOL.'print(countUp(7) == [0, 1, 2, 3, 4, 5, 6])'.$EOL.'','test_code' => 'test_equal(countUp(4), [0, 1, 2, 3])'.$EOL.'test_equal(countUp(7), [0, 1, 2, 3, 4, 5, 6])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise365->id,'user_id' => $user->id]);
        $exercise367 = Exercise::create(['prompt' => 'Write a function called "countUp" that takes one parameter "n" and returns a list with the first "n" integers in it, starting at 0. For example, "countUp(4)" would return [0, 1, 2, 3].','pre_code' => '','start_code' => 'def countUp(n):'.$EOL.'print(countUp(4) == [0, 1, 2, 3])'.$EOL.'print(countUp(7) == [0, 1, 2, 3, 4, 5, 6])'.$EOL.'','test_code' => 'test_equal(countUp(4), [0, 1, 2, 3])'.$EOL.'test_equal(countUp(7), [0, 1, 2, 3, 4, 5, 6])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise366->id,'user_id' => $user->id]);
        $exercise368 = Exercise::create(['prompt' => 'Modify the function called "countUp" so that it takes one parameter "n" and returns a list with the first "n" integers in it, starting at 1. Hint: change the second argument to the range() function call.','pre_code' => '','start_code' => 'def countUp(n):'.$EOL.'    numbers = []'.$EOL.'    for i in range(1, n):'.$EOL.'        numbers.append(i)'.$EOL.'    return numbers'.$EOL.'print(countUp(4) == [1, 2, 3, 4])'.$EOL.'print(countUp(7) == [1, 2, 3, 4, 5, 6, 7])'.$EOL.'','test_code' => 'test_equal(countUp(4), [1, 2, 3, 4])'.$EOL.'test_equal(countUp(7), [1, 2, 3, 4, 5, 6, 7])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise367->id,'user_id' => $user->id]);
        $exercise369 = Exercise::create(['prompt' => 'Write the function called "countUp" so that it takes one parameter "n" and returns a list with the first "n" integers in it, starting at 1.','pre_code' => '','start_code' => 'def countUp(n):'.$EOL.'print(countUp(4) == [1, 2, 3, 4])'.$EOL.'print(countUp(7) == [1, 2, 3, 4, 5, 6, 7])'.$EOL.'','test_code' => 'test_equal(countUp(4), [1, 2, 3, 4])'.$EOL.'test_equal(countUp(7), [1, 2, 3, 4, 5, 6, 7])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise368->id,'user_id' => $user->id]);
        $exercise370 = Exercise::create(['prompt' => 'Write a function called "countDown" that takes one parameter "n" and returns a list with the first "n" integers in it, starting at n, listed in reverse order. Hint: the third argument to your call to "range" will be -1.','pre_code' => '','start_code' => 'def countDown(n):'.$EOL.'print(countDown(4) == [4, 3, 2, 1])'.$EOL.'','test_code' => 'test_equal(countDown(4), [4, 3, 2, 1])'.$EOL.'test_equal(countDown(6), [6, 5, 4, 3, 2, 1])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise369->id,'user_id' => $user->id]);
        $exercise371 = Exercise::create(['prompt' => 'Write a function called "getEvens" that takes one parameter "n" and returns a list with the first "n" even integers in it, starting at 2. Hint: the third argument to your range() call will be 2.','pre_code' => '','start_code' => 'print(getEvens(4) == [2, 4, 6, 8])'.$EOL.'','test_code' => 'test_equal(getEvens(5), [2, 4, 6, 8, 10])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise370->id,'user_id' => $user->id]);
        $exercise372 = Exercise::create(['prompt' => 'Write a function called "getMultiplesOf5" that takes one parameter "n" and returns a list with the first "n" multiples of 5, starting at 5.','pre_code' => '','start_code' => 'print(getMultiplesOf5(4) == [5, 10, 15, 20])'.$EOL.'','test_code' => 'test_equal(getMultiplesOf5(3), [5, 10, 15])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise371->id,'user_id' => $user->id]);
        $exercise373 = Exercise::create(['prompt' => 'The function addToList(numbers, n) takes a list called numbers and appends 0 through n-2 to the list. Modify the function so that it adds 0 through n-1.','pre_code' => '','start_code' => 'def addToList(numbers, n):'.$EOL.'    for i in range(0, n-1):'.$EOL.'        numbers.append(i)'.$EOL.'    return numbers'.$EOL.'n = [1, 2]'.$EOL.'print(addToList(n, 3) == [1, 2, 0, 1, 2])'.$EOL.'n = [9, 3, 1, 5]'.$EOL.'print(addToList(n, 3) == [9, 3, 1, 5, 0, 1, 2])'.$EOL.'n = []'.$EOL.'print(addToList(n, 3) == [0, 1, 2])'.$EOL.'','test_code' => 'n = [1, 2]'.$EOL.'test_equal(addToList(n, 1), [1, 2, 0])'.$EOL.'n = [9, 3, 1, 5]'.$EOL.'test_equal(addToList(n, 3), [9, 3, 1, 5, 0, 1, 2])'.$EOL.'n = []'.$EOL.'test_equal(addToList(n, 3), [0, 1, 2])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise372->id,'user_id' => $user->id]);
        $exercise374 = Exercise::create(['prompt' => 'Write the function addToList(numbers, n) so that it takes a list called numbers and appends 0 through n-1 to the list.','pre_code' => '','start_code' => 'def addToList(numbers, n):'.$EOL.'n = [1, 2]'.$EOL.'print(addToList(n, 3) == [1, 2, 0, 1, 2])'.$EOL.'n = [9, 3, 1, 5]'.$EOL.'print(addToList(n, 3) == [9, 3, 1, 5, 0, 1, 2])'.$EOL.'n = []'.$EOL.'print(addToList(n, 3) == [0, 1, 2])'.$EOL.'','test_code' => 'n = [1, 2]'.$EOL.'test_equal(addToList(n, 1), [1, 2, 0])'.$EOL.'n = [9, 3, 1, 5]'.$EOL.'test_equal(addToList(n, 3), [9, 3, 1, 5, 0, 1, 2])'.$EOL.'n = []'.$EOL.'test_equal(addToList(n, 3), [0, 1, 2])'.$EOL.'','lesson_id' => $lesson30->id,'previous_exercise_id' => $exercise373->id,'user_id' => $user->id]);
        $project20 = Project::create(['name' => ' Histogram','open_date' => '2018-07-23 0:00:00','close_date' => '2018-07-25 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'Write code that generates numbers, updates a histogram of the numbers at each new number, and prints out the number that has occurred the most times. See <a href="https://youtu.be/Fj6r4HBlCUg" target=_blank>this video</a> for a demo.'.$EOL.'<p><p>A histogram keeps track of the number of occurrences of a given number. Each time you generate a random number you should increment that number"s place in the histogram. See the TODO comments for places you should add code. Add a number (and update the histogram) when the user presses the spacebar.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '# Name'.$EOL.'# Date'.$EOL.'# Project: Random Distribution'.$EOL.'# Purpose: To use lists to show the distribution of numbers that random'.$EOL.'#   generates'.$EOL.'# Concepts Needed: creating lists, indexing lists, turtle.tracer(),'.$EOL.'#   turtle.update(), turtle.clear(), turtle.write(), global'.$EOL.'import turtle'.$EOL.'import random'.$EOL.'s = turtle.Screen()'.$EOL.'t = turtle.Turtle()'.$EOL.'t.hideturtle()'.$EOL.'t.speed(100)'.$EOL.'t.tracer(0)'.$EOL.'t.update()'.$EOL.'#Constants for how wide each bar should be and how tall each segment of the bar will be'.$EOL.'WIDTH = 15'.$EOL.'HEIGHT = 15'.$EOL.'XSTART = -185'.$EOL.'#This will be used to draw a portion of the bar graph'.$EOL.'def drawBar(x, value):'.$EOL.'    if value > 0:'.$EOL.'        y = -100'.$EOL.'        #Move turtle to the bottom left corner of the bar to be drawn'.$EOL.'        t.penup()'.$EOL.'        t.setpos(x, -100)'.$EOL.'        t.pendown()'.$EOL.'        #Draw the bar by going to the top-left, top-right, then bottom-right corners of the bar'.$EOL.'        t.setpos(x, y + (HEIGHT * value))'.$EOL.'        t.setpos(x + WIDTH, y + (HEIGHT * value))'.$EOL.'        t.setpos(x + WIDTH, y)'.$EOL.'#This will be used to get a number to add to the list'.$EOL.'def getRandomNumber():'.$EOL.'    return random.randint(0, 9)'.$EOL.'#This will draw the x and y axis of the graph and label them'.$EOL.'def initializeGraph():'.$EOL.'    #Draw a horizontal line for the x-axis'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-190, -100)'.$EOL.'    t.pendown()'.$EOL.'    t.setpos(190, -100)'.$EOL.'    t.penup()'.$EOL.'    #Label the x-axis'.$EOL.'    x = -180'.$EOL.'    for i in range(10):'.$EOL.'        t.setpos(x, -110)'.$EOL.'        t.write(str(i))'.$EOL.'        x += WIDTH + 5'.$EOL.'    #Draw a vertical line for the y-axis'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-190, -100)'.$EOL.'    t.pendown()'.$EOL.'    t.setpos(-190, 190)'.$EOL.'    t.penup()'.$EOL.'    #Label the y-axis'.$EOL.'    y = -105'.$EOL.'    for j in range(10):'.$EOL.'        t.setpos(-200, y)'.$EOL.'        t.write(str(j))'.$EOL.'        y += HEIGHT'.$EOL.'    t.update()'.$EOL.'# TODO Initialize a list variable called histogram to have all zeros.'.$EOL.'# This will be called every time space is pressed'.$EOL.'# It will generate an increasing amount of random numbers and draw them on a graph '.$EOL.'def updateHistogram():'.$EOL.'    # TODO Uncomment this line after you"ve created the histogram variable'.$EOL.'    # global histogram'.$EOL.'    #Erase previous graph and initialize a new one'.$EOL.'    t.clear()'.$EOL.'    initializeGraph()'.$EOL.'    # TODO update the histogram variable'.$EOL.'    # TODO draw the bars in the bar graph. This should be done in a loop. The'.$EOL.'    # code below is intended to get you started.'.$EOL.'    xpos = XSTART'.$EOL.'    drawBar(xpos, 3)'.$EOL.'    xpos += WIDTH + 5'.$EOL.'    drawBar(xpos, 8)'.$EOL.'    xpos += WIDTH + 5'.$EOL.'    t.update()'.$EOL.'    # TODO Call a function (created by you) to print the maximum value in the list'.$EOL.'s.onkey(updateHistogram, "space")'.$EOL.'s.listen()'.$EOL.'','solution' => '# Name'.$EOL.'# Date'.$EOL.'# Project: Random Distribution'.$EOL.'# Purpose: To use lists to show the distribution of numbers that random'.$EOL.'#   generates'.$EOL.'# Concepts Needed: creating lists, indexing lists, turtle.tracer(),'.$EOL.'#   turtle.update(), turtle.clear(), turtle.write(), global'.$EOL.'import turtle'.$EOL.'import random'.$EOL.'s = turtle.Screen()'.$EOL.'t = turtle.Turtle()'.$EOL.'t.hideturtle()'.$EOL.'t.speed(100)'.$EOL.'t.tracer(0)'.$EOL.'t.update()'.$EOL.'#Constants for how wide each bar should be and how tall each segment of the bar will be'.$EOL.'WIDTH = 15'.$EOL.'HEIGHT = 15'.$EOL.'XSTART = -185'.$EOL.'#This will be used to draw a portion of the bar graph'.$EOL.'def drawBar(x, value):'.$EOL.'    if value > 0:'.$EOL.'        y = -100'.$EOL.'        #Move turtle to the bottom left corner of the bar to be drawn'.$EOL.'        t.penup()'.$EOL.'        t.setpos(x, -100)'.$EOL.'        t.pendown()'.$EOL.'        #Draw the bar by going to the top-left, top-right, then bottom-right corners of the bar'.$EOL.'        t.setpos(x, y + (HEIGHT * value))'.$EOL.'        t.setpos(x + WIDTH, y + (HEIGHT * value))'.$EOL.'        t.setpos(x + WIDTH, y)'.$EOL.'#This will be used to get a number to add to the list'.$EOL.'def getRandomNumber():'.$EOL.'    return random.randint(0, 9)'.$EOL.'#This will draw the x and y axis of the graph and label them'.$EOL.'def initializeGraph():'.$EOL.'    #Draw a horizontal line for the x-axis'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-190, -100)'.$EOL.'    t.pendown()'.$EOL.'    t.setpos(190, -100)'.$EOL.'    t.penup()'.$EOL.'    #Label the x-axis'.$EOL.'    x = -180'.$EOL.'    for i in range(10):'.$EOL.'        t.setpos(x, -110)'.$EOL.'        t.write(str(i))'.$EOL.'        x += WIDTH + 5'.$EOL.'    #Draw a vertical line for the y-axis'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-190, -100)'.$EOL.'    t.pendown()'.$EOL.'    t.setpos(-190, 190)'.$EOL.'    t.penup()'.$EOL.'    #Label the y-axis'.$EOL.'    y = -105'.$EOL.'    for j in range(10):'.$EOL.'        t.setpos(-200, y)'.$EOL.'        t.write(str(j))'.$EOL.'        y += HEIGHT'.$EOL.'    t.update()'.$EOL.'# This is a global list variable to keep track of how many times the numbers 0-9'.$EOL.'# are generated. For example, histogram = [1, 0, 3] means that 0 was chosen 1 time,'.$EOL.'# and 2 was chosen 3 times.'.$EOL.'histogram = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]'.$EOL.'def printMax():'.$EOL.'    ma = max(histogram)'.$EOL.'    ma_i = histogram.index(ma)'.$EOL.'    print("The value selected the most times is {} (selected {} times)".format(ma_i, ma))'.$EOL.'# This will be called every time space is pressed'.$EOL.'# It will generate an increasing amount of random numbers and draw them on a graph '.$EOL.'def updateHistogram():'.$EOL.'    global histogram'.$EOL.'    #Erase previous graph and initialize a new one'.$EOL.'    t.clear()'.$EOL.'    initializeGraph()'.$EOL.'    # TODO update the histogram variable'.$EOL.'    num = random.randint(0, 9)'.$EOL.'    histogram[num] += 1'.$EOL.'    xpos = XSTART'.$EOL.'    #Draw a bar for each number in the list'.$EOL.'    for j in histogram:'.$EOL.'        drawBar(xpos, j)'.$EOL.'        xpos += WIDTH + 5'.$EOL.'    t.update()'.$EOL.'    printMax()'.$EOL.'s.onkey(updateHistogram, "space")'.$EOL.'s.listen()'.$EOL.'','module_id' => $module15->id,'previous_lesson_id' => $lesson30->id,'user_id' => $user->id]);
        $module16= Module::create(['name' => 'Splicing Lists','concept_id' => $concept10->id,'open_date' => '2018-07-20 0:00:00','previous_module_id' => $module15->id,'user_id' => $user->id]);
        $lesson31= Lesson::create(['name' => 'list slicing','module_id' =>  $module16->id,'user_id' => $user->id]);
        $exercise375 = Exercise::create(['prompt' => 'Change the 0 to a 1 in getSubset().','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[0:]'.$EOL.'numbers = [0, 1, 2, 3, 4, 5]'.$EOL.'print(getSubset(numbers) == [1, 2, 3, 4, 5])'.$EOL.'','test_code' => 'test_equal(getSubset(numbers), [1, 2, 3, 4, 5])'.$EOL.'','lesson_id' => $lesson31->id,'user_id' => $user->id]);
        $exercise376 = Exercise::create(['prompt' => 'In Python we can use "a[i:]" list "slicing" syntax which means "return a new list that starts at index i and includes all following elements. Change the getSubset function so that True is printed.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[0:]'.$EOL.'numbers = [4, 8, 2, 5]'.$EOL.'print(getSubset(numbers) == [8, 2, 5])'.$EOL.'','test_code' => 'test_equal(getSubset(numbers), [8, 2, 5])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise375->id,'user_id' => $user->id]);
        $exercise377 = Exercise::create(['prompt' => 'Change the getSubset function so that True is printed. Hint: change the 0 to a 2.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[0:]'.$EOL.'numbers = [4, 8, 2, 5]'.$EOL.'print(getSubset(numbers) == [2, 5])'.$EOL.'','test_code' => 'test_equal(getSubset(numbers), [2, 5])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise376->id,'user_id' => $user->id]);
        $exercise378 = Exercise::create(['prompt' => 'Complete the getSubset function so that True is printed. getSubset should return the list minus the first two elements.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'numbers = [4, 8, 2, 5]'.$EOL.'print(getSubset(numbers) == [2, 5])'.$EOL.'','test_code' => 'test_equal(getSubset(numbers), [2, 5])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise377->id,'user_id' => $user->id]);
        $exercise379 = Exercise::create(['prompt' => 'Complete the getSubset function so that True is printed. getSubset should return the list minus the first four elements.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'numbers = [4, 8, 2, 5, 18, 1, -3]'.$EOL.'print(getSubset(numbers) == [18, 1, -3])'.$EOL.'','test_code' => 'test_equal(getSubset(numbers), [18, 1, -3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise378->id,'user_id' => $user->id]);
        $exercise380 = Exercise::create(['prompt' => 'List slicing can return a piece in the middle of the list. The following code returns the list from index 1 to index 4, not including 4. Change the 4 to a 3.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[1:4]'.$EOL.'numbers = [4, 8, 2, 5, 18, 1, -3]'.$EOL.'print(getSubset(numbers) == [8, 2])'.$EOL.'','test_code' => 'test_equal(getSubset(numbers), [8, 2])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise379->id,'user_id' => $user->id]);
        $exercise381 = Exercise::create(['prompt' => 'Modify getSubset so that True is printed.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[1:4]'.$EOL.'print(getSubset([4, 8, 2, 5, 18]) == [8, 2])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [2, -2])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2, 5, 18]), [8, 2])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [2, -2])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise380->id,'user_id' => $user->id]);
        $exercise382 = Exercise::create(['prompt' => 'Modify getSubset so that True is printed.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[1:3]'.$EOL.'print(getSubset([4, 8, 2, 5, 18]) == [8, 2, 5])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [2, -2, 3])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2, 5, 18]), [8, 2, 5])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [2, -2, 3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise381->id,'user_id' => $user->id]);
        $exercise383 = Exercise::create(['prompt' => 'Modify getSubset so that True is printed. Hint: change the 1, which is the starting index.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[1:4]'.$EOL.'print(getSubset([4, 8, 2, 5, 18]) == [2, 5])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [-2, 3])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2, 5, 18]), [2, 5])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [-2, 3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise382->id,'user_id' => $user->id]);
        $exercise384 = Exercise::create(['prompt' => 'Modify getSubset so that True is printed.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[1:4]'.$EOL.'print(getSubset([4, 8, 2, 5, 18]) == [2, 5])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [-2, 3])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2, 5, 18]), [2, 5])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [-2, 3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise383->id,'user_id' => $user->id]);
        $exercise385 = Exercise::create(['prompt' => 'Complete getSubset so that True is printed. Use list slicing notation (e.g. numbers[2:4])','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2, 5, 18]) == [2, 5])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [-2, 3])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2, 5, 18]), [2, 5])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [-2, 3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise384->id,'user_id' => $user->id]);
        $exercise386 = Exercise::create(['prompt' => 'Complete getSubset so that True is printed. Use list slicing notation.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2, 5, 18]) == [5, 18])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [3, 5])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2, 5, 18]), [5, 18])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [3, 5])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise385->id,'user_id' => $user->id]);
        $exercise387 = Exercise::create(['prompt' => 'Complete getSubset so that True is printed. Use list slicing notation. Hint: start at 0.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2, 5, 18]) == [4])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2, 5, 18]), [4])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise386->id,'user_id' => $user->id]);
        $exercise388 = Exercise::create(['prompt' => 'Complete getSubset so that True is printed. Use list slicing notation. Hint: don"t include a second number, but end the slicing notation with a :.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [8, 2])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [2, -2, 3, 5, 9])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [8, 2])'.$EOL.'test_equal(getSubset([4, 8, 2, 5, 18]), [8, 2, 5, 18])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [2, -2, 3, 5, 9])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise387->id,'user_id' => $user->id]);
        $exercise389 = Exercise::create(['prompt' => 'Complete getSubset so that True is printed. Use list slicing notation.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [8, 2])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [2, -2, 3, 5, 9])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [8, 2])'.$EOL.'test_equal(getSubset([4, 8, 2, 5, 18]), [8, 2, 5, 18])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [2, -2, 3, 5, 9])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise388->id,'user_id' => $user->id]);
        $exercise390 = Exercise::create(['prompt' => 'Complete getSubset so that True is printed. Use list slicing notation.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [2])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [-2, 3, 5, 9])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [2])'.$EOL.'test_equal(getSubset([4, 8, 2, 5, 18]), [2, 5, 18])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [-2, 3, 5, 9])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise389->id,'user_id' => $user->id]);
        $exercise391 = Exercise::create(['prompt' => 'Complete getSubset so that True is printed. Use list slicing notation. Hint: either don"t include a first number, or start at 0.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [4, 8])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, 2])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4, 8])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, 2])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise390->id,'user_id' => $user->id]);
        $exercise392 = Exercise::create(['prompt' => 'Complete getSubset so that True is printed. Use list slicing notation.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [4, 8])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, 2])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4, 8])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, 2])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise391->id,'user_id' => $user->id]);
        $exercise393 = Exercise::create(['prompt' => '-1 is an index that means "the last element", -2 is "the second-to-last element" and so on. Modify getSubset so that it returns all but the last two elements. Hint: change -1 to -2.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[:-1]'.$EOL.'print(getSubset([4, 8, 2]) == [4])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, 2, -2, 3])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, 2, -2, 3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise392->id,'user_id' => $user->id]);
        $exercise394 = Exercise::create(['prompt' => 'Modify getSubset so that it returns all but the last two elements.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[:-1]'.$EOL.'print(getSubset([4, 8, 2]) == [4])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, 2, -2, 3])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, 2, -2, 3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise393->id,'user_id' => $user->id]);
        $exercise395 = Exercise::create(['prompt' => 'Complete getSubset so that it returns all but the last two elements.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [4])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, 2, -2, 3])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, 2, -2, 3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise394->id,'user_id' => $user->id]);
        $exercise396 = Exercise::create(['prompt' => 'Complete getSubset so that it returns all but the last element.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [4, 8])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, 2, -2, 3, 5])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4, 8])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, 2, -2, 3, 5])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise395->id,'user_id' => $user->id]);
        $exercise397 = Exercise::create(['prompt' => 'Complete getSubset so that it returns all but the first and last elements. Hint: start at 1, end at -1.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [8])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [2, -2, 3, 5])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [8])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [2, -2, 3, 5])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise396->id,'user_id' => $user->id]);
        $exercise398 = Exercise::create(['prompt' => 'Complete getSubset so that it returns all but the first element and the last two elements.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [2, -2, 3])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [2, -2, 3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise397->id,'user_id' => $user->id]);
        $exercise399 = Exercise::create(['prompt' => 'List slicing can have a third value which is the step. For example, the following code returns every other element from 0 to 2, inclusive. Change it so it returns every other element from 0 to 3, inclusive. Hint: change the 3 to a 4.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'    return numbers[0:3:2]'.$EOL.'print(getSubset([4, 8, 2]) == [4, 2])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, -2])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4, 2])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, -2])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise398->id,'user_id' => $user->id]);
        $exercise400 = Exercise::create(['prompt' => 'Complete getSubset so it returns every other element from 0 to 3, inclusive. Hint: see the previous exercise.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [4, 2])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, -2])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4, 2])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, -2])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise399->id,'user_id' => $user->id]);
        $exercise401 = Exercise::create(['prompt' => 'Complete getSubset so it returns every other element starting from element 1. Hint: your answer will be numbers[1::2].','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [8])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [2, 3, 9])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [8])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [2, 3, 9])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise400->id,'user_id' => $user->id]);
        $exercise402 = Exercise::create(['prompt' => 'Complete getSubset so it returns every other element starting from element 1.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [8])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [2, 3, 9])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [8])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [2, 3, 9])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise401->id,'user_id' => $user->id]);
        $exercise403 = Exercise::create(['prompt' => 'Complete getSubset so it returns every third element starting from element 0. Hint: your answer will be similar to the previous exercise, except the starting element will be different and the increment number will be 3 instead of 2.','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [4])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, 3])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, 3])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise402->id,'user_id' => $user->id]);
        $exercise404 = Exercise::create(['prompt' => 'Complete getSubset so it returns every other element. Hint: you will not have a starting index or an ending index. Your answer will be numbers[::2].','pre_code' => '','start_code' => 'def getSubset(numbers):'.$EOL.'print(getSubset([4, 8, 2]) == [4, 2])'.$EOL.'print(getSubset([8, 2, -2, 3, 5, 9]) == [8, -2, 5])'.$EOL.'','test_code' => 'test_equal(getSubset([4, 8, 2]), [4, 2])'.$EOL.'test_equal(getSubset([8, 2, -2, 3, 5, 9]), [8, -2, 5])'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise403->id,'user_id' => $user->id]);
        $exercise405 = Exercise::create(['prompt' => 'We can use list slicing on strings. Modify getSubset so that True values are printed. Hint: change the 0 to a 1.','pre_code' => '','start_code' => 'def getSubset(msg):'.$EOL.'    return msg[0:]'.$EOL.'print(getSubset("Cats") == "ats")'.$EOL.'print(getSubset("Dogs") == "ogs")'.$EOL.'','test_code' => 'test_equal(getSubset("Cats"), "ats")'.$EOL.'test_equal(getSubset("Dogs"), "ogs")'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise404->id,'user_id' => $user->id]);
        $exercise406 = Exercise::create(['prompt' => 'Complete getSubset so that True values are printed.','pre_code' => '','start_code' => 'def getSubset(msg):'.$EOL.'print(getSubset("Cats") == "ats")'.$EOL.'print(getSubset("Dogs") == "ogs")'.$EOL.'','test_code' => 'test_equal(getSubset("Cats"), "ats")'.$EOL.'test_equal(getSubset("Dogs"), "ogs")'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise405->id,'user_id' => $user->id]);
        $exercise407 = Exercise::create(['prompt' => 'Complete getSubset so that True values are printed.','pre_code' => '','start_code' => 'def getSubset(msg):'.$EOL.'print(getSubset("Cats") == "ts")'.$EOL.'print(getSubset("Dogs") == "gs")'.$EOL.'','test_code' => 'test_equal(getSubset("Cats"), "ts")'.$EOL.'test_equal(getSubset("Dogs"), "gs")'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise406->id,'user_id' => $user->id]);
        $exercise408 = Exercise::create(['prompt' => 'Complete getSubset so that True values are printed. Hint: start at 0, end at -1.','pre_code' => '','start_code' => 'def getSubset(msg):'.$EOL.'print(getSubset("Cats") == "Cat")'.$EOL.'print(getSubset("Dogs") == "Dog")'.$EOL.'print(getSubset("Horses") == "Horse")'.$EOL.'','test_code' => 'test_equal(getSubset("Cats"), "Cat")'.$EOL.'test_equal(getSubset("Dogs"), "Dog")'.$EOL.'test_equal(getSubset("Horses"), "Horse")'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise407->id,'user_id' => $user->id]);
        $exercise409 = Exercise::create(['prompt' => 'Complete getSubset so that every other character is returned. Hint: omit the start and end values and have the step value be two. That is, [::2].','pre_code' => '','start_code' => 'def getSubset(msg):'.$EOL.'print(getSubset("abcdef") == "ace")'.$EOL.'print(getSubset("The quick brown fox") == "Teqikbonfx")'.$EOL.'','test_code' => 'test_equal(getSubset("abcdef"), "ace")'.$EOL.'test_equal(getSubset("The quick brown fox"), "Teqikbonfx")'.$EOL.'test_equal(getSubset("The quick brown fox j"), "Teqikbonfxj")'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise408->id,'user_id' => $user->id]);
        $exercise410 = Exercise::create(['prompt' => 'We can use a list slicing trick to reverse a string, that is, omit the start and end values and have a step of -1, that is, [::-1]. Complete reverseString().','pre_code' => '','start_code' => 'def reverseString(msg):'.$EOL.'print(reverseString("abcdef") == "fedcba")'.$EOL.'print(reverseString("The quick brown fox") == "xof nworb kciuq ehT")'.$EOL.'','test_code' => 'test_equal(reverseString("abcdef"), "fedcba")'.$EOL.'test_equal(reverseString("The quick brown fox"), "xof nworb kciuq ehT")'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise409->id,'user_id' => $user->id]);
        $exercise411 = Exercise::create(['prompt' => 'Complete reverseString().','pre_code' => '','start_code' => 'def reverseString(msg):'.$EOL.'print(reverseString("abcdef") == "fedcba")'.$EOL.'print(reverseString("The quick brown fox") == "xof nworb kciuq ehT")'.$EOL.'','test_code' => 'test_equal(reverseString("abcdef"), "fedcba")'.$EOL.'test_equal(reverseString("The quick brown fox"), "xof nworb kciuq ehT")'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise410->id,'user_id' => $user->id]);
        $exercise412 = Exercise::create(['prompt' => 'A palindrome is a word spelled the same backwards as it is forwards. For example, "mom", "hannah", and "racecar" are all palindromes. Complete the function isPalindrome. Hint: use reverseString to get a reversed version of the string. Then compare the original version to the reversed version and return True if they are the same.','pre_code' => '','start_code' => 'def reverseString(msg):'.$EOL.'    return msg[::-1]'.$EOL.'def isPalindrome(msg):'.$EOL.'print(isPalindrome("abcdef") == False)'.$EOL.'print(isPalindrome("mom") == True)'.$EOL.'print(isPalindrome("hannah") == True)'.$EOL.'print(isPalindrome("racecar") == True)'.$EOL.'print(isPalindrome("platinum") == False)'.$EOL.'','test_code' => 'test_equal(isPalindrome("abcdef"), False)'.$EOL.'test_equal(isPalindrome("hannah"), True)'.$EOL.'test_equal(isPalindrome("racecar"), True)'.$EOL.'test_equal(isPalindrome("platinum"), False)'.$EOL.'test_equal(isPalindrome("gold"), False)'.$EOL.'test_equal(isPalindrome("dad"), True)'.$EOL.'','lesson_id' => $lesson31->id,'previous_exercise_id' => $exercise411->id,'user_id' => $user->id]);
        $project21 = Project::create(['name' => ' Random dots II','open_date' => '2018-07-24 0:00:00','close_date' => '2018-07-26 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'Write code that adds a dot of random (x,y) location to the screen when the user presses spacebar. Each dot should have a random color that stays consistent while the program runs. So if a dot is initially drawn as red it must remain red. Further, when the user presses spacebar a new dot appears and all dots move a small amount in a random direction. A given dot should only move in one direction. See <a href="https://youtu.be/UTOy4WMvlKg" target=_blank>this video</a> for a demonstration.'.$EOL.'<p><p>You will have a number of lists: a list for the x coordinates and one for the y coordinates; one for the color of each dot; a list for the x velocity and one for the y velocity. Each dot has a velocity (vx, vy). When a new dot is added, update each dot"s position by adding the velocity to the position. For example, x += vx. Initialize velocities randomly.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'def randomColor():'.$EOL.'    return (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))'.$EOL.'t.tracer(0)'.$EOL.'t.speed(1)'.$EOL.'t.up()'.$EOL.'t.hideturtle()'.$EOL.'clear = True'.$EOL.'def addDot():'.$EOL.'    if clear:'.$EOL.'        t.clear()'.$EOL.'    # TODO draw dots here'.$EOL.'    print("Adding dot")'.$EOL.'    t.update()'.$EOL.'def c():'.$EOL.'    global clear'.$EOL.'    clear = not clear'.$EOL.'screen.onkey(addDot, "space")'.$EOL.'screen.onkey(c, "c")'.$EOL.'screen.listen()'.$EOL.'addDot()'.$EOL.'','solution' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'def randomColor():'.$EOL.'    return (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))'.$EOL.'t.tracer(0)'.$EOL.'t.speed(1)'.$EOL.'t.up()'.$EOL.'t.hideturtle()'.$EOL.'dotx = []'.$EOL.'doty = []'.$EOL.'dotc = []'.$EOL.'vx = []'.$EOL.'vy = []'.$EOL.'clear = True'.$EOL.'def addDot():'.$EOL.'    if clear:'.$EOL.'        t.clear()'.$EOL.'    dotx.append(random.randint(-100, 100))'.$EOL.'    doty.append(random.randint(-100, 100))'.$EOL.'    dotc.append(randomColor())'.$EOL.'    vx.append(random.randint(-2, 2))'.$EOL.'    vy.append(random.randint(-2, 2))'.$EOL.'    for i in range(len(dotx)):'.$EOL.'        x = dotx[i]'.$EOL.'        y = doty[i]'.$EOL.'        dotx[i] += vx[i]'.$EOL.'        doty[i] += vy[i]'.$EOL.'        t.setpos(x, y)'.$EOL.'        t.dot(5, dotc[i])'.$EOL.'    t.update()'.$EOL.'def c():'.$EOL.'    global clear'.$EOL.'    clear = not clear'.$EOL.'screen.onkey(addDot, "space")'.$EOL.'screen.onkey(c, "c")'.$EOL.'screen.listen()'.$EOL.'addDot()'.$EOL.'','module_id' => $module16->id,'previous_lesson_id' => $lesson31->id,'user_id' => $user->id]);
        $concept11= Concept::create(['name' => 'Object Oriented Programming','course_id' => $course->id,'previous_concept_id' => $concept10->id,'user_id' => $user->id]);
        $module17= Module::create(['name' => 'Intro To Objects','concept_id' => $concept11->id,'open_date' => '2018-07-24 0:00:00','user_id' => $user->id]);
        $lesson32= Lesson::create(['name' => 'Objects I','module_id' =>  $module17->id,'user_id' => $user->id]);
        $exercise413 = Exercise::create(['prompt' => 'This code creates a Person. Change the variable for the Person object to be named "sally". Hint: change fred to sally.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a person!")'.$EOL.'fred = Person()'.$EOL.'','test_code' => 'test_equal(type(sally), Person)'.$EOL.'','lesson_id' => $lesson32->id,'user_id' => $user->id]);
        $exercise414 = Exercise::create(['prompt' => 'In this code a Person is a "class". Run the code. Notice that one Person is created. Add another line at the end of the program: "sally = Person()". Note that two Persons are now created. Note: your code should create two people, fred and sally. You should have two lines at the end of the program: "fred = Person()" and "sally = Person()".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a person!")'.$EOL.'fred = Person()'.$EOL.'','test_code' => 'test_equal(type(fred), Person)'.$EOL.'test_equal(type(sally), Person)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise413->id,'user_id' => $user->id]);
        $exercise415 = Exercise::create(['prompt' => 'Create two additional people: sally and julie. Hint: add two additional lines declaring two more variables and setting each to "Person()".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a person!")'.$EOL.'fred = Person()'.$EOL.'','test_code' => 'test_equal(type(fred), Person)'.$EOL.'test_equal(type(sally), Person)'.$EOL.'test_equal(type(julie), Person)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise414->id,'user_id' => $user->id]);
        $exercise416 = Exercise::create(['prompt' => 'The Building class is "instantiated" or created into an Object when "__init__" is called. Change the text that is printed when a building is created to say "Creating a building!". Hint: change "person" to "building".','pre_code' => '','start_code' => 'class Building:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a person!")'.$EOL.'empire = Building()'.$EOL.'','test_code' => 'test_out("Creating a building!")'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise415->id,'user_id' => $user->id]);
        $exercise417 = Exercise::create(['prompt' => 'This code tries to instantiate a Person. It gives an error because the program doesn"t know what a Person is. Change the code so that a building is instantiated. Hint: Change "Person" to "Building".','pre_code' => '','start_code' => 'class Building:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a building!")'.$EOL.'empire = Person()'.$EOL.'','test_code' => 'test_equal(type(empire), Building)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise416->id,'user_id' => $user->id]);
        $exercise418 = Exercise::create(['prompt' => 'Instantiate a Building and assign it to a variable "empire". Hint: add "empire = Building()" to the end of your code.','pre_code' => '','start_code' => 'class Building:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a building!")'.$EOL.'','test_code' => 'test_equal(type(empire), Building)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise417->id,'user_id' => $user->id]);
        $exercise419 = Exercise::create(['prompt' => 'Instantiate a Person and assign it to a variable "sally". Hint: add "sally = Person()".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a person!")'.$EOL.'','test_code' => 'test_equal(type(sally), Person)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise418->id,'user_id' => $user->id]);
        $exercise420 = Exercise::create(['prompt' => 'Instantiate a Building and assign it to a variable "empire".','pre_code' => '','start_code' => 'class Building:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a building!")'.$EOL.'','test_code' => 'test_equal(type(empire), Building)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise419->id,'user_id' => $user->id]);
        $exercise421 = Exercise::create(['prompt' => 'Instantiate a Person and assign it to a variable "sally".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a person!")'.$EOL.'','test_code' => 'test_equal(type(sally), Person)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise420->id,'user_id' => $user->id]);
        $exercise422 = Exercise::create(['prompt' => 'This code tries to instantiate a Textbook, which hasn"t been defined. Change the code so that a Building is instantiated.','pre_code' => '','start_code' => 'class Building:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a building!")'.$EOL.'empire = Textbook()'.$EOL.'print(type(empire) == Building)'.$EOL.'','test_code' => 'test_equal(type(empire), Building)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise421->id,'user_id' => $user->id]);
        $exercise423 = Exercise::create(['prompt' => 'Instantiate a Building. Call the variable studentUnion. Hint: Add "studentUnion = Building()','pre_code' => '','start_code' => 'class Building:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a building!")'.$EOL.'','test_code' => 'test_equal(type(studentUnion), Building)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise422->id,'user_id' => $user->id]);
        $exercise424 = Exercise::create(['prompt' => 'Instantiate a Person. Call the variable fred.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a person!")'.$EOL.'','test_code' => 'test_equal(type(fred), Person)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise423->id,'user_id' => $user->id]);
        $exercise425 = Exercise::create(['prompt' => 'Instantiate a Hyena. Call the variable harry.','pre_code' => '','start_code' => 'class Hyena:'.$EOL.'    def __init__(self):'.$EOL.'        print("Creating a hyena!")'.$EOL.'','test_code' => 'test_equal(type(harry), Hyena)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise424->id,'user_id' => $user->id]);
        $exercise426 = Exercise::create(['prompt' => 'The __init__ function in a class is called a "constructor". In the constructor for Person, print "Creating a person!". Heads up: the print statement must be indented eight spaces. See comment. Hint: Replace the TODO comment with "print("Creating a person!")"','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'        # TODO: print statement goes here'.$EOL.'fred = Person()'.$EOL.'','test_code' => 'test_out("Creating a person!")'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise425->id,'user_id' => $user->id]);
        $exercise427 = Exercise::create(['prompt' => 'In the constructor for class Person, print "Creating a person!".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'fred = Person()'.$EOL.'','test_code' => 'test_out("Creating a person!")'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise426->id,'user_id' => $user->id]);
        $exercise428 = Exercise::create(['prompt' => 'Add a constructor to class Person that prints "Creating a person!". The constructor is always called "__init__" and the first parameter is always "self". The reason will become clear later. Make sure you have TWO underscores on each side of "__init__". See the previous exercise if you need help.','pre_code' => '','start_code' => 'class Person:'.$EOL.'fred = Person()'.$EOL.'','test_code' => 'test_out("Creating a person!")'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise427->id,'user_id' => $user->id]);
        $exercise429 = Exercise::create(['prompt' => 'Add a constructor to class Pig that prints "Creating a pig!".','pre_code' => '','start_code' => 'class Pig:'.$EOL.'charlotte = Pig()'.$EOL.'','test_code' => 'test_out("Creating a pig!")'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise428->id,'user_id' => $user->id]);
        $exercise430 = Exercise::create(['prompt' => 'Add a constructor to class School that prints "Creating a school!".','pre_code' => '','start_code' => 'class School:'.$EOL.'isu = School()'.$EOL.'','test_code' => 'test_out("Creating a school!")'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise429->id,'user_id' => $user->id]);
        $exercise431 = Exercise::create(['prompt' => 'This constructor for Person takes one additional parameter: a name. Change the name of the person to Jack. You should change both the name passed into the constructor and the variable name. Hint: change every instance of "[Ff]red" to "[Jj]ack". Heads up: the variable name should start with a lower-case letter. Hint: replace the fred instantiation with "jack = Person("Jack")".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        print("Creating " + name)'.$EOL.'fred = Person("Fred")'.$EOL.'','test_code' => 'test_equal(type(jack), Person)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise430->id,'user_id' => $user->id]);
        $exercise432 = Exercise::create(['prompt' => 'Add a constructor that takes a name as a parameter. The constructor should print "Creating " followed by the name. Heads up: don"t forget that "self" must be the first parameter in the construcor. Heads up: remember that init needs two underscores on each side of it. Hint: see the previous exercise for help.','pre_code' => '','start_code' => 'class Person:'.$EOL.'fred = Person("Fred")'.$EOL.'','test_code' => 'test_equal(type(fred), Person)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise431->id,'user_id' => $user->id]);
        $exercise433 = Exercise::create(['prompt' => 'Create a class called Person. It should have a constructor that takes a name as a parameter. The constructor should print "Creating " followed by the name.','pre_code' => '','start_code' => 'fred = Person("Fred")'.$EOL.'print(type(fred) == Person)'.$EOL.'','test_code' => 'test_equal(type(fred), Person)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise432->id,'user_id' => $user->id]);
        $exercise434 = Exercise::create(['prompt' => 'Create a class called Dog. It should have a constructor that takes a name as a parameter. The constructor should print "Creating " followed by the name.','pre_code' => '','start_code' => 'fluffy = Dog("Fluffy")'.$EOL.'print(type(fluffy) == Dog)'.$EOL.'','test_code' => 'test_equal(type(fluffy), Dog)'.$EOL.'','lesson_id' => $lesson32->id,'previous_exercise_id' => $exercise433->id,'user_id' => $user->id]);
        $project22 = Project::create(['name' => ' Animals','open_date' => '2018-07-28 0:00:00','close_date' => '2018-07-30 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'Write at least three classes for three different animals. The constructor of each class should take two parameters: self and name. The constructor should print the name of the animal and what the animal says. For example, if the animal is a dog, and we pass in "Spot" to the constructor, the constructor would print out "Spot says bark!"'.$EOL.'<p><p>As mentioned, you will have at least three different animal classes. You will prompt the user for the animal type and then prompt for the name. Instantiate the animal, which should print out the message. See <a href="https://youtu.be/sEoOMAij4Io" target=_blank>this video</a> for a demonstration.'.$EOL.'<p><p>Ideas for wow factors include making more animals, looping, asking the user for multiple animals, and storing the names of all animals in a list.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '','solution' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        print(name + " says bark!")'.$EOL.'class Cat:'.$EOL.'    def __init__(self, name):'.$EOL.'        print(name + " says meow!")'.$EOL.'class Cow:'.$EOL.'    def __init__(self, name):'.$EOL.'        print(name + " says moo!")'.$EOL.'t = input("Enter the animal type: (d)og, (c)at, co(w)")'.$EOL.'name = input("Name: ")'.$EOL.'if t == "d":'.$EOL.'    animal = Dog(name)'.$EOL.'elif t == "c":'.$EOL.'    animal = Cat(name)'.$EOL.'elif t == "w":'.$EOL.'    animal = Cow(name)'.$EOL.'','module_id' => $module17->id,'previous_lesson_id' => $lesson32->id,'user_id' => $user->id]);
        $project23 = Project::create(['name' => ' Cards','open_date' => '2018-07-28 0:00:00','close_date' => '2018-07-30 0:00:00','prompt' => ''.$EOL.'<div> See the TODO comments inlined.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'def createCards():'.$EOL.'    suits = ["C", "S", "H", "D" ]'.$EOL.'    numbers = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "T", "J", "Q", "K"]'.$EOL.'    # TODO: create an array called cards with all 52 cards. You must use loops over'.$EOL.'    # suits and numbers and also use string concatenation (e.g. numbers[1] + suits[3])'.$EOL.'    # The first four cards will look like cards[:4] == ["AC", "2C", "3C", "4C"].'.$EOL.'    cards = []'.$EOL.'    return cards'.$EOL.'cards = createCards()'.$EOL.'# TODO: Create two hands of 5 cards each picked randomly from the deck. You will'.$EOL.'# use random.randint(0, 51). Display the two hands of cards using print statements.'.$EOL.'# Then display a player"s score. A score is computed as follows: Suits are worth the'.$EOL.'# following: Clubs=0, Spades=1, Diamonds=2, Hearts=3. Cards are worth:'.$EOL.'# Ace=1, 2=2, 3=3,..., T=10, J=11, Q=12, K=13. A single card is worth its suit '.$EOL.'# score plus its card score. So "3C" is worth 3+0=3. "TD"=10+2=12. "QH"=12+3=15. '.$EOL.'# Print each players score in addition to their cards. Reminder: given a card'.$EOL.'# card = "KH" you can get the individual characters like this:'.$EOL.'# card[0] == "K"'.$EOL.'# card[1] == "H"'.$EOL.'','solution' => ''.$EOL.'','module_id' => $module17->id,'previous_lesson_id' => $lesson32->id,'user_id' => $user->id]);
        $lesson33= Lesson::create(['name' => 'Objects II - data attributes','module_id' =>  $module17->id,'previous_lesson_id' => $lesson32->id,'user_id' => $user->id]);
        $exercise435 = Exercise::create(['prompt' => 'The Person class in this code has an "data attribute" that belongs to an instantiation of a Person. There is one Person object in this code: person, which has a name of Fred. Change the name to Jill.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'person = Person("Fred")'.$EOL.'print(person.name)'.$EOL.'','test_code' => 'test_equal(person.name, "Jill")'.$EOL.'','lesson_id' => $lesson33->id,'user_id' => $user->id]);
        $exercise436 = Exercise::create(['prompt' => 'Print person"s name. Hint: see the previous exercise.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'person = Person("Fred")'.$EOL.'','test_code' => 'test_out("Fred")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise435->id,'user_id' => $user->id]);
        $exercise437 = Exercise::create(['prompt' => 'Print person"s name.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'person = Person("Jill")'.$EOL.'','test_code' => 'test_out("Jill")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise436->id,'user_id' => $user->id]);
        $exercise438 = Exercise::create(['prompt' => 'Create a person with the name of "Jill". Use the variable name "person". Hint: it"s just like the previous exercise.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'# add code here'.$EOL.'print(person.name == "Jill")'.$EOL.'','test_code' => 'test_equal(person.name, "Jill")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise437->id,'user_id' => $user->id]);
        $exercise439 = Exercise::create(['prompt' => 'Create a person with the name of "Freda". Use the variable name "person".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'# add code here'.$EOL.'print(person.name == "Freda")'.$EOL.'','test_code' => 'test_equal(person.name, "Freda")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise438->id,'user_id' => $user->id]);
        $exercise440 = Exercise::create(['prompt' => 'Create a person with the name of "Hallie". Use the variable name "hal". Hint: add "hal = Person("Hallie")"','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'# add code here'.$EOL.'print(hal.name == "Hallie")'.$EOL.'','test_code' => 'test_equal(hal.name, "Hallie")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise439->id,'user_id' => $user->id]);
        $exercise441 = Exercise::create(['prompt' => 'Create a person with the name of "Blake". Use the variable name "dad". Hint: add "dad = Person("Blake")"','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'# add code here'.$EOL.'print(dad.name == "Blake")'.$EOL.'','test_code' => 'test_equal(dad.name, "Blake")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise440->id,'user_id' => $user->id]);
        $exercise442 = Exercise::create(['prompt' => 'Create a person with the name of "June". Use the variable name "mom".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'# add code here'.$EOL.'print(mom.name == "June")'.$EOL.'','test_code' => 'test_equal(mom.name, "June")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise441->id,'user_id' => $user->id]);
        $exercise443 = Exercise::create(['prompt' => 'Create two people: "dad" with the name of "Blake" and "mom" with the name of "June".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'# add code here'.$EOL.'print(dad.name == "Blake")'.$EOL.'print(mom.name == "June")'.$EOL.'','test_code' => 'test_equal(dad.name, "Blake")'.$EOL.'test_equal(mom.name, "June")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise442->id,'user_id' => $user->id]);
        $exercise444 = Exercise::create(['prompt' => 'The name for dad is changed to "Alex". Modify it so it is changed to "Alexi".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'dad = Person("Blake")'.$EOL.'mom = Person("June")'.$EOL.'# change the code below'.$EOL.'dad.name = "Alex"'.$EOL.'print(dad.name == "Alexi")'.$EOL.'','test_code' => 'test_equal(dad.name, "Alexi")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise443->id,'user_id' => $user->id]);
        $exercise445 = Exercise::create(['prompt' => 'Change the name for mom to be "Lily". Hint: add "mom.name = "Lily"".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'# do not modify this code'.$EOL.'dad = Person("Blake")'.$EOL.'mom = Person("June")'.$EOL.'# add your code here'.$EOL.'print(mom.name == "Lily")'.$EOL.'','test_code' => 'test_in("June")'.$EOL.'test_equal(mom.name, "Lily")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise444->id,'user_id' => $user->id]);
        $exercise446 = Exercise::create(['prompt' => 'Change the name for sister to be "Rachel".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'# do not modify this code'.$EOL.'sister = Person("Claire")'.$EOL.'# add your code here'.$EOL.'print(sister.name == "Rachel")'.$EOL.'','test_code' => 'test_in("Claire")'.$EOL.'test_equal(sister.name, "Rachel")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise445->id,'user_id' => $user->id]);
        $exercise447 = Exercise::create(['prompt' => 'The function named "__init__" is called a constructor and is used to initialize attributes of an object. Add "self.name = name" to the constructor to initialize the Person"s name. Hint: see the constructor in the previous exercise.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'sister = Person("Claire")'.$EOL.'print(sister.name == "Claire")'.$EOL.'','test_code' => 'test_equal(sister.name, "Claire")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise446->id,'user_id' => $user->id]);
        $exercise448 = Exercise::create(['prompt' => 'Add code to the constructor to add the name attribute to the object.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'sister = Person("Claire")'.$EOL.'print(sister.name == "Claire")'.$EOL.'','test_code' => 'test_equal(sister.name, "Claire")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise447->id,'user_id' => $user->id]);
        $exercise449 = Exercise::create(['prompt' => 'The constructor has a bug. We need to add a "name" parameter to the function. Hint: the parameter list in the constructor should read "(self, name)".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'        self.name = name'.$EOL.'sister = Person("Claire")'.$EOL.'print(sister.name == "Claire")'.$EOL.'','test_code' => 'test_equal(sister.name, "Claire")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise448->id,'user_id' => $user->id]);
        $exercise450 = Exercise::create(['prompt' => 'The constructor has a bug. We need to set "self.name" instead of just name. Hint: change "name = name" to "self.name = name".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        name = name'.$EOL.'sister = Person("Claire")'.$EOL.'print(sister.name == "Claire")'.$EOL.'','test_code' => 'test_equal(sister.name, "Claire")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise449->id,'user_id' => $user->id]);
        $exercise451 = Exercise::create(['prompt' => 'The constructor has a bug. The argument list in the constructor should start with "self". Hint: the argument list for the constructor should read "(self, name)".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(name):'.$EOL.'        self.name = name'.$EOL.'sister = Person("Claire")'.$EOL.'print(sister.name == "Claire")'.$EOL.'','test_code' => 'test_equal(sister.name, "Claire")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise450->id,'user_id' => $user->id]);
        $exercise452 = Exercise::create(['prompt' => 'The constructor has a bug. Fix it.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        name = name'.$EOL.'sister = Person("Claire")'.$EOL.'print(sister.name == "Claire")'.$EOL.'','test_code' => 'test_equal(sister.name, "Claire")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise451->id,'user_id' => $user->id]);
        $exercise453 = Exercise::create(['prompt' => 'The constructor has a bug. Fix it.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self):'.$EOL.'        self.name = name'.$EOL.'sister = Person("Claire")'.$EOL.'print(sister.name == "Claire")'.$EOL.'','test_code' => 'test_equal(sister.name, "Claire")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise452->id,'user_id' => $user->id]);
        $exercise454 = Exercise::create(['prompt' => 'The constructor has a bug. Fix it.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(name):'.$EOL.'        self.name = name'.$EOL.'sister = Person("Claire")'.$EOL.'print(sister.name == "Claire")'.$EOL.'','test_code' => 'test_equal(sister.name, "Claire")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise453->id,'user_id' => $user->id]);
        $exercise455 = Exercise::create(['prompt' => 'The constructor has a bug. Fix it.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'sister = Person("Claire")'.$EOL.'print(sister.name == "Claire")'.$EOL.'','test_code' => 'test_equal(sister.name, "Claire")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise454->id,'user_id' => $user->id]);
        $exercise456 = Exercise::create(['prompt' => 'Claire just had a birthday. Change her age to 14.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'sister = Person("Claire", 13)'.$EOL.'print(sister.age == 14)'.$EOL.'','test_code' => 'test_equal(sister.age, 14)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise455->id,'user_id' => $user->id]);
        $exercise457 = Exercise::create(['prompt' => 'Add a brother object. His name should be "Edmund" and his age is 12. Hint: add "brother = Person("Edmund", 12)".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'sister = Person("Claire", 14)'.$EOL.'# add code here'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise456->id,'user_id' => $user->id]);
        $exercise458 = Exercise::create(['prompt' => 'Add the necessary code to the constructor. Hint: add "self.age = age".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'sister = Person("Claire", 14)'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise457->id,'user_id' => $user->id]);
        $exercise459 = Exercise::create(['prompt' => 'Add the necessary code to the constructor.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'sister = Person("Claire", 14)'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise458->id,'user_id' => $user->id]);
        $exercise460 = Exercise::create(['prompt' => 'Fix the bug in the constructor. Hint: "age = age" should be "self.age = age".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'        age = age'.$EOL.'sister = Person("Claire", 14)'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise459->id,'user_id' => $user->id]);
        $exercise461 = Exercise::create(['prompt' => 'Fix the bug in the constructor.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        name = name'.$EOL.'        self.age = age'.$EOL.'sister = Person("Claire", 14)'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise460->id,'user_id' => $user->id]);
        $exercise462 = Exercise::create(['prompt' => 'Fix the bug in the constructor. Hint: add "age" to the parameter list in the constructor.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'sister = Person("Claire", 14)'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise461->id,'user_id' => $user->id]);
        $exercise463 = Exercise::create(['prompt' => 'Fix the bug in the constructor.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, age):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'sister = Person("Claire", 14)'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise462->id,'user_id' => $user->id]);
        $exercise464 = Exercise::create(['prompt' => 'Fix the bug in the constructor. Hint: age and name are switched.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, age, name):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'sister = Person("Claire", 14)'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise463->id,'user_id' => $user->id]);
        $exercise465 = Exercise::create(['prompt' => 'Fix the bug in the constructor. Hint: age is not being set.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'sister = Person("Claire", 14)'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise464->id,'user_id' => $user->id]);
        $exercise466 = Exercise::create(['prompt' => 'Fix the bug in the constructor.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.age = age'.$EOL.'sister = Person("Claire", 14)'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise465->id,'user_id' => $user->id]);
        $exercise467 = Exercise::create(['prompt' => 'Fix the bug in the constructor. Hint: age is not being set. You also need to add age as a parameter to the constructor.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'brother = Person("Edmund", 12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise466->id,'user_id' => $user->id]);
        $exercise468 = Exercise::create(['prompt' => 'Fix the bug. Hint: You need to pass 12 when you construct brother. That is: "brother = Person("Edmund", 12)".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'brother = Person("Edmund")'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise467->id,'user_id' => $user->id]);
        $exercise469 = Exercise::create(['prompt' => 'Add age. Hint: age is not being set. You also need to add age as a parameter to the constructor. You also need to pass 12 when you construct brother.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'brother = Person("Edmund")'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise468->id,'user_id' => $user->id]);
        $exercise470 = Exercise::create(['prompt' => 'Add name. You must do three things: add name as a parameter in the constructor, set name in the constructor, and pass a name when you create brother.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, age):'.$EOL.'        self.age = age'.$EOL.'brother = Person(12)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise469->id,'user_id' => $user->id]);
        $exercise471 = Exercise::create(['prompt' => 'Create the Person class.','pre_code' => '','start_code' => 'brother = Person("Edmund", 12)'.$EOL.'sister = Person("Jackie", 14)'.$EOL.'print(brother.name == "Edmund")'.$EOL.'print(brother.age == 12)'.$EOL.'print(sister.name == "Jackie")'.$EOL.'print(sister.age == 14)'.$EOL.'','test_code' => 'test_equal(brother.name, "Edmund")'.$EOL.'test_equal(brother.age, 12)'.$EOL.'test_equal(sister.name, "Jackie")'.$EOL.'test_equal(sister.age, 14)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise470->id,'user_id' => $user->id]);
        $exercise472 = Exercise::create(['prompt' => 'Add a line in the constructor that sets the breed data attribute. Hint: "self.breed = breed".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name, breed):'.$EOL.'        self.name = name'.$EOL.'dog = Dog("Fluffy", "Poodle")'.$EOL.'print(dog.name)'.$EOL.'print(dog.breed)'.$EOL.'','test_code' => 'test_equal(dog.name, "Fluffy")'.$EOL.'test_equal(dog.breed, "Poodle")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise471->id,'user_id' => $user->id]);
        $exercise473 = Exercise::create(['prompt' => 'Add a constructor that takes a name and breed. Assign their values to data attributes of the same name. Hint: see the previous exercise.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'dog = Dog("Fluffy", "Poodle")'.$EOL.'print(dog.name)'.$EOL.'print(dog.breed)'.$EOL.'','test_code' => 'test_equal(dog.name, "Fluffy")'.$EOL.'test_equal(dog.breed, "Poodle")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise472->id,'user_id' => $user->id]);
        $exercise474 = Exercise::create(['prompt' => 'In the constructor, set the value of "a" to an data attribute named "name" and the value of "b" to an data attribute named "breed". Note that the names of data attributes do not need to be the same as the parameters in the constructor. Hint: "self.name = a" and "self.breed = b"','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, a, b):'.$EOL.'dog = Dog("Fluffy", "Poodle")'.$EOL.'print(dog.name == "Fluffy")'.$EOL.'print(dog.breed == "Poodle")'.$EOL.'','test_code' => 'test_equal(dog.name, "Fluffy")'.$EOL.'test_equal(dog.breed, "Poodle")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise473->id,'user_id' => $user->id]);
        $exercise475 = Exercise::create(['prompt' => 'In the constructor, set the value of "a" to an data attribute named "name" and the value of "b" to an data attribute named "breed".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, a, b):'.$EOL.'dog = Dog("Fluffy", "Poodle")'.$EOL.'print(dog.name == "Fluffy")'.$EOL.'print(dog.breed == "Poodle")'.$EOL.'','test_code' => 'test_equal(dog.name, "Fluffy")'.$EOL.'test_equal(dog.breed, "Poodle")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise474->id,'user_id' => $user->id]);
        $exercise476 = Exercise::create(['prompt' => 'Rename the data attribute "breed" to "dogType". Do NOT change the name of the parameter "breed" to the constructor. Hint: you will need to change "self.breed"','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name, breed):'.$EOL.'        self.name = name'.$EOL.'        self.breed = breed'.$EOL.'dog = Dog("Fluffy", "Poodle")'.$EOL.'print(dog.name == "Fluffy")'.$EOL.'print(dog.dogType == "Poodle")'.$EOL.'','test_code' => 'test_equal(dog.name, "Fluffy")'.$EOL.'test_equal(dog.dogType, "Poodle")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise475->id,'user_id' => $user->id]);
        $exercise477 = Exercise::create(['prompt' => 'Note that we can change the value of data attributes after the object has been created. In this code, the name is later changed to "Foo Foo". Add code to later change the breed to "Lab". Hint: you will add a line that looks like "dog.breed = "Lab"".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name, breed):'.$EOL.'        self.name = name'.$EOL.'        self.breed = breed'.$EOL.'dog = Dog("Fluffy", "Poodle")'.$EOL.'dog.name = "Foo Foo"'.$EOL.'# add code here'.$EOL.'print(dog.name == "Foo Foo")'.$EOL.'print(dog.breed == "Lab")'.$EOL.'','test_code' => 'test_in("Dog("Fluffy", "Poodle")")'.$EOL.'test_equal(dog.name, "Foo Foo")'.$EOL.'test_equal(dog.breed, "Lab")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise476->id,'user_id' => $user->id]);
        $exercise478 = Exercise::create(['prompt' => 'After the dog object is constructed, change the name to "Spot" and the breed to "Beagle".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name, breed):'.$EOL.'        self.name = name'.$EOL.'        self.breed = breed'.$EOL.'dog = Dog("Fluffy", "Poodle")'.$EOL.'# add code here'.$EOL.'print(dog.name == "Spot")'.$EOL.'print(dog.breed == "Beagle")'.$EOL.'','test_code' => 'test_in("Dog("Fluffy", "Poodle")")'.$EOL.'test_equal(dog.name, "Spot")'.$EOL.'test_equal(dog.breed, "Beagle")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise477->id,'user_id' => $user->id]);
        $exercise479 = Exercise::create(['prompt' => 'Add a constructor that takes a name and breed as parameters and assigns their values to data attributes of the same name.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'dog = Dog("Fluffy", "Poodle")'.$EOL.'print(dog.name)'.$EOL.'print(dog.breed)'.$EOL.'','test_code' => 'test_equal(dog.name, "Fluffy")'.$EOL.'test_equal(dog.breed, "Poodle")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise478->id,'user_id' => $user->id]);
        $exercise480 = Exercise::create(['prompt' => 'Create a class called Dog. It should have a constructor that takes a name and a breed and data attributes of the same name. After the class definition, instantiate an object of type Dog. Call the variable name dog and give it a name of "Fluffy" and a breed of "Poodle".','pre_code' => '','start_code' => '# add code here'.$EOL.'print(dog.name == "Fluffy")'.$EOL.'print(dog.breed == "Poodle")'.$EOL.'','test_code' => 'test_equal(dog.name, "Fluffy")'.$EOL.'test_equal(dog.breed, "Poodle")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise479->id,'user_id' => $user->id]);
        $exercise481 = Exercise::create(['prompt' => 'Create a class called Person. It should have a single data attribute called "name". Add code so that the output of your program should be "True\nTrue".','pre_code' => '','start_code' => 'print(person1.name == "Jack")'.$EOL.'print(person2.name == "Jill")'.$EOL.'','test_code' => 'test_equal(person1.name, "Jack")'.$EOL.'test_equal(person2.name, "Jill")'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise480->id,'user_id' => $user->id]);
        $exercise482 = Exercise::create(['prompt' => 'Create a class called Point. It should have four data attributes: x, y, vx and vy.','pre_code' => '','start_code' => 'p = Point(0, 0, 10, -10)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'print(p.vx == 10)'.$EOL.'print(p.vy == -10)'.$EOL.'','test_code' => 'test_equal(p.x, 0)'.$EOL.'test_equal(p.y, 0)'.$EOL.'test_equal(p.vx, 10)'.$EOL.'test_equal(p.vy, -10)'.$EOL.'','lesson_id' => $lesson33->id,'previous_exercise_id' => $exercise481->id,'user_id' => $user->id]);
        $lesson34= Lesson::create(['name' => 'Objects III - lists of objects','module_id' =>  $module17->id,'previous_lesson_id' => $lesson33->id,'user_id' => $user->id]);
        $exercise483 = Exercise::create(['prompt' => 'This code instantiates 3 people. Add a fourth person: Joe, age 82.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'fred = Person("Fred", 12)'.$EOL.'freda = Person("Freda", 21)'.$EOL.'josephine = Person("Josephine", 28)'.$EOL.'# add code here'.$EOL.'people = [ fred, freda, josephine, joe ]'.$EOL.'for person in people:'.$EOL.'    print(person.name)'.$EOL.'print(people[3].name == "Joe")'.$EOL.'print(people[3].age == 82)'.$EOL.'','test_code' => 'test_equal(people[3].name, "Joe")'.$EOL.'test_equal(people[3].age, 82)'.$EOL.'','lesson_id' => $lesson34->id,'user_id' => $user->id]);
        $exercise484 = Exercise::create(['prompt' => 'Add joe at the end of the list. Hint: see previous exercise.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'fred = Person("Fred", 12)'.$EOL.'freda = Person("Freda", 21)'.$EOL.'josephine = Person("Josephine", 28)'.$EOL.'joe = Person("Joe", 82)'.$EOL.'# add Joe on the line below'.$EOL.'people = [ fred, freda, josephine ]'.$EOL.'for person in people:'.$EOL.'    print(person.name)'.$EOL.'print(people[3].name == "Joe")'.$EOL.'print(people[3].age == 82)'.$EOL.'','test_code' => 'test_equal(people[3].name, "Joe")'.$EOL.'test_equal(people[3].age, 82)'.$EOL.'','lesson_id' => $lesson34->id,'previous_exercise_id' => $exercise483->id,'user_id' => $user->id]);
        $exercise485 = Exercise::create(['prompt' => 'Instantiate a Person joe and add him to the end of the list.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name, age):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'fred = Person("Fred", 12)'.$EOL.'freda = Person("Freda", 21)'.$EOL.'josephine = Person("Josephine", 28)'.$EOL.'people = [ fred, freda, josephine ]'.$EOL.'for person in people:'.$EOL.'    print(person.name)'.$EOL.'print(people[3].name == "Joe")'.$EOL.'print(people[3].age == 82)'.$EOL.'','test_code' => 'test_equal(people[3].name, "Joe")'.$EOL.'test_equal(people[3].age, 82)'.$EOL.'','lesson_id' => $lesson34->id,'previous_exercise_id' => $exercise484->id,'user_id' => $user->id]);
        $exercise486 = Exercise::create(['prompt' => 'Change the parameter to range() so that 3 points are instantiated and added to the list.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'points = []'.$EOL.'for i in range(2):'.$EOL.'    points.append(Point(0, 0))'.$EOL.'print(len(points) == 3)'.$EOL.'print(points[0].x == 0)'.$EOL.'print(points[2].y == 0)'.$EOL.'','test_code' => 'test_equal(len(points), 3)'.$EOL.'test_equal(points[0].x, 0)'.$EOL.'test_equal(points[2].y, 0)'.$EOL.'','lesson_id' => $lesson34->id,'previous_exercise_id' => $exercise485->id,'user_id' => $user->id]);
        $exercise487 = Exercise::create(['prompt' => 'Change the value passed into the constructor of Point so that every y coordinate is i*2. Hint: "Point(i, i*2)".','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'points = []'.$EOL.'for i in range(3):'.$EOL.'    points.append(Point(i, 0))'.$EOL.'print(points[0].x == 0)'.$EOL.'print(points[1].x == 1)'.$EOL.'print(points[2].x == 2)'.$EOL.'print(points[0].y == 0)'.$EOL.'print(points[1].y == 2)'.$EOL.'print(points[2].y == 4)'.$EOL.'','test_code' => 'test_equal(points[0].x, 0)'.$EOL.'test_equal(points[1].x, 1)'.$EOL.'test_equal(points[2].x, 2)'.$EOL.'test_equal(points[0].y, 0)'.$EOL.'test_equal(points[1].y, 2)'.$EOL.'test_equal(points[2].y, 4)'.$EOL.'','lesson_id' => $lesson34->id,'previous_exercise_id' => $exercise486->id,'user_id' => $user->id]);
        $exercise488 = Exercise::create(['prompt' => 'The loop sums the x and y values of the points. Fix the bug by initializing sumy to 0 instead of 10.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'points = [ Point(3, 4), Point(4, 5), Point(7, 8) ]'.$EOL.'sumx = 0'.$EOL.'sumy = 10'.$EOL.'for point in points:'.$EOL.'    sumx += point.x'.$EOL.'    sumy += point.y'.$EOL.'print(sumx == 14)'.$EOL.'print(sumy == 17)'.$EOL.'','test_code' => 'test_equal(sumx, 14)'.$EOL.'test_equal(sumy, 17)'.$EOL.'','lesson_id' => $lesson34->id,'previous_exercise_id' => $exercise487->id,'user_id' => $user->id]);
        $exercise489 = Exercise::create(['prompt' => 'The loop sums the x values of the points. Add code to sum the y values. Hint: see the previous exercise.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'points = [ Point(3, 4), Point(4, 5), Point(7, 8) ]'.$EOL.'sumx = 0'.$EOL.'sumy = 0'.$EOL.'for point in points:'.$EOL.'    sumx += point.x'.$EOL.'print(sumx == 14)'.$EOL.'print(sumy == 17)'.$EOL.'','test_code' => 'test_equal(sumx, 14)'.$EOL.'test_equal(sumy, 17)'.$EOL.'','lesson_id' => $lesson34->id,'previous_exercise_id' => $exercise488->id,'user_id' => $user->id]);
        $exercise490 = Exercise::create(['prompt' => 'Add a loop that sums the x and y values of the points.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'points = [ Point(3, 4), Point(4, 5), Point(7, 8) ]'.$EOL.'sumx = 0'.$EOL.'sumy = 0'.$EOL.'# add loop here'.$EOL.'print(sumx == 14)'.$EOL.'print(sumy == 17)'.$EOL.'','test_code' => 'test_equal(sumx, 14)'.$EOL.'test_equal(sumy, 17)'.$EOL.'','lesson_id' => $lesson34->id,'previous_exercise_id' => $exercise489->id,'user_id' => $user->id]);
        $exercise491 = Exercise::create(['prompt' => 'Each point now has a direction vector. The loop adds the vector to the point, simulation motion of the points. Initialize dy to 4 in the constructor. Hint: "self.dy = 4".','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'        self.dx = 3'.$EOL.'        self.dy = 3'.$EOL.'points = [ Point(3, 4), Point(4, 5), Point(7, 8) ]'.$EOL.'for point in points:'.$EOL.'    point.x += point.dx'.$EOL.'    point.y += point.dy'.$EOL.'print(points[0].x == 6)'.$EOL.'print(points[0].y == 8)'.$EOL.'print(points[1].x == 7)'.$EOL.'print(points[1].y == 9)'.$EOL.'','test_code' => 'test_equal(points[0].x, 6)'.$EOL.'test_equal(points[0].y, 8)'.$EOL.'test_equal(points[1].x, 7)'.$EOL.'test_equal(points[1].y, 9)'.$EOL.'','lesson_id' => $lesson34->id,'previous_exercise_id' => $exercise490->id,'user_id' => $user->id]);
        $exercise492 = Exercise::create(['prompt' => 'Write a loop that sums the x and y values of the points.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'        self.dx = 3'.$EOL.'        self.dy = 4'.$EOL.'points = [ Point(3, 4), Point(4, 5), Point(7, 8) ]'.$EOL.'# write loop here'.$EOL.'print(points[0].x == 6)'.$EOL.'print(points[0].y == 8)'.$EOL.'print(points[1].x == 7)'.$EOL.'print(points[1].y == 9)'.$EOL.'','test_code' => 'test_equal(points[0].x, 6)'.$EOL.'test_equal(points[0].y, 8)'.$EOL.'test_equal(points[1].x, 7)'.$EOL.'test_equal(points[1].y, 9)'.$EOL.'','lesson_id' => $lesson34->id,'previous_exercise_id' => $exercise491->id,'user_id' => $user->id]);
        $project24 = Project::create(['name' => ' Exploding dots','open_date' => '2018-07-28 0:00:00','close_date' => '2018-07-30 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'Write code that shows an "explosion" of dots when the user clicks on the screen. If the user clicks on, say, x=50 and y=100, you should initialize at least 10 dots to that position. Then animate each dot flying in a random direction. See <a href="https://youtu.be/DMNf86m4-Eo" target=_blank>this video</a>. You must create a Dot class that stores at least the position and velocity of the dot.'.$EOL.'<p><p>Ideas for wow factor including adding different colors, changing sizes, moving dots in something other than straight lines, implosions, etc.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'t.up()'.$EOL.'# TODO: put Dot class here'.$EOL.'dots = []'.$EOL.'def animate():'.$EOL.'    t.clear()'.$EOL.'    # TODO: update positions and draw dots here'.$EOL.'    t.update() '.$EOL.'    screen.ontimer(animate, 100)'.$EOL.'def click(x, y):'.$EOL.'    global dots'.$EOL.'    # TODO: re-initialize the dots list. To create a new, empty list: dots = []'.$EOL.'    print("Re-initializing dots")'.$EOL.'screen.onclick(click)'.$EOL.'animate()'.$EOL.'','solution' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'t.up()'.$EOL.'class Dot:'.$EOL.'    def __init__(self, x, y, vx, vy):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'        self.vx = vx'.$EOL.'        self.vy = vy'.$EOL.'    def move(self):'.$EOL.'        self.x += self.vx'.$EOL.'        self.y += self.vy'.$EOL.'    def draw(self):'.$EOL.'        t.setpos(self.x, self.y)'.$EOL.'        t.dot(5, "green")'.$EOL.'dots = []'.$EOL.'def animate():'.$EOL.'    t.clear()'.$EOL.'    for b in dots:'.$EOL.'        b.draw()'.$EOL.'        b.move()'.$EOL.'    t.update() '.$EOL.'    screen.ontimer(animate, 100)'.$EOL.'def click(x, y):'.$EOL.'    global dots'.$EOL.'    dots = []'.$EOL.'    for i in range(50):'.$EOL.'        dots.append(Dot(x, y, random.randint(-10, 10), random.randint(-10, 10)))'.$EOL.'screen.onclick(click)'.$EOL.'animate()'.$EOL.'','module_id' => $module17->id,'previous_lesson_id' => $lesson34->id,'user_id' => $user->id]);
        $lesson35= Lesson::create(['name' => 'Objects III - methods','module_id' =>  $module17->id,'previous_lesson_id' => $lesson34->id,'user_id' => $user->id]);
        $exercise493 = Exercise::create(['prompt' => 'A "method" is a function that belongs to an object. Change the method speak() so that it prints "Bark!" instead of "Ruff!". Hint: Change "Ruff!" to "Bark!".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("Ruff!")'.$EOL.'spot = Dog("Spot")'.$EOL.'spot.speak()'.$EOL.'','test_code' => 'test_out("Bark!")'.$EOL.'','lesson_id' => $lesson35->id,'user_id' => $user->id]);
        $exercise494 = Exercise::create(['prompt' => 'Add code that calls speak(). Hint: add a line at the end: "spot.speak()".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("Bark!")'.$EOL.'spot = Dog("Spot")'.$EOL.'# add code here'.$EOL.'','test_code' => 'test_out("Bark!")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise493->id,'user_id' => $user->id]);
        $exercise495 = Exercise::create(['prompt' => 'Add code that calls speak().','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("Bark!")'.$EOL.'spot = Dog("Spot")'.$EOL.'','test_code' => 'test_out("Bark!")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise494->id,'user_id' => $user->id]);
        $exercise496 = Exercise::create(['prompt' => 'Fix the bug in the speak method. Hint: add "self" as a parameter.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak():'.$EOL.'        print("Bark!")'.$EOL.'spot = Dog("Spot")'.$EOL.'spot.speak()'.$EOL.'','test_code' => 'test_out("Bark!")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise495->id,'user_id' => $user->id]);
        $exercise497 = Exercise::create(['prompt' => 'Add code to speak() that prints "Bark!".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'spot = Dog("Spot")'.$EOL.'spot.speak()'.$EOL.'','test_code' => 'test_out("Bark!")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise496->id,'user_id' => $user->id]);
        $exercise498 = Exercise::create(['prompt' => 'Write a speak() method that prints "Bark!".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'spot = Dog("Spot")'.$EOL.'spot.speak()'.$EOL.'','test_code' => 'test_out("Bark!")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise497->id,'user_id' => $user->id]);
        $exercise499 = Exercise::create(['prompt' => 'Write a speak() method that prints "Meow!".','pre_code' => '','start_code' => 'class Cat:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'fluffy = Cat("Fluffy")'.$EOL.'fluffy.speak()'.$EOL.'','test_code' => 'test_out("Meow!")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise498->id,'user_id' => $user->id]);
        $exercise500 = Exercise::create(['prompt' => 'Write a speak() method that prints "Meow!".','pre_code' => '','start_code' => 'class Cat:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'fluffy = Cat("Fluffy")'.$EOL.'fluffy.speak()'.$EOL.'','test_code' => 'test_out("Meow!")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise499->id,'user_id' => $user->id]);
        $exercise501 = Exercise::create(['prompt' => 'Add a Cat to the end of the list so that there are four pets. Name the cat "Lucy". Hint: in the indicated spot, add "pets.append(Cat("Lucy"))".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("Bark!")'.$EOL.'class Cat:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("Meow!")'.$EOL.'pets = []'.$EOL.'pets.append(Cat("Fluffy"))'.$EOL.'pets.append(Dog("Spot"))'.$EOL.'pets.append(Dog("Pluto"))'.$EOL.'# add code here'.$EOL.'for pet in pets:'.$EOL.'    pet.speak()'.$EOL.'print(type(pets[3]) == Cat)'.$EOL.'print(pets[3].name == "Lucy")'.$EOL.'','test_code' => 'test_equal(type(pets[3]), Cat)'.$EOL.'test_equal(pets[3].name, "Lucy")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise500->id,'user_id' => $user->id]);
        $exercise502 = Exercise::create(['prompt' => 'Add a Dog to the end of the list so that there are four pets. Name the dog "Stu".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("Bark!")'.$EOL.'class Cat:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("Meow!")'.$EOL.'pets = []'.$EOL.'pets.append(Cat("Fluffy"))'.$EOL.'pets.append(Dog("Spot"))'.$EOL.'pets.append(Dog("Pluto"))'.$EOL.'# add code here'.$EOL.'for pet in pets:'.$EOL.'    pet.speak()'.$EOL.'print(type(pets[3]) == Dog)'.$EOL.'print(pets[3].name == "Stu")'.$EOL.'','test_code' => 'test_equal(type(pets[3]), Dog)'.$EOL.'test_equal(pets[3].name, "Stu")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise501->id,'user_id' => $user->id]);
        $exercise503 = Exercise::create(['prompt' => 'The Card class represents a playing card. A 3 of clubs is currently instantiated. Change the parameters passed into the constructor so that a 4 of clubs is instantiated. Hint: change the 3 to a 4.','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    def toString(self):'.$EOL.'        return self.number + self.suit'.$EOL.'card = Card("3", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise502->id,'user_id' => $user->id]);
        $exercise504 = Exercise::create(['prompt' => 'Instantiate a Card. Call the variable "card" and make the card a 3 of clubs. Hint: see previous exercise.','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    def toString(self):'.$EOL.'        return self.number + self.suit'.$EOL.'# add code here'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise503->id,'user_id' => $user->id]);
        $exercise505 = Exercise::create(['prompt' => 'Complete the toString() method by returning the number concatenated with the suit. Hint: see previous exercise.','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    def toString(self):'.$EOL.'card = Card("4", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise504->id,'user_id' => $user->id]);
        $exercise506 = Exercise::create(['prompt' => 'Write the toString() method by returning the number concatenated with the suit.','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'card = Card("4", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise505->id,'user_id' => $user->id]);
        $exercise507 = Exercise::create(['prompt' => 'Fix the bug in toString(). Hint: suit should be changed to "self.suit".','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    def toString(self):'.$EOL.'        return self.number + suit'.$EOL.'card = Card("4", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise506->id,'user_id' => $user->id]);
        $exercise508 = Exercise::create(['prompt' => 'Fix the bug in toString().','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    def toString(self):'.$EOL.'        return number + self.suit'.$EOL.'card = Card("4", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise507->id,'user_id' => $user->id]);
        $exercise509 = Exercise::create(['prompt' => 'Fix the bug in toString(). Hint: be sure to pass "self" in as a parameter to every class method.','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    def toString():'.$EOL.'        return self.number + self.suit'.$EOL.'card = Card("4", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise508->id,'user_id' => $user->id]);
        $exercise510 = Exercise::create(['prompt' => 'Fix the bug in toString(). Hint: don"t forget the "def"!','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    toString(self):'.$EOL.'        return self.number + self.suit'.$EOL.'card = Card("4", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise509->id,'user_id' => $user->id]);
        $exercise511 = Exercise::create(['prompt' => 'Fix the bug in toString().','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    def toString(self):'.$EOL.'        return number + self.suit'.$EOL.'card = Card("4", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise510->id,'user_id' => $user->id]);
        $exercise512 = Exercise::create(['prompt' => 'Fix the bug in toString().','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    def toString():'.$EOL.'        return self.number + self.suit'.$EOL.'card = Card("4", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise511->id,'user_id' => $user->id]);
        $exercise513 = Exercise::create(['prompt' => 'Fix the bugs (there are two!) in toString().','pre_code' => '','start_code' => 'class Card:'.$EOL.'    def __init__(self, number, suit):'.$EOL.'        self.number = number'.$EOL.'        self.suit = suit'.$EOL.'    def toString():'.$EOL.'        return self.number + suit'.$EOL.'card = Card("4", "C")'.$EOL.'print(card.toString() == "4C")'.$EOL.'','test_code' => 'test_equal(card.toString(), "4C")'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise512->id,'user_id' => $user->id]);
        $exercise514 = Exercise::create(['prompt' => 'This code has a Square class. Change how you construct the square so that it"s size is 150. Hint: change 100 to 150.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Square:'.$EOL.'    def __init__(self, size):'.$EOL.'        self.size = size'.$EOL.'    def draw(self):'.$EOL.'        t.color("red")'.$EOL.'        for i in range(4):'.$EOL.'            t.forward(self.size)'.$EOL.'            t.left(90)'.$EOL.'        t.update()'.$EOL.'s = Square(100)'.$EOL.'s.draw()'.$EOL.'print(s.size == 150)'.$EOL.'','test_code' => 'test_equal(s.size, 150)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise513->id,'user_id' => $user->id]);
        $exercise515 = Exercise::create(['prompt' => 'The resize() method changes the edge length of the square to be half of what it is. Call resize one more time so that it has an edge length of 25. Hint: add "s.resize()" at the spot indicated by the comment.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Square:'.$EOL.'    def __init__(self, size):'.$EOL.'        self.size = size'.$EOL.'    def draw(self):'.$EOL.'        t.color("red")'.$EOL.'        for i in range(4):'.$EOL.'            t.forward(self.size)'.$EOL.'            t.left(90)'.$EOL.'        t.update()'.$EOL.'    def resize(self):'.$EOL.'        self.size = self.size / 2'.$EOL.'s = Square(100)'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'# add code here'.$EOL.'s.draw()'.$EOL.'print(s.size == 25)'.$EOL.'','test_code' => 'test_equal(s.size, 25)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise514->id,'user_id' => $user->id]);
        $exercise516 = Exercise::create(['prompt' => 'Fix the bug in resize(). Hint: change the 3 to a 2.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Square:'.$EOL.'    def __init__(self, size):'.$EOL.'        self.size = size'.$EOL.'    def draw(self):'.$EOL.'        t.color("red")'.$EOL.'        for i in range(4):'.$EOL.'            t.forward(self.size)'.$EOL.'            t.left(90)'.$EOL.'        t.update()'.$EOL.'    def resize(self):'.$EOL.'        self.size /= 3'.$EOL.'s = Square(100)'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'print(s.size == 25)'.$EOL.'','test_code' => 'test_equal(s.size, 25)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise515->id,'user_id' => $user->id]);
        $exercise517 = Exercise::create(['prompt' => 'Finish the resize() method. Hint: see previous exercise.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Square:'.$EOL.'    def __init__(self, size):'.$EOL.'        self.size = size'.$EOL.'    def draw(self):'.$EOL.'        t.color("red")'.$EOL.'        for i in range(4):'.$EOL.'            t.forward(self.size)'.$EOL.'            t.left(90)'.$EOL.'        t.update()'.$EOL.'    def resize(self):'.$EOL.'s = Square(100)'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'print(s.size == 25)'.$EOL.'','test_code' => 'test_equal(s.size, 25)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise516->id,'user_id' => $user->id]);
        $exercise518 = Exercise::create(['prompt' => 'Add the resize() method. It should cut size in half.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Square:'.$EOL.'    def __init__(self, size):'.$EOL.'        self.size = size'.$EOL.'    def draw(self):'.$EOL.'        t.color("red")'.$EOL.'        for i in range(4):'.$EOL.'            t.forward(self.size)'.$EOL.'            t.left(90)'.$EOL.'        t.update()'.$EOL.'s = Square(100)'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'print(s.size == 25)'.$EOL.'','test_code' => 'test_equal(s.size, 25)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise517->id,'user_id' => $user->id]);
        $exercise519 = Exercise::create(['prompt' => 'Fix the bug in resize(). Hint: see previous exercise.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Square:'.$EOL.'    def __init__(self, size):'.$EOL.'        self.size = size'.$EOL.'    def draw(self):'.$EOL.'        t.color("red")'.$EOL.'        for i in range(4):'.$EOL.'            t.forward(self.size)'.$EOL.'            t.left(90)'.$EOL.'        t.update()'.$EOL.'    def resize():'.$EOL.'        self.size /= 2'.$EOL.'s = Square(100)'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'print(s.size == 25)'.$EOL.'','test_code' => 'test_equal(s.size, 25)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise518->id,'user_id' => $user->id]);
        $exercise520 = Exercise::create(['prompt' => 'Fix the bug in resize().','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Square:'.$EOL.'    def __init__(self, size):'.$EOL.'        self.size = size'.$EOL.'    def draw(self):'.$EOL.'        t.color("red")'.$EOL.'        for i in range(4):'.$EOL.'            t.forward(self.size)'.$EOL.'            t.left(90)'.$EOL.'        t.update()'.$EOL.'    def resize(self):'.$EOL.'        size /= 2'.$EOL.'s = Square(100)'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'print(s.size == 25)'.$EOL.'','test_code' => 'test_equal(s.size, 25)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise519->id,'user_id' => $user->id]);
        $exercise521 = Exercise::create(['prompt' => 'This code appears to have a bug in draw and resize, but the bug is actually in the constructor. Hint: fix the constructor so that "self.size" is assigned. Hint: see code in previous exercise.','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Square:'.$EOL.'    def __init__(self, size):'.$EOL.'        size = size'.$EOL.'    def draw(self):'.$EOL.'        t.color("red")'.$EOL.'        for i in range(4):'.$EOL.'            t.forward(self.size)'.$EOL.'            t.left(90)'.$EOL.'        t.update()'.$EOL.'    def resize(self):'.$EOL.'        self.size /= 2'.$EOL.'s = Square(100)'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'s.resize()'.$EOL.'s.draw()'.$EOL.'print(s.size == 25)'.$EOL.'','test_code' => 'test_equal(s.size, 25)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise520->id,'user_id' => $user->id]);
        $exercise522 = Exercise::create(['prompt' => 'Fix the bug in the move method. Hint: "self.x += self.vx" (don"t forget the +!)','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y, vx, vy):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'        self.vx = vx'.$EOL.'        self.vy = vy'.$EOL.'    def move(self):'.$EOL.'        self.x = self.vx'.$EOL.'        self.y += self.vy'.$EOL.'p = Point(0, 0, 1, 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 1)'.$EOL.'print(p.y == 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 2)'.$EOL.'print(p.y == 4)'.$EOL.'','test_code' => 'test_equal(p.x, 2)'.$EOL.'test_equal(p.y, 4)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise521->id,'user_id' => $user->id]);
        $exercise523 = Exercise::create(['prompt' => 'Complete the move() method. Hint: see code in previous exercise.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y, vx, vy):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'        self.vx = vx'.$EOL.'        self.vy = vy'.$EOL.'    def move(self):'.$EOL.'        self.x += self.vx'.$EOL.'p = Point(0, 0, 1, 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 1)'.$EOL.'print(p.y == 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 2)'.$EOL.'print(p.y == 4)'.$EOL.'','test_code' => 'test_equal(p.x, 2)'.$EOL.'test_equal(p.y, 4)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise522->id,'user_id' => $user->id]);
        $exercise524 = Exercise::create(['prompt' => 'Fix the bug in the move() method. Hint: vx is added to y. It should be vy added to y.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y, vx, vy):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'        self.vx = vx'.$EOL.'        self.vy = vy'.$EOL.'    def move(self):'.$EOL.'        self.x += self.vx'.$EOL.'        self.y += self.vx'.$EOL.'p = Point(0, 0, 1, 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 1)'.$EOL.'print(p.y == 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 2)'.$EOL.'print(p.y == 4)'.$EOL.'','test_code' => 'test_equal(p.x, 2)'.$EOL.'test_equal(p.y, 4)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise523->id,'user_id' => $user->id]);
        $exercise525 = Exercise::create(['prompt' => 'Fix the bug in the move() method.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y, vx, vy):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'        self.vx = vx'.$EOL.'        self.vy = vy'.$EOL.'    def move():'.$EOL.'        self.x += self.vx'.$EOL.'        self.y += self.vy'.$EOL.'p = Point(0, 0, 1, 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 1)'.$EOL.'print(p.y == 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 2)'.$EOL.'print(p.y == 4)'.$EOL.'','test_code' => 'test_equal(p.x, 2)'.$EOL.'test_equal(p.y, 4)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise524->id,'user_id' => $user->id]);
        $exercise526 = Exercise::create(['prompt' => 'Fix the bugs in the move() method.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y, vx, vy):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'        self.vx = vx'.$EOL.'        self.vy = vy'.$EOL.'    def move(self):'.$EOL.'        self.x += vx'.$EOL.'        self.y += vy'.$EOL.'p = Point(0, 0, 1, 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 1)'.$EOL.'print(p.y == 2)'.$EOL.'p.move()'.$EOL.'print(p.x == 2)'.$EOL.'print(p.y == 4)'.$EOL.'','test_code' => 'test_equal(p.x, 2)'.$EOL.'test_equal(p.y, 4)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise525->id,'user_id' => $user->id]);
        $exercise527 = Exercise::create(['prompt' => 'Fix the bug in the setpos() method. Hint: it is missing "self".','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'    def setpos(x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'p = Point(0, 0)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'p.setpos(5, 10)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 10)'.$EOL.'p.setpos(3, -18)'.$EOL.'print(p.x == 3)'.$EOL.'print(p.y == -18)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.setpos(3, -18)'.$EOL.'test_equal(w.x, 3)'.$EOL.'test_equal(w.y, -18)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise526->id,'user_id' => $user->id]);
        $exercise528 = Exercise::create(['prompt' => 'Create the setpos() method in the "Point" class that takes an x and a y coordinate and sets the instance variables "x" and "y". Hint: see code in previous exercise.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'p = Point(0, 0)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'p.setpos(5, 10)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 10)'.$EOL.'p.setpos(3, -18)'.$EOL.'print(p.x == 3)'.$EOL.'print(p.y == -18)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.setpos(3, -18)'.$EOL.'test_equal(w.x, 3)'.$EOL.'test_equal(w.y, -18)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise527->id,'user_id' => $user->id]);
        $exercise529 = Exercise::create(['prompt' => 'Fix the bug in setpos().','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'    def setpos(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        y = y'.$EOL.'p = Point(0, 0)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'p.setpos(5, 10)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 10)'.$EOL.'p.setpos(3, -18)'.$EOL.'print(p.x == 3)'.$EOL.'print(p.y == -18)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.setpos(3, -18)'.$EOL.'test_equal(w.x, 3)'.$EOL.'test_equal(w.y, -18)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise528->id,'user_id' => $user->id]);
        $exercise530 = Exercise::create(['prompt' => 'Fix the bug in setpos().','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'    def setpos(x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'p = Point(0, 0)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'p.setpos(5, 10)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 10)'.$EOL.'p.setpos(3, -18)'.$EOL.'print(p.x == 3)'.$EOL.'print(p.y == -18)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.setpos(3, -18)'.$EOL.'test_equal(w.x, 3)'.$EOL.'test_equal(w.y, -18)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise529->id,'user_id' => $user->id]);
        $exercise531 = Exercise::create(['prompt' => 'Fix the bug in setpos(). Hint: a space is missing.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'    defsetpos(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'p = Point(0, 0)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'p.setpos(5, 10)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 10)'.$EOL.'p.setpos(3, -18)'.$EOL.'print(p.x == 3)'.$EOL.'print(p.y == -18)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.setpos(3, -18)'.$EOL.'test_equal(w.x, 3)'.$EOL.'test_equal(w.y, -18)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise530->id,'user_id' => $user->id]);
        $exercise532 = Exercise::create(['prompt' => 'Fix the bug in setpos(). Hint: a colon is missing.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'    def setpos(self, x, y)'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'p = Point(0, 0)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'p.setpos(5, 10)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 10)'.$EOL.'p.setpos(3, -18)'.$EOL.'print(p.x == 3)'.$EOL.'print(p.y == -18)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.setpos(3, -18)'.$EOL.'test_equal(w.x, 3)'.$EOL.'test_equal(w.y, -18)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise531->id,'user_id' => $user->id]);
        $exercise533 = Exercise::create(['prompt' => 'Fix the bug in setpos(). Hint: the method name is misspelled. Change "P" to "p".','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'    def setPos(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'p = Point(0, 0)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'p.setpos(5, 10)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 10)'.$EOL.'p.setpos(3, -18)'.$EOL.'print(p.x == 3)'.$EOL.'print(p.y == -18)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.setpos(3, -18)'.$EOL.'test_equal(w.x, 3)'.$EOL.'test_equal(w.y, -18)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise532->id,'user_id' => $user->id]);
        $exercise534 = Exercise::create(['prompt' => 'Fix the bug in setpos().','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'    def setpos(self, x, y)'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'p = Point(0, 0)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'p.setpos(5, 10)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 10)'.$EOL.'p.setpos(3, -18)'.$EOL.'print(p.x == 3)'.$EOL.'print(p.y == -18)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.setpos(3, -18)'.$EOL.'test_equal(w.x, 3)'.$EOL.'test_equal(w.y, -18)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise533->id,'user_id' => $user->id]);
        $exercise535 = Exercise::create(['prompt' => 'Fix the bug in setpos().','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'    def setPos(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'p = Point(0, 0)'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'p.setpos(5, 10)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 10)'.$EOL.'p.setpos(3, -18)'.$EOL.'print(p.x == 3)'.$EOL.'print(p.y == -18)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.setpos(3, -18)'.$EOL.'test_equal(w.x, 3)'.$EOL.'test_equal(w.y, -18)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise534->id,'user_id' => $user->id]);
        $exercise536 = Exercise::create(['prompt' => 'Create a "moveToOrigin" method in the "Point" class that takes no arguments and simply resets x and y to zero.','pre_code' => '','start_code' => 'class Point:'.$EOL.'    def __init__(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'    def setpos(self, x, y):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'p = Point(5, 9)'.$EOL.'print(p.x == 5)'.$EOL.'print(p.y == 9)'.$EOL.'p.moveToOrigin()'.$EOL.'print(p.x == 0)'.$EOL.'print(p.y == 0)'.$EOL.'','test_code' => 'w = Point(5, 6)'.$EOL.'test_equal(w.x, 5)'.$EOL.'test_equal(w.y, 6)'.$EOL.'w.moveToOrigin()'.$EOL.'test_equal(w.x, 0)'.$EOL.'test_equal(w.y, 0)'.$EOL.'','lesson_id' => $lesson35->id,'previous_exercise_id' => $exercise535->id,'user_id' => $user->id]);
        $project25 = Project::create(['name' => ' Buttons','open_date' => '2018-07-28 0:00:00','close_date' => '2018-07-30 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'This project is to be done individually.'.$EOL.'<p><p>You will render a number of buttons and allow the user to click on them searching for a random number. In <a href="https://youtu.be/0TrMEF9dR70">this video</a>, 18 buttons are shown, and a "target" number between 1 and 18 is chosen randomly. If the user clicks a button with a number less than the target, then "Higher!" is printed. If the button is larger than the target, "Lower!" is printed. If the button matches the number, "Done!" is printed. Fill in the Buttons class. The Buttons class should have two data attributes: a list of buttons and a target number.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Button:'.$EOL.'    def __init__(self, x, y, number):'.$EOL.'        self.x = x'.$EOL.'        self.y = y'.$EOL.'        self.width = 20'.$EOL.'        self.height = 20'.$EOL.'        self.number = number'.$EOL.'        self.color = "green"'.$EOL.'    def draw(self):'.$EOL.'        t.color(self.color)'.$EOL.'        t.up()'.$EOL.'        t.setpos(self.x, self.y)'.$EOL.'        t.seth(0)'.$EOL.'        t.down()'.$EOL.'        for i in range(2):'.$EOL.'            t.forward(self.width)'.$EOL.'            t.left(90)'.$EOL.'            t.forward(self.height)'.$EOL.'            t.left(90)'.$EOL.'        t.up()'.$EOL.'        t.setpos(self.x + self.width/2, self.y + self.height/2 - 6)'.$EOL.'        t.color("black")'.$EOL.'        t.write(str(self.number), move=False, align="center", font=("Arial", 12, "normal"))'.$EOL.'    def hits(self, x, y):'.$EOL.'        if (x > self.x and x < self.x + self.width and y > self.y and y < self.y + self.height):'.$EOL.'            return True'.$EOL.'        return False'.$EOL.'class Buttons:'.$EOL.'    def __init__(self):'.$EOL.'        print("Buttons constructor")'.$EOL.'    def draw(self):'.$EOL.'        print("draw buttons")'.$EOL.'        t.update()'.$EOL.'    def test(self, x, y):'.$EOL.'        print("update colors and print output")'.$EOL.'buttons = Buttons()'.$EOL.'buttons.draw()'.$EOL.'def onclick(x, y):'.$EOL.'    try:'.$EOL.'        buttons.test(x, y)'.$EOL.'    except Exception as e:'.$EOL.'        print(str(e))'.$EOL.'screen.onclick(onclick)'.$EOL.'','solution' => 'import turtle'.$EOL.'import random'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Button:'.$EOL.'  def __init__(self, x, y, number):'.$EOL.'    self.x = x'.$EOL.'    self.y = y'.$EOL.'    self.width = 20'.$EOL.'    self.height = 20'.$EOL.'    self.number = number'.$EOL.'    self.color = "green"'.$EOL.'  def draw(self):'.$EOL.'    t.color(self.color)'.$EOL.'    t.up()'.$EOL.'    t.setpos(self.x, self.y)'.$EOL.'    t.seth(0)'.$EOL.'    t.down()'.$EOL.'    for i in range(2):'.$EOL.'        t.forward(self.width)'.$EOL.'        t.left(90)'.$EOL.'        t.forward(self.height)'.$EOL.'        t.left(90)'.$EOL.'    t.up()'.$EOL.'    t.setpos(self.x + self.width/2, self.y + self.height/2 - 6)'.$EOL.'    t.color("black")'.$EOL.'    t.write(str(self.number), move=False, align="center", font=("Arial", 12, "normal"))'.$EOL.'  def hits(self, x, y):'.$EOL.'    if (x > self.x and x < self.x + self.width and y > self.y and y < self.y + self.height):'.$EOL.'      return True'.$EOL.'    return False'.$EOL.'class Buttons:'.$EOL.'    def __init__(self):'.$EOL.'        self.buttons = []'.$EOL.'        for i in range(18):'.$EOL.'            self.buttons.append(Button(-200+i*22, 0, i+1))'.$EOL.'        self.target = random.randint(1, len(self.buttons))'.$EOL.'    def draw(self):'.$EOL.'        for b in self.buttons:'.$EOL.'          b.draw()'.$EOL.'        t.update()'.$EOL.'    def test(self, x, y):'.$EOL.'        for b in self.buttons:'.$EOL.'            if b.hits(x, y):'.$EOL.'                b.color = "red"'.$EOL.'                if b.number == self.target:'.$EOL.'                    print("Done!")'.$EOL.'                elif self.target < b.number:'.$EOL.'                    print("Lower!")'.$EOL.'                else:'.$EOL.'                    print("Higher!")'.$EOL.'        self.draw()'.$EOL.'buttons = Buttons()'.$EOL.'buttons.draw()'.$EOL.'def onclick(x, y):'.$EOL.'    try:'.$EOL.'        buttons.test(x, y)'.$EOL.'    except Exception as e:'.$EOL.'        print(str(e))'.$EOL.'screen.onclick(onclick)'.$EOL.'','module_id' => $module17->id,'previous_lesson_id' => $lesson35->id,'user_id' => $user->id]);
        $lesson36= Lesson::create(['name' => 'objects - common bugs in methods','module_id' =>  $module17->id,'previous_lesson_id' => $lesson35->id,'user_id' => $user->id]);
        $exercise537 = Exercise::create(['prompt' => 'Fix the bug in add(). Hint: "self" is missing in the parameter list.','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'user_id' => $user->id]);
        $exercise538 = Exercise::create(['prompt' => 'Fix the bug in add().','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(self, name):'.$EOL.'        self.nameList.append()'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise537->id,'user_id' => $user->id]);
        $exercise539 = Exercise::create(['prompt' => 'Fix the bug in add().','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(self.name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise538->id,'user_id' => $user->id]);
        $exercise540 = Exercise::create(['prompt' => 'Fix the bug in add().','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(self, name):'.$EOL.'        nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise539->id,'user_id' => $user->id]);
        $exercise541 = Exercise::create(['prompt' => 'Write an "add" method in the Names class that takes a name as a parameter and adds it to the list of names.','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise540->id,'user_id' => $user->id]);
        $exercise542 = Exercise::create(['prompt' => 'Write a constructor for the Names class. The constructor should initialize a data attribute of type list called nameList.','pre_code' => '','start_code' => 'class Names:'.$EOL.'    # add constructor here'.$EOL.'    def add(self, name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise541->id,'user_id' => $user->id]);
        $exercise543 = Exercise::create(['prompt' => 'Fix the bug. You should need to change/add/delete only one word. Hint: the bug is in the constructor.','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        nameList = []'.$EOL.'    def add(self, name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise542->id,'user_id' => $user->id]);
        $exercise544 = Exercise::create(['prompt' => 'Fix the bug. You should need to change/add/delete only one word. Hint: the bug is in add().','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(self, name):'.$EOL.'        nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise543->id,'user_id' => $user->id]);
        $exercise545 = Exercise::create(['prompt' => 'Fix the bug. You should need to change/add/delete only one word.','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise544->id,'user_id' => $user->id]);
        $exercise546 = Exercise::create(['prompt' => 'Fix the bug. You should need to change/add/delete only one word.','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        nameList = []'.$EOL.'    def add(self, name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise545->id,'user_id' => $user->id]);
        $exercise547 = Exercise::create(['prompt' => 'Fix the bug. You should need to change/add/delete only one word. RUN THE CODE AND SEE THE ERROR MESSAGE BEFORE LOOKING AT THE HINT. Hint: the name of the class is wrong. Change the name of the class in the class definition.','pre_code' => '','start_code' => 'class Name:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(self, name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'names = Names()'.$EOL.'names.add("Julie")'.$EOL.'names.add("Jane")'.$EOL.'print(names.nameList[1] == "Jane")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise546->id,'user_id' => $user->id]);
        $exercise548 = Exercise::create(['prompt' => 'Fix the bug. You should need to change/add/delete only one word.','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__():'.$EOL.'        self.nameList = []'.$EOL.'    def add(self, name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise547->id,'user_id' => $user->id]);
        $exercise549 = Exercise::create(['prompt' => 'Fix the bug. You should need to change/add/delete only one word.','pre_code' => '','start_code' => 'class Name:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(self, name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'names = Names()'.$EOL.'names.add("Julie")'.$EOL.'names.add("Jane")'.$EOL.'print(names.nameList[1] == "Jane")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise548->id,'user_id' => $user->id]);
        $exercise550 = Exercise::create(['prompt' => 'Fix the bug. You should need to change/add/delete only one word.','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise549->id,'user_id' => $user->id]);
        $exercise551 = Exercise::create(['prompt' => 'Fix the bug. You should need to change/add/delete only one word.','pre_code' => '','start_code' => 'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(self):'.$EOL.'        self.nameList.append(name)'.$EOL.'names = Names()'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise550->id,'user_id' => $user->id]);
        $exercise552 = Exercise::create(['prompt' => 'Fix the bug. Hint: the variable "names" must be initialized after the class Names is defined. That is, move the first line to be just before "names.add("Bach")".','pre_code' => '','start_code' => 'names = Names()'.$EOL.'class Names:'.$EOL.'    def __init__(self):'.$EOL.'        self.nameList = []'.$EOL.'    def add(self, name):'.$EOL.'        self.nameList.append(name)'.$EOL.'names.add("Bach")'.$EOL.'names.add("Mozart")'.$EOL.'names.add("Beethoven")'.$EOL.'print(names.nameList[1] == "Mozart")'.$EOL.'','test_code' => 'names = Names()'.$EOL.'names.add("abc")'.$EOL.'test_equal(names.nameList[0], "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise551->id,'user_id' => $user->id]);
        $exercise553 = Exercise::create(['prompt' => 'Fix the bug in the add method.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(name):'.$EOL.'        person = Person(name)'.$EOL.'        self.personlist.append(person)'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(people.personlist[1].name == "Mozart")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(people.personlist[0].name, "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise552->id,'user_id' => $user->id]);
        $exercise554 = Exercise::create(['prompt' => 'In the location indicated, add code that creates a Person with the given name. The variable name should be "person".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(self, name):'.$EOL.'        # add code here'.$EOL.'        self.personlist.append(person)'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(people.personlist[1].name == "Mozart")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(people.personlist[0].name, "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise553->id,'user_id' => $user->id]);
        $exercise555 = Exercise::create(['prompt' => 'In the location indicated, add code that adds the person to the personlist.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(self, name):'.$EOL.'        person = Person(name)'.$EOL.'        # add code here'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(people.personlist[1].name == "Mozart")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(people.personlist[0].name, "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise554->id,'user_id' => $user->id]);
        $exercise556 = Exercise::create(['prompt' => 'Write an "add" method in the People class that takes a name, instantiates a new Person and appends that person to personlist.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(people.personlist[1].name == "Mozart")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(people.personlist[0].name, "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise555->id,'user_id' => $user->id]);
        $exercise557 = Exercise::create(['prompt' => 'Fix the bug. Hint: a name is added to personlist instead of a Person object. You should create a Person object and add it to the personlist instead of the name directly.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(self, name):'.$EOL.'        self.personlist.append(name)'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(people.personlist[1].name == "Mozart")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(people.personlist[0].name, "abc")'.$EOL.'','lesson_id' => $lesson36->id,'previous_exercise_id' => $exercise556->id,'user_id' => $user->id]);
        $lesson37= Lesson::create(['name' => 'objects - methods vs. functions','module_id' =>  $module17->id,'previous_lesson_id' => $lesson36->id,'user_id' => $user->id]);
        $exercise558 = Exercise::create(['prompt' => 'Fix the bug. Hint: the bug is in line 5.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("{} says bark!".format(name))'.$EOL.'dog = Dog("Spot")'.$EOL.'dog.speak()'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'user_id' => $user->id]);
        $exercise559 = Exercise::create(['prompt' => 'Fix the bug. Note that speak() is not indented, so it isn"t a method of the Dog class. But it is called as if it was a member of the class (see line 9). The way to fix this bug is to indent the speak() function so that it is a method of the Dog class. Hint: see previous exercise.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'def speak(self):'.$EOL.'    print("{} says bark!".format(self.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'dog.speak()'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise558->id,'user_id' => $user->id]);
        $exercise560 = Exercise::create(['prompt' => 'Fix the bug.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'def speak(self):'.$EOL.'    print("{} says bark!".format(self.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'dog.speak()'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise559->id,'user_id' => $user->id]);
        $exercise561 = Exercise::create(['prompt' => 'Fix the bug. See the comment. We are calling speak as if it were a function, but it is actually a method of the Dog class. Change line 9 so that it calls speak() as a method of the Dog class. Hint: see previous exercise.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("{} says bark!".format(self.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'# bug is on the following line'.$EOL.'speak(dog)'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise560->id,'user_id' => $user->id]);
        $exercise562 = Exercise::create(['prompt' => 'Fix the bug on line 9.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("{} says bark!".format(self.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'# bug is on the following line'.$EOL.'speak(dog)'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise561->id,'user_id' => $user->id]);
        $exercise563 = Exercise::create(['prompt' => 'Fix the bug. speak() is a function and so doesn"t have a "self". Change "self" to "dog".','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'def speak(dog):'.$EOL.'    print("{} says bark!".format(self.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'speak(dog)'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise562->id,'user_id' => $user->id]);
        $exercise564 = Exercise::create(['prompt' => 'Fix the bug on the line indicated with a comment. speak() is a function but is called on the indicated line as a method of class Dog. Change the call to match that in the previous exercise.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'def speak(dog):'.$EOL.'    print("{} says bark!".format(dog.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'dog.speak() # bug on this line'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise563->id,'user_id' => $user->id]);
        $exercise565 = Exercise::create(['prompt' => 'Fix the bug on the line indicated with a comment.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'def speak(dog):'.$EOL.'    print("{} says bark!".format(dog.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'dog.speak() # bug on this line'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise564->id,'user_id' => $user->id]);
        $exercise566 = Exercise::create(['prompt' => 'Add a call to speak() in the location indicated with a comment.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'def speak(dog):'.$EOL.'    print("{} says bark!".format(dog.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'# add code here'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise565->id,'user_id' => $user->id]);
        $exercise567 = Exercise::create(['prompt' => 'Add a call to speak() in the location indicated with a comment.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("{} says bark!".format(self.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'# add code here'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise566->id,'user_id' => $user->id]);
        $exercise568 = Exercise::create(['prompt' => 'Add a call to speak() in the location indicated with a comment.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'    def speak(self):'.$EOL.'        print("{} says bark!".format(self.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'# add code here'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise567->id,'user_id' => $user->id]);
        $exercise569 = Exercise::create(['prompt' => 'Add a call to speak() in the location indicated with a comment.','pre_code' => '','start_code' => 'class Dog:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'def speak(dog):'.$EOL.'    print("{} says bark!".format(dog.name))'.$EOL.'dog = Dog("Spot")'.$EOL.'# add code here'.$EOL.'','test_code' => 'test_out("Spot says bark!")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise568->id,'user_id' => $user->id]);
        $exercise570 = Exercise::create(['prompt' => 'Fix the bug.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(name):'.$EOL.'        person = Person(name)'.$EOL.'        self.personlist.append(person)'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(people.personlist[1].name == "Mozart")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(people.personlist[0].name, "abc")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise569->id,'user_id' => $user->id]);
        $exercise571 = Exercise::create(['prompt' => 'Fix the bug. Hint: getFirstPerson() should return the person at index 0.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(self, name):'.$EOL.'        person = Person(name)'.$EOL.'        self.personlist.append(person)'.$EOL.'def getFirstPerson(people):'.$EOL.'    return people.personlist[1]'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(getFirstPerson(people).name == "Bach")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(getFirstPerson(people).name, "abc")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise570->id,'user_id' => $user->id]);
        $exercise572 = Exercise::create(['prompt' => 'Fix the bug. Hint: getFirstPerson() is not a method of the People class, so it should not have self in it. Hint: replace self with people.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(self, name):'.$EOL.'        person = Person(name)'.$EOL.'        self.personlist.append(person)'.$EOL.'def getFirstPerson(people):'.$EOL.'    return self.personlist[0]'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(getFirstPerson(people).name == "Bach")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(getFirstPerson(people).name, "abc")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise571->id,'user_id' => $user->id]);
        $exercise573 = Exercise::create(['prompt' => 'Fix the bugs. Hint: getFirstPerson() is not a method of the People class, so it should not have self in it. Hint: use "people" in getFirstPerson().','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(self, name):'.$EOL.'        person = Person(name)'.$EOL.'        self.personlist.append(person)'.$EOL.'def getFirstPerson(self, people):'.$EOL.'    return personlist[0]'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(getFirstPerson(people).name == "Bach")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(getFirstPerson(people).name, "abc")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise572->id,'user_id' => $user->id]);
        $exercise574 = Exercise::create(['prompt' => 'Fix the bug. Note: getFirstPerson() is now a method of the People class. Hint: since getFirstPerson() is now a method of the People class, so it should use self.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(self, name):'.$EOL.'        person = Person(name)'.$EOL.'        self.personlist.append(person)'.$EOL.'    def getFirstPerson(self):'.$EOL.'        return personlist[0]'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(people.getFirstPerson().name == "Bach")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(people.getFirstPerson().name, "abc")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise573->id,'user_id' => $user->id]);
        $exercise575 = Exercise::create(['prompt' => 'getFirstPerson() is a function, but is written as if it should be a method of class People. Indent getFirstPerson() so that it is a member function of class People.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(self, name):'.$EOL.'        person = Person(name)'.$EOL.'        self.personlist.append(person)'.$EOL.'def getFirstPerson(self):'.$EOL.'    return self.personlist[0]'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(people.getFirstPerson().name == "Bach")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(people.getFirstPerson().name, "abc")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise574->id,'user_id' => $user->id]);
        $exercise576 = Exercise::create(['prompt' => 'getFirstPerson() is a method of class People, but is written as if it should be a function. Un-indent getFirstPerson() so that it is a function and not a member function of class People.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'class People:'.$EOL.'    def __init__(self):'.$EOL.'        self.personlist = []'.$EOL.'    def add(self, name):'.$EOL.'        person = Person(name)'.$EOL.'        self.personlist.append(person)'.$EOL.'    def getFirstPerson(people):'.$EOL.'        return people.personlist[0]'.$EOL.'people = People()'.$EOL.'people.add("Bach")'.$EOL.'people.add("Mozart")'.$EOL.'people.add("Beethoven")'.$EOL.'print(getFirstPerson(people).name == "Bach")'.$EOL.'','test_code' => 'people = People()'.$EOL.'people.add("abc")'.$EOL.'test_equal(getFirstPerson(people).name, "abc")'.$EOL.'','lesson_id' => $lesson37->id,'previous_exercise_id' => $exercise575->id,'user_id' => $user->id]);
        $project26 = Project::create(['name' => ' Buttons II','open_date' => '2018-07-28 0:00:00','close_date' => '2018-07-30 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'Write a class called Button. It should have five data attributes (also called "instance variables"), "x", "y", "width", "height", and "text". It should have two methods: "draw(self)" and "hits(self, x, y)". The "hits" method should return True if the given x, y coordinate is inside the button, and False otherwise. The "draw" method should draw the button to the screen. Your button should draw a box around the button"s text. To draw text using turtle graphics, use "t.write(self.text, move=False, align="center", font=("Arial", 12, "normal"))". You will need to set the position of the turtle before calling "write". You can adjust the size of the text by changing the "12".'.$EOL.'<p><p>After testing your Button class, fill in the "onclick" function so that the text of the button is printed using "print()" if the mouse was clicked inside the button.'.$EOL.'<p>Create an array of buttons and draw them all on the screen. Print the text of a button if the mouse is clicked on it. You should have at least three buttons on the screen.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'t.tracer(0) # remember to call t.update after any kind of draw!'.$EOL.'t.hideturtle()'.$EOL.'def onclick(x, y):'.$EOL.'		print("Clicked: ({}, {})".format(x, y))'.$EOL.'screen.onclick(onclick)'.$EOL.'','solution' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'class Button:'.$EOL.'  def __init__(self, x, y, text):'.$EOL.'    self.x = x'.$EOL.'    self.y = y'.$EOL.'    self.width = 80'.$EOL.'    self.height = 30'.$EOL.'    self.text = text'.$EOL.'  def draw(self):'.$EOL.'    t.up()'.$EOL.'    t.setpos(self.x, self.y)'.$EOL.'    t.seth(0)'.$EOL.'    t.down()'.$EOL.'    t.forward(self.width)'.$EOL.'    t.left(90)'.$EOL.'    t.forward(self.height)'.$EOL.'    t.left(90)'.$EOL.'    t.forward(self.width)'.$EOL.'    t.left(90)'.$EOL.'    t.forward(self.height)'.$EOL.'    t.left(90)'.$EOL.'    t.up()'.$EOL.'    t.setpos(self.x + self.width/2, self.y + self.height/2 - 6)'.$EOL.'    t.write(self.text, move=False, align="center", font=("Arial", 12, "normal"))'.$EOL.'  def hits(self, x, y):'.$EOL.'    if (x > self.x and x < self.x + self.width and y > self.y and y < self.y + self.height):'.$EOL.'      return True'.$EOL.'    return False'.$EOL.'buttons = []'.$EOL.'buttons.append(Button(-80, 100, "CS"))'.$EOL.'buttons.append(Button(-80, 50, "INFO"))'.$EOL.'buttons.append(Button(-80, 0, "English"))'.$EOL.'buttons.append(Button(-80, -50, "Biology"))'.$EOL.'buttons.append(Button(-80, -100, "Art"))'.$EOL.'for b in buttons:'.$EOL.'  b.draw()'.$EOL.'t.update()'.$EOL.'def onclick(x, y):'.$EOL.'  for b in buttons:'.$EOL.'    if b.hits(x, y):'.$EOL.'      print(b.text)'.$EOL.'screen.onclick(onclick)'.$EOL.'','module_id' => $module17->id,'previous_lesson_id' => $lesson37->id,'user_id' => $user->id]);
        $lesson38= Lesson::create(['name' => 'Objects - data attributes II','module_id' =>  $module17->id,'previous_lesson_id' => $lesson37->id,'user_id' => $user->id]);
        $exercise577 = Exercise::create(['prompt' => 'This code creates a list of people with the given names. Add a return statement to the "getPeople" function that returns the list of people.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'def getPeople(names):'.$EOL.'    people = []'.$EOL.'    for name in names:'.$EOL.'        person = Person(name)'.$EOL.'        people.append(person)'.$EOL.'names = ["Eddie", "Freda", "George", "Hannah"]'.$EOL.'people = getPeople(names)'.$EOL.'for person in people:'.$EOL.'    print(person.name)'.$EOL.'','test_code' => 'test_equal(getPeople(["a", "b"])[1].name, "b")'.$EOL.'','lesson_id' => $lesson38->id,'user_id' => $user->id]);
        $exercise578 = Exercise::create(['prompt' => 'Write a function called "getPeople" that takes a list of names and returns a list of people with those names.','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'names = ["Eddie", "Freda", "George", "Hannah"]'.$EOL.'people = getPeople(names)'.$EOL.'for person in people:'.$EOL.'    print(person.name)'.$EOL.'','test_code' => 'test_equal(getPeople(["a", "b"])[1].name, "b")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise577->id,'user_id' => $user->id]);
        $exercise579 = Exercise::create(['prompt' => 'Write code that loops through the people and prints their names. Your code should output "Eddie\nFreda\nGeorge\nHannah".','pre_code' => '','start_code' => 'class Person:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'def getPeople(names):'.$EOL.'    people = []'.$EOL.'    for name in names:'.$EOL.'        person = Person(name)'.$EOL.'        people.append(person)'.$EOL.'    return people'.$EOL.'names = ["Eddie", "Freda", "George", "Hannah"]'.$EOL.'people = getPeople(names)'.$EOL.'# add code here'.$EOL.'','test_code' => 'test_out("Eddie\nFreda\nGeorge\nHannah")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise578->id,'user_id' => $user->id]);
        $exercise580 = Exercise::create(['prompt' => 'Write a function called "getPets" that takes a list of names and returns a list of pets with those names. Hint: this function will be very much like the getPeople() function in the previous exercise.','pre_code' => '','start_code' => 'class Pet:'.$EOL.'    def __init__(self, name):'.$EOL.'        self.name = name'.$EOL.'# add code here'.$EOL.'names = ["Spot", "Lassie", "Pluto", "Lucky"]'.$EOL.'pets = getPets(names)'.$EOL.'for pet in pets:'.$EOL.'    print(pet.name)'.$EOL.'','test_code' => 'test_equal(getPets(["a", "b"])[1].name, "b")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise579->id,'user_id' => $user->id]);
        $exercise581 = Exercise::create(['prompt' => 'The function getStudents() takes lists of names and gpas and returns a list of students with those names and gpas. Add a return statement to the end of getStudents. Hint: add "return students". Make sure it is indented exactly 4 spaces.','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        name = names[i]'.$EOL.'        gpa = gpas[i]'.$EOL.'        student = Student(name, gpa)'.$EOL.'        students.append(student)'.$EOL.'names = [ "Eddie", "Freda", "George", "Hannah" ]'.$EOL.'gpas = [ 3.9, 4.0, 3.5, 3.2 ]'.$EOL.'students = getStudents(names, gpas)'.$EOL.'print(students[0].name == "Eddie")'.$EOL.'print(students[0].gpa == 3.9)'.$EOL.'print(students[1].name == "Freda")'.$EOL.'print(students[1].gpa == 4.0)'.$EOL.'','test_code' => 'test_equal(getStudents(["a", "b"], [1, 2])[1].name, "b")'.$EOL.'test_equal(getStudents(["a", "b"], [1, 2])[1].gpa, 2)'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise580->id,'user_id' => $user->id]);
        $exercise582 = Exercise::create(['prompt' => 'Complete the function getStudents(). Hint: the given code returns an empty list -- it must be filled!','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        name = names[i]'.$EOL.'        gpa = gpas[i]'.$EOL.'        student = Student(name, gpa)'.$EOL.'    return students'.$EOL.'names = [ "Eddie", "Freda", "George", "Hannah" ]'.$EOL.'gpas = [ 3.9, 4.0, 3.5, 3.2 ]'.$EOL.'students = getStudents(names, gpas)'.$EOL.'print(students[0].name == "Eddie")'.$EOL.'print(students[0].gpa == 3.9)'.$EOL.'print(students[1].name == "Freda")'.$EOL.'print(students[1].gpa == 4.0)'.$EOL.'','test_code' => 'test_equal(getStudents(["a", "b"], [1, 2])[1].name, "b")'.$EOL.'test_equal(getStudents(["a", "b"], [1, 2])[1].gpa, 2)'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise581->id,'user_id' => $user->id]);
        $exercise583 = Exercise::create(['prompt' => 'Complete the function getStudents().','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        name = names[i]'.$EOL.'        gpa = gpas[i]'.$EOL.'        students.append(student)'.$EOL.'    return students'.$EOL.'names = [ "Eddie", "Freda", "George", "Hannah" ]'.$EOL.'gpas = [ 3.9, 4.0, 3.5, 3.2 ]'.$EOL.'students = getStudents(names, gpas)'.$EOL.'print(students[0].name == "Eddie")'.$EOL.'print(students[0].gpa == 3.9)'.$EOL.'print(students[1].name == "Freda")'.$EOL.'print(students[1].gpa == 4.0)'.$EOL.'','test_code' => 'test_equal(getStudents(["a", "b"], [1, 2])[1].name, "b")'.$EOL.'test_equal(getStudents(["a", "b"], [1, 2])[1].gpa, 2)'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise582->id,'user_id' => $user->id]);
        $exercise584 = Exercise::create(['prompt' => 'Complete the function getStudents().','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        student = Student(name, gpa)'.$EOL.'        students.append(student)'.$EOL.'    return students'.$EOL.'names = [ "Eddie", "Freda", "George", "Hannah" ]'.$EOL.'gpas = [ 3.9, 4.0, 3.5, 3.2 ]'.$EOL.'students = getStudents(names, gpas)'.$EOL.'print(students[0].name == "Eddie")'.$EOL.'print(students[0].gpa == 3.9)'.$EOL.'print(students[1].name == "Freda")'.$EOL.'print(students[1].gpa == 4.0)'.$EOL.'','test_code' => 'test_equal(getStudents(["a", "b"], [1, 2])[1].name, "b")'.$EOL.'test_equal(getStudents(["a", "b"], [1, 2])[1].gpa, 2)'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise583->id,'user_id' => $user->id]);
        $exercise585 = Exercise::create(['prompt' => 'Complete the function getStudents().','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    for i in range(len(names)):'.$EOL.'        name = names[i]'.$EOL.'        gpa = gpas[i]'.$EOL.'        student = Student(name, gpa)'.$EOL.'        students.append(student)'.$EOL.'    return students'.$EOL.'names = [ "Eddie", "Freda", "George", "Hannah" ]'.$EOL.'gpas = [ 3.9, 4.0, 3.5, 3.2 ]'.$EOL.'students = getStudents(names, gpas)'.$EOL.'print(students[0].name == "Eddie")'.$EOL.'print(students[0].gpa == 3.9)'.$EOL.'print(students[1].name == "Freda")'.$EOL.'print(students[1].gpa == 4.0)'.$EOL.'','test_code' => 'test_equal(getStudents(["a", "b"], [1, 2])[1].name, "b")'.$EOL.'test_equal(getStudents(["a", "b"], [1, 2])[1].gpa, 2)'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise584->id,'user_id' => $user->id]);
        $exercise586 = Exercise::create(['prompt' => 'Write a function called "getStudents" that takes a list of names and GPAs and returns a list of students with those names and gpas.','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'names = [ "Eddie", "Freda", "George", "Hannah" ]'.$EOL.'gpas = [ 3.9, 2.5, 3.5, 3.2 ]'.$EOL.'students = getStudents(names, gpas)'.$EOL.'for student in students:'.$EOL.'    print(student.name + " has gpa " + str(student.gpa))'.$EOL.'','test_code' => 'test_equal(getStudents(["a", "b"], [1, 2])[1].name, "b")'.$EOL.'test_equal(getStudents(["a", "b"], [1, 2])[1].gpa, 2)'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise585->id,'user_id' => $user->id]);
        $exercise587 = Exercise::create(['prompt' => 'Complete getNames() by adding a return statement. Hint: add "return names" indented exactly 4 spaces.','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        students.append(Student(names[i], gpas[i]))'.$EOL.'    return students'.$EOL.'def getNames(students):'.$EOL.'    names = []'.$EOL.'    for student in students:'.$EOL.'        names.append(student.name)'.$EOL.'students = getStudents([ "Eddie", "Freda", "George", "Hannah" ],'.$EOL.'                       [ 3.9, 2.5, 3.5, 3.2 ])'.$EOL.'names = getNames(students)'.$EOL.'print(names[0] == "Eddie")'.$EOL.'print(names[1] == "Freda")'.$EOL.'','test_code' => 'test_equal(names[0], "Eddie")'.$EOL.'test_equal(names[1], "Freda")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise586->id,'user_id' => $user->id]);
        $exercise588 = Exercise::create(['prompt' => 'Complete getNames() by adding a student"s name to the list of names.','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        students.append(Student(names[i], gpas[i]))'.$EOL.'    return students'.$EOL.'def getNames(students):'.$EOL.'    names = []'.$EOL.'    for student in students:'.$EOL.'        # add code here'.$EOL.'    return names'.$EOL.'students = getStudents([ "Eddie", "Freda", "George", "Hannah" ],'.$EOL.'                       [ 3.9, 2.5, 3.5, 3.2 ])'.$EOL.'names = getNames(students)'.$EOL.'print(names[0] == "Eddie")'.$EOL.'print(names[1] == "Freda")'.$EOL.'','test_code' => 'test_equal(names[0], "Eddie")'.$EOL.'test_equal(names[1], "Freda")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise587->id,'user_id' => $user->id]);
        $exercise589 = Exercise::create(['prompt' => 'Complete getNames() by writing a loop that adds each student"s name to the list of names.','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        students.append(Student(names[i], gpas[i]))'.$EOL.'    return students'.$EOL.'def getNames(students):'.$EOL.'    names = []'.$EOL.'    # add code here'.$EOL.'    return names'.$EOL.'students = getStudents([ "Eddie", "Freda", "George", "Hannah" ],'.$EOL.'                       [ 3.9, 2.5, 3.5, 3.2 ])'.$EOL.'names = getNames(students)'.$EOL.'print(names[0] == "Eddie")'.$EOL.'print(names[1] == "Freda")'.$EOL.'','test_code' => 'test_equal(names[0], "Eddie")'.$EOL.'test_equal(names[1], "Freda")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise588->id,'user_id' => $user->id]);
        $exercise590 = Exercise::create(['prompt' => 'In the location indicated by the comment, add a call to getNames() to get the names of the students.','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        students.append(Student(names[i], gpas[i]))'.$EOL.'    return students'.$EOL.'def getNames(students):'.$EOL.'    names = []'.$EOL.'    for student in students:'.$EOL.'        names.append(student.name)'.$EOL.'    return names'.$EOL.'students = getStudents([ "Eddie", "Freda", "George", "Hannah" ],'.$EOL.'                       [ 3.9, 2.5, 3.5, 3.2 ])'.$EOL.'# add code here'.$EOL.'print(names[0] == "Eddie")'.$EOL.'print(names[1] == "Freda")'.$EOL.'','test_code' => 'test_equal(names[0], "Eddie")'.$EOL.'test_equal(names[1], "Freda")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise589->id,'user_id' => $user->id]);
        $exercise591 = Exercise::create(['prompt' => 'Add a function called getGPAs() that takes a list of students and returns a list of their GPAs. This will be very similar to the getNames() function.','pre_code' => '','start_code' => 'class Student:'.$EOL.'    def __init__(self, name, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.gpa = gpa'.$EOL.'def getStudents(names, gpas):'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        students.append(Student(names[i], gpas[i]))'.$EOL.'    return students'.$EOL.'def getNames(students):'.$EOL.'    names = []'.$EOL.'    for student in students:'.$EOL.'        names.append(student.name)'.$EOL.'    return names'.$EOL.'# TODO add code here'.$EOL.'students = getStudents([ "Eddie", "Freda", "George", "Hannah" ],'.$EOL.'                       [ 3.9, 4.0, 3.5, 3.2 ])'.$EOL.'gpas = getGPAs(students)'.$EOL.'print(gpas[0] == 3.9)'.$EOL.'print(gpas[1] == 4.0)'.$EOL.'','test_code' => 'test_equal(gpas[0], 3.9)'.$EOL.'test_equal(gpas[1], 4.0)'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise590->id,'user_id' => $user->id]);
        $exercise592 = Exercise::create(['prompt' => 'Complete the getCars() function. Hint: "make = makes[i]"','pre_code' => '','start_code' => 'class Car:'.$EOL.'    def __init__(self, make, model):'.$EOL.'        self.make = make'.$EOL.'        self.model = model'.$EOL.'def getCars(makes, models):'.$EOL.'    cars = []'.$EOL.'    for i in range(len(makes)):'.$EOL.'        # TODO: uncomment and complete the following two lines'.$EOL.'        # make = '.$EOL.'        # model = '.$EOL.'        car = Car(make, model)'.$EOL.'        cars.append(car)'.$EOL.'    return cars'.$EOL.'makes = [ "Ford", "Toyota", "Toyota", "Honda" ]'.$EOL.'models = [ "F150", "Sienna", "Prius", "Civic" ]'.$EOL.'cars = getCars(makes, models)'.$EOL.'print(cars[0].make == "Ford")'.$EOL.'print(cars[0].model == "F150")'.$EOL.'print(cars[1].make == "Toyota")'.$EOL.'print(cars[1].model == "Sienna")'.$EOL.'','test_code' => 'test_equal(getCars(["a", "b"], ["c", "d"])[1].make, "b")'.$EOL.'test_equal(getCars(["a", "b"], ["c", "d"])[1].model, "d")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise591->id,'user_id' => $user->id]);
        $exercise593 = Exercise::create(['prompt' => 'Complete the getCars() function.','pre_code' => '','start_code' => 'class Car:'.$EOL.'    def __init__(self, make, model):'.$EOL.'        self.make = make'.$EOL.'        self.model = model'.$EOL.'def getCars(makes, models):'.$EOL.'    cars = []'.$EOL.'    for i in range(len(makes)):'.$EOL.'        make = makes[i]'.$EOL.'        model = models[i]'.$EOL.'        # TODO: create a car'.$EOL.'        cars.append(car)'.$EOL.'    return cars'.$EOL.'makes = [ "Ford", "Toyota", "Toyota", "Honda" ]'.$EOL.'models = [ "F150", "Sienna", "Prius", "Civic" ]'.$EOL.'cars = getCars(makes, models)'.$EOL.'print(cars[0].make == "Ford")'.$EOL.'print(cars[0].model == "F150")'.$EOL.'print(cars[1].make == "Toyota")'.$EOL.'print(cars[1].model == "Sienna")'.$EOL.'','test_code' => 'test_equal(getCars(["a", "b"], ["c", "d"])[1].make, "b")'.$EOL.'test_equal(getCars(["a", "b"], ["c", "d"])[1].model, "d")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise592->id,'user_id' => $user->id]);
        $exercise594 = Exercise::create(['prompt' => 'Complete the getCars() function.','pre_code' => '','start_code' => 'class Car:'.$EOL.'    def __init__(self, make, model):'.$EOL.'        self.make = make'.$EOL.'        self.model = model'.$EOL.'def getCars(makes, models):'.$EOL.'    cars = []'.$EOL.'    for i in range(len(makes)):'.$EOL.'        # TODO: create a car'.$EOL.'        cars.append(car)'.$EOL.'    return cars'.$EOL.'makes = [ "Ford", "Toyota", "Toyota", "Honda" ]'.$EOL.'models = [ "F150", "Sienna", "Prius", "Civic" ]'.$EOL.'cars = getCars(makes, models)'.$EOL.'print(cars[0].make == "Ford")'.$EOL.'print(cars[0].model == "F150")'.$EOL.'print(cars[1].make == "Toyota")'.$EOL.'print(cars[1].model == "Sienna")'.$EOL.'','test_code' => 'test_equal(getCars(["a", "b"], ["c", "d"])[1].make, "b")'.$EOL.'test_equal(getCars(["a", "b"], ["c", "d"])[1].model, "d")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise593->id,'user_id' => $user->id]);
        $exercise595 = Exercise::create(['prompt' => 'Complete the getCars() function.','pre_code' => '','start_code' => 'class Car:'.$EOL.'    def __init__(self, make, model):'.$EOL.'        self.make = make'.$EOL.'        self.model = model'.$EOL.'def getCars(makes, models):'.$EOL.'    for i in range(len(makes)):'.$EOL.'        make = makes[i]'.$EOL.'        model = models[i]'.$EOL.'        car = Car(make, model)'.$EOL.'        cars.append(car)'.$EOL.'    return cars'.$EOL.'makes = [ "Ford", "Toyota", "Toyota", "Honda" ]'.$EOL.'models = [ "F150", "Sienna", "Prius", "Civic" ]'.$EOL.'cars = getCars(makes, models)'.$EOL.'print(cars[0].make == "Ford")'.$EOL.'print(cars[0].model == "F150")'.$EOL.'print(cars[1].make == "Toyota")'.$EOL.'print(cars[1].model == "Sienna")'.$EOL.'','test_code' => 'test_equal(getCars(["a", "b"], ["c", "d"])[1].make, "b")'.$EOL.'test_equal(getCars(["a", "b"], ["c", "d"])[1].model, "d")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise594->id,'user_id' => $user->id]);
        $exercise596 = Exercise::create(['prompt' => 'Complete the getCars() function. Hint: the given code returns an empty list.','pre_code' => '','start_code' => 'class Car:'.$EOL.'    def __init__(self, make, model):'.$EOL.'        self.make = make'.$EOL.'        self.model = model'.$EOL.'def getCars(makes, models):'.$EOL.'    cars = []'.$EOL.'    for i in range(len(makes)):'.$EOL.'        make = makes[i]'.$EOL.'        model = models[i]'.$EOL.'        car = Car(make, model)'.$EOL.'    return cars'.$EOL.'makes = [ "Ford", "Toyota", "Toyota", "Honda" ]'.$EOL.'models = [ "F150", "Sienna", "Prius", "Civic" ]'.$EOL.'cars = getCars(makes, models)'.$EOL.'print(cars[0].make == "Ford")'.$EOL.'print(cars[0].model == "F150")'.$EOL.'print(cars[1].make == "Toyota")'.$EOL.'print(cars[1].model == "Sienna")'.$EOL.'','test_code' => 'test_equal(getCars(["a", "b"], ["c", "d"])[1].make, "b")'.$EOL.'test_equal(getCars(["a", "b"], ["c", "d"])[1].model, "d")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise595->id,'user_id' => $user->id]);
        $exercise597 = Exercise::create(['prompt' => 'Add code in the indicated spot that calls getCars().','pre_code' => '','start_code' => 'class Car:'.$EOL.'    def __init__(self, make, model):'.$EOL.'        self.make = make'.$EOL.'        self.model = model'.$EOL.'def getCars(makes, models):'.$EOL.'    cars = []'.$EOL.'    for i in range(len(makes)):'.$EOL.'        make = makes[i]'.$EOL.'        model = models[i]'.$EOL.'        car = Car(make, model)'.$EOL.'        cars.append(car)'.$EOL.'    return cars'.$EOL.'makes = [ "Ford", "Toyota", "Toyota", "Honda" ]'.$EOL.'models = [ "F150", "Sienna", "Prius", "Civic" ]'.$EOL.'# TODO: add code here'.$EOL.'print(cars[0].make == "Ford")'.$EOL.'print(cars[0].model == "F150")'.$EOL.'print(cars[1].make == "Toyota")'.$EOL.'print(cars[1].model == "Sienna")'.$EOL.'','test_code' => 'test_equal(getCars(["a", "b"], ["c", "d"])[1].make, "b")'.$EOL.'test_equal(getCars(["a", "b"], ["c", "d"])[1].model, "d")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise596->id,'user_id' => $user->id]);
        $exercise598 = Exercise::create(['prompt' => 'Write a function called "getModel2" that takes a list of cars as a parameter and returns the model of the car at index 2. Hint: if your parameter is named "cars", then you can get the car at index 2 using cars[2]. Hint: first assign "cars[2]" to a variable called "car". Then return "car.model". Last resort hint: your function will look like "def getModel2(cars):\ncar = cars[2]\nreturn car.model".','pre_code' => '','start_code' => 'class Car:'.$EOL.'    def __init__(self, make, model):'.$EOL.'        self.make = make'.$EOL.'        self.model = model'.$EOL.'def getCars(makes, models):'.$EOL.'    cars = []'.$EOL.'    for i in range(len(makes)):'.$EOL.'        car = Car(makes[i], models[i])'.$EOL.'        cars.append(car)'.$EOL.'    return cars'.$EOL.'makes = [ "Ford", "Toyota", "Toyota", "Honda" ]'.$EOL.'models = [ "F150", "Sienna", "Prius", "Civic" ]'.$EOL.'cars = getCars(makes, models)'.$EOL.'model2 = getModel2(cars)'.$EOL.'print(model2 == "Prius")'.$EOL.'','test_code' => 'cars2 = getCars(["a", "b", "z"], ["c", "d", "x"])'.$EOL.'test_equal(getModel2(cars2), "x")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise597->id,'user_id' => $user->id]);
        $exercise599 = Exercise::create(['prompt' => 'Write a function called "getMake0" that takes a list of cars as a parameter and returns the make of the car at index 0.','pre_code' => '','start_code' => 'class Car:'.$EOL.'    def __init__(self, make, model):'.$EOL.'        self.make = make'.$EOL.'        self.model = model'.$EOL.'def getCars(makes, models):'.$EOL.'    cars = []'.$EOL.'    for i in range(len(makes)):'.$EOL.'        car = Car(makes[i], models[i])'.$EOL.'        cars.append(car)'.$EOL.'    return cars'.$EOL.'makes = [ "Ford", "Toyota", "Toyota", "Honda" ]'.$EOL.'models = [ "F150", "Sienna", "Prius", "Civic" ]'.$EOL.'cars = getCars(makes, models)'.$EOL.'make0 = getMake0(cars)'.$EOL.'print(make0 == "Ford")'.$EOL.'','test_code' => 'cars2 = getCars(["a", "b", "z"], ["c", "d", "x"])'.$EOL.'test_equal(getMake0(cars2), "a")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise598->id,'user_id' => $user->id]);
        $exercise600 = Exercise::create(['prompt' => 'Write a function called "getMake" that takes a car object (not a list of cars!) as a parameter and returns the make of the car. Your code should output "True". Hint: the first line of your function should read: def getMake(car). Last resort hint: the function body should look like: return car.make','pre_code' => '','start_code' => 'class Car:'.$EOL.'    def __init__(self, make, model):'.$EOL.'        self.make = make'.$EOL.'        self.model = model'.$EOL.'def getCars(makes, models):'.$EOL.'    cars = []'.$EOL.'    for i in range(len(makes)):'.$EOL.'        car = Car(makes[i], models[i])'.$EOL.'        cars.append(car)'.$EOL.'    return cars'.$EOL.'makes = [ "Ford", "Toyota", "Toyota", "Honda" ]'.$EOL.'models = [ "F150", "Sienna", "Prius", "Civic" ]'.$EOL.'cars = getCars(makes, models)'.$EOL.'make = getMake(cars[0])'.$EOL.'print(make == "Ford")'.$EOL.'','test_code' => 'cars2 = getCars(["a", "b", "z"], ["c", "d", "x"])'.$EOL.'test_equal(getMake(cars2[0]), "a")'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise599->id,'user_id' => $user->id]);
        $exercise601 = Exercise::create(['prompt' => 'Create a variable of type Tree. The variable name should be maple. The species is "Maple", age is 123 and height is 44. Hint: you should add this code: "maple = Tree("Maple", 123, 44)"','pre_code' => '','start_code' => 'class Tree:'.$EOL.'    def __init__(self, species, age, height):'.$EOL.'        self.species = species'.$EOL.'        self.age = age'.$EOL.'        self.height = height'.$EOL.'# TODO: add code here'.$EOL.'print(maple.species == "Maple")'.$EOL.'print(maple.age == 123)'.$EOL.'','test_code' => 'test_equal(maple.species, "Maple")'.$EOL.'test_equal(maple.age, 123)'.$EOL.'test_equal(maple.height, 44)'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise600->id,'user_id' => $user->id]);
        $exercise602 = Exercise::create(['prompt' => 'Create two trees. The first tree should be assigned to a variable maple, with species "Maple", age 123 and height 44. The second tree should be named oak, with species "Oak", age 53 and height 52.','pre_code' => '','start_code' => 'class Tree:'.$EOL.'    def __init__(self, species, age, height):'.$EOL.'        self.species = species'.$EOL.'        self.age = age'.$EOL.'        self.height = height'.$EOL.'# TODO: add code here'.$EOL.'print(maple.species == "Maple")'.$EOL.'print(maple.age == 123)'.$EOL.'print(oak.species == "Oak")'.$EOL.'print(oak.height == 52)'.$EOL.'','test_code' => 'test_equal(maple.species, "Maple")'.$EOL.'test_equal(maple.age, 123)'.$EOL.'test_equal(maple.height, 44)'.$EOL.'test_equal(oak.species, "Oak")'.$EOL.'test_equal(oak.age, 53)'.$EOL.'test_equal(oak.height, 52)'.$EOL.'','lesson_id' => $lesson38->id,'previous_exercise_id' => $exercise601->id,'user_id' => $user->id]);
        $project27 = Project::create(['name' => ' Student database','open_date' => '2018-07-28 0:00:00','close_date' => '2018-07-30 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'This project is to be done individually.'.$EOL.'<p><p>You will create a student database application. You will be able to print a list of students using different filters, such as filtering on age or gpa. See <a href="https://youtu.be/IljnWSiLCF4" target=_blank>this video</a> for a demonstration.'.$EOL.'<p><p>You must create a Student class, complete the createStudents() and printStudents() functions, and write the following functions: aboveAge(age, students) that returns a list of students with age greater than "age", belowAge(age, students), aboveGpa(gpa, students) and belowGpa(gpa, students). Your output table must be formatted nicely, similar to what is shown in the example video.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '# TODO create a Student class that stores name, age and gpa'.$EOL.'# Creates a list of students        '.$EOL.'def createStudents():'.$EOL.'    nameString = "Sally Jed Frank Lucy Luigi Ivan Francisca Muhibur Thelonius Patrick"'.$EOL.'    ageString = "19 20 20 27 31 21 24 33 45 18"'.$EOL.'    gpaString = "3.4 3.3 3.8 2.7 2.9 3.9 4.0 1.9 2.8 3.3"'.$EOL.'    # split returns a list of strings'.$EOL.'    names = nameString.split()'.$EOL.'    ages = ageString.split()'.$EOL.'    gpas = gpaString.split()'.$EOL.'    # TODO create the students, add them to a list and return the list'.$EOL.'def printStudents(students):'.$EOL.'    # TODO print a table of the students in the given list.'.$EOL.'    # Remember that "{:>10}".format(...) formats the string right-justified'.$EOL.'    # with 10 spaces for the string.'.$EOL.'    print("Printing students")'.$EOL.'# TODO do most of your work here.'.$EOL.'','solution' => 'class Student:'.$EOL.'    def __init__(self, name, age, gpa):'.$EOL.'        self.name = name'.$EOL.'        self.age = age'.$EOL.'        self.gpa = gpa'.$EOL.'def createStudents():'.$EOL.'    nameString = "Sally Jed Frank Lucy Luigi Ivan Francisca Muhibur Thelonius Patrick"'.$EOL.'    ageString = "19 20 20 27 31 21 24 33 45 18"'.$EOL.'    gpaString = "3.4 3.3 3.8 2.7 2.9 3.9 4.0 1.9 2.8 3.3"'.$EOL.'    names = nameString.split()'.$EOL.'    ages = ageString.split()'.$EOL.'    gpas = gpaString.split()'.$EOL.'    students = []'.$EOL.'    for i in range(len(names)):'.$EOL.'        s = Student(names[i], int(ages[i]), float(gpas[i]))'.$EOL.'        students.append(s)'.$EOL.'    return students'.$EOL.'def printStudents(students):'.$EOL.'    print("{:>10}  {}  {}".format("Name", "Age", "GPA"))'.$EOL.'    for s in students:'.$EOL.'        print("{:>10}  {:<4} {:.1}".format(s.name, s.age, s.gpa))'.$EOL.'def aboveAge(age, students):'.$EOL.'    return [s for s in students if s.age > age]'.$EOL.'def belowAge(age, students):'.$EOL.'    return [s for s in students if s.age < age]'.$EOL.'def aboveGpa(gpa, students):'.$EOL.'    return [s for s in students if s.gpa > gpa]'.$EOL.'def belowGpa(gpa, students):'.$EOL.'    return [s for s in students if s.gpa < gpa]'.$EOL.'students = createStudents()'.$EOL.'report = input("What report would you like to run? \n[a=all b=aboveAge, c=belowAge, d=aboveGpa, e=belowGpa, q=quit]")'.$EOL.'if report == "a":'.$EOL.'    printStudents(students)'.$EOL.'elif report == "b" or report == "c":'.$EOL.'    age = int(input("Enter age"))'.$EOL.'    if report == "b":'.$EOL.'        printStudents(aboveAge(age, students))'.$EOL.'    if report == "c":'.$EOL.'        printStudents(belowAge(age, students))'.$EOL.'elif report == "d" or report == "e":'.$EOL.'    gpa = float(input("Enter GPA"))'.$EOL.'    if report == "d":'.$EOL.'        printStudents(aboveGpa(gpa, students))'.$EOL.'    if report == "e":'.$EOL.'        printStudents(belowGpa(gpa, students))'.$EOL.'','module_id' => $module17->id,'previous_lesson_id' => $lesson38->id,'user_id' => $user->id]);
        $concept12= Concept::create(['name' => 'Advanced Lists','course_id' => $course->id,'previous_concept_id' => $concept11->id,'user_id' => $user->id]);
        $module18= Module::create(['name' => 'Searching','concept_id' => $concept12->id,'open_date' => '2018-07-31 0:00:00','user_id' => $user->id]);
        $lesson39= Lesson::create(['name' => 'lists - search','module_id' =>  $module18->id,'user_id' => $user->id]);
        $exercise603 = Exercise::create(['prompt' => 'Add a return statement to the getAuthor() function. Hint: you should add "return author".','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the author of the book with the given title. If there is no'.$EOL.'# such book in the list, None is returned.'.$EOL.'def getAuthor(title, books):'.$EOL.'    author = None'.$EOL.'    for book in books:'.$EOL.'        if book.title == title:'.$EOL.'            author = book.author'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getAuthor("Frankenstein", books) == "Mary Shelley")'.$EOL.'print(getAuthor("Great Expectations", books) == "Charles Dickens")'.$EOL.'print(getAuthor("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getAuthor("Frankenstein", books), "Mary Shelley")'.$EOL.'test_equal(getAuthor("Great Expectations", books), "Charles Dickens")'.$EOL.'test_equal(getAuthor("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'user_id' => $user->id]);
        $exercise604 = Exercise::create(['prompt' => 'Fix the bug. Hint: getAuthor needs an additional parameter. Hint: the additional parameter is the list of books.','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the author of the book with the given title. If there is no'.$EOL.'# such book in the list, None is returned.'.$EOL.'def getAuthor(title):'.$EOL.'    author = None'.$EOL.'    for book in books:'.$EOL.'        if book.title == title:'.$EOL.'            author = book.author'.$EOL.'    return author'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getAuthor("Frankenstein", books) == "Mary Shelley")'.$EOL.'print(getAuthor("Great Expectations", books) == "Charles Dickens")'.$EOL.'print(getAuthor("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getAuthor("Frankenstein", books), "Mary Shelley")'.$EOL.'test_equal(getAuthor("Great Expectations", books), "Charles Dickens")'.$EOL.'test_equal(getAuthor("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise603->id,'user_id' => $user->id]);
        $exercise605 = Exercise::create(['prompt' => 'Fix the bug. Hint: getAuthor needs an additional parameter. Hint: the additional parameter is the title of the book.','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the author of the book with the given title. If there is no'.$EOL.'# such book in the list, None is returned.'.$EOL.'def getAuthor(books):'.$EOL.'    author = None'.$EOL.'    for book in books:'.$EOL.'        if book.title == title:'.$EOL.'            author = book.author'.$EOL.'    return author'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getAuthor("Frankenstein", books) == "Mary Shelley")'.$EOL.'print(getAuthor("Great Expectations", books) == "Charles Dickens")'.$EOL.'print(getAuthor("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getAuthor("Frankenstein", books), "Mary Shelley")'.$EOL.'test_equal(getAuthor("Great Expectations", books), "Charles Dickens")'.$EOL.'test_equal(getAuthor("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise604->id,'user_id' => $user->id]);
        $exercise606 = Exercise::create(['prompt' => 'Complete the getAuthor() function.','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the author of the book with the given title. If there is no'.$EOL.'# such book in the list, None is returned.'.$EOL.'def getAuthor(title, books):'.$EOL.'    author = None'.$EOL.'    for book in books:'.$EOL.'        # TODO: add code here'.$EOL.'    return author'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getAuthor("Frankenstein", books) == "Mary Shelley")'.$EOL.'print(getAuthor("Great Expectations", books) == "Charles Dickens")'.$EOL.'print(getAuthor("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getAuthor("Frankenstein", books), "Mary Shelley")'.$EOL.'test_equal(getAuthor("Great Expectations", books), "Charles Dickens")'.$EOL.'test_equal(getAuthor("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise605->id,'user_id' => $user->id]);
        $exercise607 = Exercise::create(['prompt' => 'Complete the getAuthor() function.','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the author of the book with the given title. If there is no'.$EOL.'# such book in the list, None is returned.'.$EOL.'def getAuthor(title, books):'.$EOL.'    # TODO: add code here.'.$EOL.'    for book in books:'.$EOL.'        if book.title == title:'.$EOL.'            author = book.author'.$EOL.'    return author'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getAuthor("Frankenstein", books) == "Mary Shelley")'.$EOL.'print(getAuthor("Great Expectations", books) == "Charles Dickens")'.$EOL.'print(getAuthor("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getAuthor("Frankenstein", books), "Mary Shelley")'.$EOL.'test_equal(getAuthor("Great Expectations", books), "Charles Dickens")'.$EOL.'test_equal(getAuthor("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise606->id,'user_id' => $user->id]);
        $exercise608 = Exercise::create(['prompt' => 'Convert the getAuthor() function to a function called getPrice(). Hint: rename the function and change "author" to "price" everywhere in the function.','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the author of the book with the given title. If there is no'.$EOL.'# such book in the list, None is returned.'.$EOL.'def getAuthor(title, books):'.$EOL.'    author = None'.$EOL.'    for book in books:'.$EOL.'        if book.title == title:'.$EOL.'            author = book.author'.$EOL.'    return author'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getPrice("Frankenstein", books) == 5.95)'.$EOL.'print(getPrice("Great Expectations", books) == 5.25)'.$EOL.'print(getPrice("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getPrice("Frankenstein", books), 5.95)'.$EOL.'test_equal(getPrice("Great Expectations", books), 5.25)'.$EOL.'test_equal(getPrice("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise607->id,'user_id' => $user->id]);
        $exercise609 = Exercise::create(['prompt' => 'Fix the bug in getBook(). Hint: it lacks a return statement.','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the book object given a title. Returns None if no such'.$EOL.'# book is in the list.'.$EOL.'def getBook(title, books):'.$EOL.'    foundBook = None'.$EOL.'    for book in books:'.$EOL.'        if book.title == title:'.$EOL.'            foundBook = book'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getBook("Frankenstein", books).author == "Mary Shelley")'.$EOL.'print(getBook("Great Expectations", books).price == 5.25)'.$EOL.'print(getBook("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getBook("Frankenstein", books).author, "Mary Shelley")'.$EOL.'test_equal(getBook("Great Expectations", books).price, 5.25)'.$EOL.'test_equal(getBook("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise608->id,'user_id' => $user->id]);
        $exercise610 = Exercise::create(['prompt' => 'Complete the getBook() function.','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the book object given a title. Returns None if no such'.$EOL.'# book is in the list.'.$EOL.'def getBook(title, books):'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getBook("Frankenstein", books).author == "Mary Shelley")'.$EOL.'print(getBook("Great Expectations", books).price == 5.25)'.$EOL.'print(getBook("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getBook("Frankenstein", books).author, "Mary Shelley")'.$EOL.'test_equal(getBook("Great Expectations", books).price, 5.25)'.$EOL.'test_equal(getBook("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise609->id,'user_id' => $user->id]);
        $exercise611 = Exercise::create(['prompt' => 'Note the getAuthor() calls getBook(). Fix the bug in getAuthor(). Hint: it lacks a return statement in the else clause. Hint: it should return None in the else clause.','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the book object given a title. Returns None if no such'.$EOL.'# book is in the list.'.$EOL.'def getBook(title, books):'.$EOL.'    foundBook = None'.$EOL.'    for book in books:'.$EOL.'        if book.title == title:'.$EOL.'            foundBook = book'.$EOL.'    return foundBook'.$EOL.'# Returns the author of the book with the given title. Returns None if no such'.$EOL.'# book is in the list.'.$EOL.'def getAuthor(title, books):'.$EOL.'    book = getBook(title, books)'.$EOL.'    if book != None:'.$EOL.'        return book.author'.$EOL.'    else:'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getAuthor("Frankenstein", books) == "Mary Shelley")'.$EOL.'print(getAuthor("Great Expectations", books) == "Charles Dickens")'.$EOL.'print(getAuthor("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getAuthor("Frankenstein", books), "Mary Shelley")'.$EOL.'test_equal(getAuthor("Great Expectations", books), "Charles Dickens")'.$EOL.'test_equal(getAuthor("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise610->id,'user_id' => $user->id]);
        $exercise612 = Exercise::create(['prompt' => 'Write a function called getPrice() that uses getBook(). It should be similar to getAuthor().','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the book object given a title. Returns None if no such'.$EOL.'# book is in the list.'.$EOL.'def getBook(title, books):'.$EOL.'    foundBook = None'.$EOL.'    for book in books:'.$EOL.'        if book.title == title:'.$EOL.'            foundBook = book'.$EOL.'    return foundBook'.$EOL.'# Returns the author of the book with the given title. Returns None if no such'.$EOL.'# book is in the list.'.$EOL.'def getAuthor(title, books):'.$EOL.'    book = getBook(title, books)'.$EOL.'    if book != None:'.$EOL.'        return book.author'.$EOL.'    else:'.$EOL.'        return None'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getPrice("Frankenstein", books) == 5.95)'.$EOL.'print(getPrice("Great Expectations", books) == 5.25)'.$EOL.'print(getPrice("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getPrice("Frankenstein", books), 5.95)'.$EOL.'test_equal(getPrice("Great Expectations", books), 5.25)'.$EOL.'test_equal(getPrice("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise611->id,'user_id' => $user->id]);
        $exercise613 = Exercise::create(['prompt' => 'Write the function getBook().','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the author of the book with the given title. Returns None if no such'.$EOL.'# book is in the list.'.$EOL.'def getAuthor(title, books):'.$EOL.'    book = getBook(title, books)'.$EOL.'    if book != None:'.$EOL.'        return book.author'.$EOL.'    else:'.$EOL.'        return None'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getAuthor("Frankenstein", books) == "Mary Shelley")'.$EOL.'print(getAuthor("Great Expectations", books) == "Charles Dickens")'.$EOL.'print(getAuthor("Crime and Punishment", books) == None)'.$EOL.'','test_code' => 'test_equal(getAuthor("Frankenstein", books), "Mary Shelley")'.$EOL.'test_equal(getAuthor("Great Expectations", books), "Charles Dickens")'.$EOL.'test_equal(getAuthor("Crime and Punishment", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise612->id,'user_id' => $user->id]);
        $exercise614 = Exercise::create(['prompt' => 'Write the function getBookByAuthor(). It should be very similar to getBook() in the previous exercise.','pre_code' => '','start_code' => 'class Book:'.$EOL.'    def __init__(self, theTitle, theAuthor, thePrice):'.$EOL.'        self.title = theTitle'.$EOL.'        self.author = theAuthor'.$EOL.'        self.price = thePrice'.$EOL.'# Returns the book with the given author. Returns None if no'.$EOL.'# such book is in the list.'.$EOL.'def getBookByAuthor(author, books):'.$EOL.'books = [Book("Great Expectations", "Charles Dickens", 5.25),'.$EOL.'        Book("Sense and Sensibility", "Jane Austen", 15.99),'.$EOL.'        Book("Madame Bovary", "Gustave Flaubert", 19.50),'.$EOL.'        Book("Count of Monte Cristo", "Alexandre Dumas", 9.35),'.$EOL.'        Book("Frankenstein", "Mary Shelley", 5.95)]'.$EOL.'print(getBookByAuthor("Mary Shelley", books).title == "Frankenstein")'.$EOL.'print(getBookByAuthor("Charles Dickens", books).price == 5.25)'.$EOL.'print(getBookByAuthor("Fyodor Dostoyevsky", books) == None)'.$EOL.'','test_code' => 'test_equal(getBookByAuthor("Mary Shelley", books).title, "Frankenstein")'.$EOL.'test_equal(getBookByAuthor("Charles Dickens", books).price, 5.25)'.$EOL.'test_equal(getBookByAuthor("Fyodor Dostoyevsky", books), None)'.$EOL.'','lesson_id' => $lesson39->id,'previous_exercise_id' => $exercise613->id,'user_id' => $user->id]);
        $lesson40= Lesson::create(['name' => '2D lists','module_id' =>  $module18->id,'previous_lesson_id' => $lesson39->id,'user_id' => $user->id]);
        $exercise615 = Exercise::create(['prompt' => 'Some lists have numbers. Some lists have objects. And some lists have other lists! Add another sublist to the "grid" variable so that the last line of the printed grid is "7 8 9". Hint: the grid will be instantiated as follows: "grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]".','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for mrow in grid:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# TODO: change code on the line below'.$EOL.'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(gridString(grid))'.$EOL.'print(grid[2] == [7, 8, 9])'.$EOL.'','test_code' => 'test_equal(grid[2], [7, 8, 9])'.$EOL.'','lesson_id' => $lesson40->id,'user_id' => $user->id]);
        $exercise616 = Exercise::create(['prompt' => 'Add another sublist so that the last row of the grid is "2 4 6".','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for mrow in grid:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# TODO: change code on the line below'.$EOL.'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(gridString(grid))'.$EOL.'print(grid[2] == [2, 4, 6])'.$EOL.'','test_code' => 'test_equal(grid[2], [2, 4, 6])'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise615->id,'user_id' => $user->id]);
        $exercise617 = Exercise::create(['prompt' => 'Insert a row into "grid" so that the first row is "2 4 6". Hint: you will add the new sublist _before_ the [1, 2, 3] sublist.','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for mrow in grid:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(gridString(grid))'.$EOL.'print(grid[0] == [2, 4, 6])'.$EOL.'print(grid[2] == [4, 5, 6])'.$EOL.'','test_code' => 'test_equal(grid[0], [2, 4, 6])'.$EOL.'test_equal(grid[2], [4, 5, 6])'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise616->id,'user_id' => $user->id]);
        $exercise618 = Exercise::create(['prompt' => 'Modify "gridRowStr" so that only the ith element of the given list is printed. Hint: the body of the function should look like "return str(m[i])".','pre_code' => '','start_code' => 'def gridRowStr(m, i):'.$EOL.'    return str(m)'.$EOL.'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(gridRowStr(grid, 0))'.$EOL.'print(gridRowStr(grid, 0) == "[1, 2, 3]")'.$EOL.'print(gridRowStr(grid, 1) == "[4, 5, 6]")'.$EOL.'','test_code' => 'test_equal(gridRowStr(grid, 0), "[1, 2, 3]")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise617->id,'user_id' => $user->id]);
        $exercise619 = Exercise::create(['prompt' => 'Write a function "gridRowStr" that returns a string representation of the ith element of a given list.','pre_code' => '','start_code' => 'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(gridRowStr(grid, 0))'.$EOL.'print(gridRowStr(grid, 0) == "[1, 2, 3]")'.$EOL.'print(gridRowStr(grid, 1) == "[4, 5, 6]")'.$EOL.'','test_code' => 'test_equal(gridRowStr(grid, 0), "[1, 2, 3]")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise618->id,'user_id' => $user->id]);
        $exercise620 = Exercise::create(['prompt' => 'Add a return statement to getElement().','pre_code' => '','start_code' => 'def getElement(m, row, col):'.$EOL.'    mrow = m[row]'.$EOL.'    element = mrow[col]'.$EOL.'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(getElement(grid, 0, 0) == 1)'.$EOL.'print(getElement(grid, 1, 1) == 5)'.$EOL.'print(getElement(grid, 1, 2) == 6)'.$EOL.'','test_code' => 'test_equal(getElement(grid, 1, 1), 5)'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise619->id,'user_id' => $user->id]);
        $exercise621 = Exercise::create(['prompt' => 'Complete the getElement() function.','pre_code' => '','start_code' => 'def getElement(m, row, col):'.$EOL.'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(getElement(grid, 0, 0) == 1)'.$EOL.'print(getElement(grid, 1, 1) == 5)'.$EOL.'print(getElement(grid, 1, 2) == 6)'.$EOL.'','test_code' => 'test_equal(getElement(grid, 1, 1), 5)'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise620->id,'user_id' => $user->id]);
        $exercise622 = Exercise::create(['prompt' => 'Write a function "getElement" that returns the value at the given row and column.','pre_code' => '','start_code' => 'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(getElement(grid, 0, 0) == 1)'.$EOL.'print(getElement(grid, 1, 1) == 5)'.$EOL.'print(getElement(grid, 1, 2) == 6)'.$EOL.'','test_code' => 'test_equal(getElement(grid, 1, 1), 5)'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise621->id,'user_id' => $user->id]);
        $exercise623 = Exercise::create(['prompt' => 'Modify "getElement" so that the function body has only one line of code. Hint: the body of the function will look like this: "return m[row][col]". Note: the tests will pass even if you leave the code as-is, but you should do the exercise anyway.','pre_code' => '','start_code' => 'def getElement(m, row, col):'.$EOL.'    mrow = m[row]'.$EOL.'    return mrow[col]'.$EOL.'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(getElement(grid, 0, 0) == 1)'.$EOL.'print(getElement(grid, 1, 1) == 5)'.$EOL.'print(getElement(grid, 1, 2) == 6)'.$EOL.'','test_code' => 'test_equal(getElement(grid, 1, 1), 5)'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise622->id,'user_id' => $user->id]);
        $exercise624 = Exercise::create(['prompt' => 'Write a function "getElement" that returns the value at the given row and column. The body of the function should have a single line of code. The program should print True.','pre_code' => '','start_code' => 'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'print(getElement(grid, 0, 0) == 1)'.$EOL.'print(getElement(grid, 1, 1) == 5)'.$EOL.'print(getElement(grid, 1, 2) == 6)'.$EOL.'','test_code' => 'test_equal(getElement(grid, 1, 1), 5)'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise623->id,'user_id' => $user->id]);
        $exercise625 = Exercise::create(['prompt' => 'Write a function "gridRowStr(grid, i)" that returns a string representation of the ith element of a given list. Hint: the function body should be "return str(grid[i])"','pre_code' => '','start_code' => 'grid = [ ["a", "b", "c"], ["d", "e", "f"] ]'.$EOL.'print(gridRowStr(grid, 0) == "["a", "b", "c"]")'.$EOL.'print(gridRowStr(grid, 1) == "["d", "e", "f"]")'.$EOL.'','test_code' => 'test_equal(gridRowStr(grid, 0), "["a", "b", "c"]")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise624->id,'user_id' => $user->id]);
        $exercise626 = Exercise::create(['prompt' => 'Add a return value to "gridRowStr". This function will print grid rows of any length.','pre_code' => '','start_code' => 'def gridRowStr(m, row):'.$EOL.'    s = ""'.$EOL.'    mrow = m[row]'.$EOL.'    for entry in mrow:'.$EOL.'        s += "{:<4}".format(entry)'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi"] ]'.$EOL.'print(gridRowStr(grid, 0) == "a   b   c   d   ")'.$EOL.'print(gridRowStr(grid, 1) == "ef  ghi ")'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi", "jk", "l"] ]'.$EOL.'print(gridRowStr(grid, 0) == "a   b   c   d   ")'.$EOL.'print(gridRowStr(grid, 1) == "ef  ghi jk  l   ")'.$EOL.'','test_code' => 'test_equal(gridRowStr(grid, 1), "ef  ghi jk  l   ")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise625->id,'user_id' => $user->id]);
        $exercise627 = Exercise::create(['prompt' => 'Fill in the missing code in gridRowStr().','pre_code' => '','start_code' => 'def gridRowStr(m, row):'.$EOL.'    mrow = m[row]'.$EOL.'    for entry in mrow:'.$EOL.'        s += "{:<4}".format(entry)'.$EOL.'    return s'.$EOL.'grid = [ ["a", "b", "c"], ["d", "ef", "ghi"] ]'.$EOL.'print(gridRowStr(grid, 0) == "a   b   c   ")'.$EOL.'print(gridRowStr(grid, 1) == "d   ef  ghi ")'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi", "jk", "l"] ]'.$EOL.'print(gridRowStr(grid, 0) == "a   b   c   d   ")'.$EOL.'print(gridRowStr(grid, 1) == "ef  ghi jk  l   ")'.$EOL.'','test_code' => 'test_equal(gridRowStr(grid, 1), "ef  ghi jk  l   ")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise626->id,'user_id' => $user->id]);
        $exercise628 = Exercise::create(['prompt' => 'Fill in the missing code in gridRowStr().','pre_code' => '','start_code' => 'def gridRowStr(m, row):'.$EOL.'    s = ""'.$EOL.'    mrow = m[row]'.$EOL.'    for entry in mrow:'.$EOL.'    return s'.$EOL.'grid = [ ["a", "b", "c"], ["d", "ef", "ghi"] ]'.$EOL.'print(gridRowStr(grid, 0) == "a   b   c   ")'.$EOL.'print(gridRowStr(grid, 1) == "d   ef  ghi ")'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi", "jk", "l"] ]'.$EOL.'print(gridRowStr(grid, 0) == "a   b   c   d   ")'.$EOL.'print(gridRowStr(grid, 1) == "ef  ghi jk  l   ")'.$EOL.'','test_code' => 'test_equal(gridRowStr(grid, 1), "ef  ghi jk  l   ")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise627->id,'user_id' => $user->id]);
        $exercise629 = Exercise::create(['prompt' => 'Fill in the missing code in gridRowStr().','pre_code' => '','start_code' => 'def gridRowStr(m, row):'.$EOL.'    s = ""'.$EOL.'    mrow = m[row]'.$EOL.'    return s'.$EOL.'grid = [ ["a", "b", "c"], ["d", "ef", "ghi"] ]'.$EOL.'print(gridRowStr(grid, 0) == "a   b   c   ")'.$EOL.'print(gridRowStr(grid, 1) == "d   ef  ghi ")'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi", "jk", "l"] ]'.$EOL.'print(gridRowStr(grid, 0) == "a   b   c   d   ")'.$EOL.'print(gridRowStr(grid, 1) == "ef  ghi jk  l   ")'.$EOL.'','test_code' => 'test_equal(gridRowStr(grid, 1), "ef  ghi jk  l   ")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise628->id,'user_id' => $user->id]);
        $exercise630 = Exercise::create(['prompt' => 'Function "gridStr" returns a string representation of a grid. It loops over each row and then over each cell in the row. Change the code so that each entry in the grid takes up 4 spaces instead of 3. The code should print True.','pre_code' => '','start_code' => 'def gridStr(m):'.$EOL.'    s = ""'.$EOL.'    for mrow in m:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<3}".format(entry)'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'grid = [ ["a", "b", "c"], ["d", "ef", "ghi"] ]'.$EOL.'print(gridStr(grid) == "a   b   c   \nd   ef  ghi \n")'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi", "jk", "l"] ]'.$EOL.'print(gridStr(grid) == "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','test_code' => 'test_equal(gridStr(grid), "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise629->id,'user_id' => $user->id]);
        $exercise631 = Exercise::create(['prompt' => 'Fix the bug in gridStr().','pre_code' => '','start_code' => 'def gridStr(m):'.$EOL.'    s = ""'.$EOL.'    for mrow in m:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'    return s'.$EOL.'grid = [ ["a", "b", "c"], ["d", "ef", "ghi"] ]'.$EOL.'print(gridStr(grid))'.$EOL.'print(gridStr(grid) == "a   b   c   \nd   ef  ghi \n")'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi", "jk", "l"] ]'.$EOL.'print(gridStr(grid) == "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','test_code' => 'test_equal(gridStr(grid), "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise630->id,'user_id' => $user->id]);
        $exercise632 = Exercise::create(['prompt' => 'Fix the bug in gridStr().','pre_code' => '','start_code' => 'def gridStr(m):'.$EOL.'    s = ""'.$EOL.'    for mrow in m:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'            s += "\n"'.$EOL.'    return s'.$EOL.'grid = [ ["a", "b", "c"], ["d", "ef", "ghi"] ]'.$EOL.'print(gridStr(grid))'.$EOL.'print(gridStr(grid) == "a   b   c   \nd   ef  ghi \n")'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi", "jk", "l"] ]'.$EOL.'print(gridStr(grid) == "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','test_code' => 'test_equal(gridStr(grid), "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise631->id,'user_id' => $user->id]);
        $exercise633 = Exercise::create(['prompt' => 'Fix the bug in gridStr(). Do NOT change the way the for loops run. You will simply need to add a line of code.','pre_code' => '','start_code' => 'def gridStr(m):'.$EOL.'    s = ""'.$EOL.'    for row in range(len(m)):'.$EOL.'        for col in range(len(m[row])):'.$EOL.'            s += "{:<4}".format(m[row][col])'.$EOL.'    return s'.$EOL.'grid = [ ["a", "b", "c"], ["d", "ef", "ghi"] ]'.$EOL.'print(gridStr(grid))'.$EOL.'print(gridStr(grid) == "a   b   c   \nd   ef  ghi \n")'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi", "jk", "l"] ]'.$EOL.'print(gridStr(grid) == "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','test_code' => 'test_equal(gridStr(grid), "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise632->id,'user_id' => $user->id]);
        $exercise634 = Exercise::create(['prompt' => 'Fix the bug in gridStr(). Do NOT change the way the for loops run. Hint: the bug is on line 5.','pre_code' => '','start_code' => 'def gridStr(m):'.$EOL.'    s = ""'.$EOL.'    for row in range(len(m)):'.$EOL.'        for col in range(len(m[row])):'.$EOL.'            s += "{:<4}".format(m[col][row])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'grid = [ ["a", "b", "c"], ["d", "ef", "ghi"] ]'.$EOL.'print(gridStr(grid))'.$EOL.'print(gridStr(grid) == "a   b   c   \nd   ef  ghi \n")'.$EOL.'grid = [ ["a", "b", "c", "d"], ["ef", "ghi", "jk", "l"] ]'.$EOL.'print(gridStr(grid) == "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','test_code' => 'test_equal(gridStr(grid), "a   b   c   d   \nef  ghi jk  l   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise633->id,'user_id' => $user->id]);
        $exercise635 = Exercise::create(['prompt' => '"getColumn" returns a list of the elements in the given column of a grid. Fix the bug in col0 so that True is printed. Hint: the zeroth column should read "1 4 7".','pre_code' => '','start_code' => 'def getColumn(grid, colIndex):'.$EOL.'    mcol = []'.$EOL.'    for mrow in grid:'.$EOL.'        mcol.append(mrow[colIndex])'.$EOL.'    return mcol'.$EOL.'grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]'.$EOL.'col0 = [1, 4, 8]'.$EOL.'col1 = [2, 5, 8]'.$EOL.'print(getColumn(grid, 0) == col0)'.$EOL.'print(getColumn(grid, 1) == col1)'.$EOL.'','test_code' => 'test_equal(col0, [1, 4, 7])'.$EOL.'test_equal(getColumn(grid, 2), [3, 6, 9])'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise634->id,'user_id' => $user->id]);
        $exercise636 = Exercise::create(['prompt' => 'Fix the bug in col0 so that True is printed.','pre_code' => '','start_code' => 'def getColumn(grid, colIndex):'.$EOL.'    mcol = []'.$EOL.'    for mrow in grid:'.$EOL.'        mcol.append(mrow[colIndex])'.$EOL.'    return mcol'.$EOL.'grid = [ [1, 2, 3], [3, 5, 6], [7, 8, 9] ]'.$EOL.'col0 = [1, 4, 7]'.$EOL.'col1 = [2, 5, 8]'.$EOL.'print(getColumn(grid, 0) == col0)'.$EOL.'print(getColumn(grid, 1) == col1)'.$EOL.'','test_code' => 'test_equal(col0, [1, 3, 7])'.$EOL.'test_equal(getColumn(grid, 2), [3, 6, 9])'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise635->id,'user_id' => $user->id]);
        $exercise637 = Exercise::create(['prompt' => 'Write a function "getColumn" that returns a list of the elements in the given column of a grid.','pre_code' => '','start_code' => 'grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]'.$EOL.'col0 = [1, 4, 7]'.$EOL.'col1 = [2, 5, 8]'.$EOL.'print(getColumn(grid, 0) == col0)'.$EOL.'print(getColumn(grid, 1) == col1)'.$EOL.'','test_code' => 'test_equal(getColumn(grid, 2), [3, 6, 9])'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise636->id,'user_id' => $user->id]);
        $exercise638 = Exercise::create(['prompt' => 'Add a row [7, 8, 9] to the end of the grid so that True is printed. You should use the "append" method.','pre_code' => '','start_code' => 'def getGridStr(m):'.$EOL.'    s = ""'.$EOL.'    for mrow in m:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'grid = [ [1, 2, 3], [4, 5, 6] ]'.$EOL.'# add code here'.$EOL.'print(getGridStr(grid))'.$EOL.'print(getGridStr(grid) == "1   2   3   \n4   5   6   \n7   8   9   \n")'.$EOL.'','test_code' => 'test_equal(getGridStr(grid), "1   2   3   \n4   5   6   \n7   8   9   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise637->id,'user_id' => $user->id]);
        $exercise639 = Exercise::create(['prompt' => 'Fix the bugs in "squareGrid" so that it returns a grid of size nxn that counts up numbers. Your code should print True. Hint: the squareGrid() function currently creates a 3x3 grid everytime, when it should use "n" for the number of rows and columns.','pre_code' => '','start_code' => 'def getGridStr(grid):'.$EOL.'    s = ""'.$EOL.'    for mrow in grid:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'def squareGrid(n):'.$EOL.'    grid = []'.$EOL.'    entry = 1'.$EOL.'    for row in range(3):'.$EOL.'        mrow = []'.$EOL.'        for col in range(3):'.$EOL.'            mrow.append(entry)'.$EOL.'            entry += 1'.$EOL.'        grid.append(mrow)'.$EOL.'    return grid'.$EOL.'grid = squareGrid(4)'.$EOL.'print(getGridStr(grid))'.$EOL.'print(getGridStr(grid) == "1   2   3   4   \n5   6   7   8   \n9   10  11  12  \n13  14  15  16  \n")'.$EOL.'','test_code' => 'grid = squareGrid(2)'.$EOL.'test_equal(getGridStr(grid), "1   2   \n3   4   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise638->id,'user_id' => $user->id]);
        $exercise640 = Exercise::create(['prompt' => 'Write a function "squareGrid" that returns a grid of size nxn that counts up numbers. Your code should print True.','pre_code' => '','start_code' => 'def getGridStr(grid):'.$EOL.'    s = ""'.$EOL.'    entry = 1'.$EOL.'    for mrow in grid:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'grid = squareGrid(4)'.$EOL.'print(getGridStr(grid))'.$EOL.'print(getGridStr(grid) == "1   2   3   4   \n5   6   7   8   \n9   10  11  12  \n13  14  15  16  \n")'.$EOL.'','test_code' => 'grid = squareGrid(2)'.$EOL.'test_equal(getGridStr(grid), "1   2   \n3   4   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise639->id,'user_id' => $user->id]);
        $exercise641 = Exercise::create(['prompt' => 'Fix the bug in createGrid(), which should return a grid of size rows x cols that counts up numbers. Your code should print True. Hint: the inner for loop makes "rows" number of columns, when it should make "cols" number of columns.','pre_code' => '','start_code' => 'def getGridStr(grid):'.$EOL.'    s = ""'.$EOL.'    for mrow in grid:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'def createGrid(rows, cols):'.$EOL.'    grid = []'.$EOL.'    entry = 1'.$EOL.'    for row in range(rows):'.$EOL.'        mrow = []'.$EOL.'        for col in range(rows):'.$EOL.'            mrow.append(entry)'.$EOL.'            entry += 1'.$EOL.'        grid.append(mrow)'.$EOL.'    return grid'.$EOL.'grid = createGrid(2, 3) # 2 rows, 3 columns'.$EOL.'print(getGridStr(grid))'.$EOL.'print(getGridStr(grid) == "1   2   3   \n4   5   6   \n")'.$EOL.'grid = createGrid(3, 4) # 3 rows, 4 columns'.$EOL.'print(getGridStr(grid))'.$EOL.'print(getGridStr(grid) == "1   2   3   4   \n5   6   7   8   \n9   10  11  12  \n")'.$EOL.'','test_code' => 'grid = createGrid(2, 4)'.$EOL.'test_equal(getGridStr(grid), "1   2   3   4   \n5   6   7   8   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise640->id,'user_id' => $user->id]);
        $exercise642 = Exercise::create(['prompt' => 'Write a function "createGrid" that returns a grid of size rows x cols that counts up numbers. Your code should print True.','pre_code' => '','start_code' => 'def getGridStr(grid):'.$EOL.'    s = ""'.$EOL.'    for mrow in grid:'.$EOL.'        for entry in mrow:'.$EOL.'            s += "{:<4}".format(entry)'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'grid = createGrid(2, 3) # 2 rows, 3 columns'.$EOL.'print(getGridStr(grid))'.$EOL.'print(getGridStr(grid) == "1   2   3   \n4   5   6   \n")'.$EOL.'grid = createGrid(3, 4) # 3 rows, 4 columns'.$EOL.'print(getGridStr(grid))'.$EOL.'print(getGridStr(grid) == "1   2   3   4   \n5   6   7   8   \n9   10  11  12  \n")'.$EOL.'','test_code' => 'grid = createGrid(2, 4)'.$EOL.'test_equal(getGridStr(grid), "1   2   3   4   \n5   6   7   8   \n")'.$EOL.'','lesson_id' => $lesson40->id,'previous_exercise_id' => $exercise641->id,'user_id' => $user->id]);
        $lesson41= Lesson::create(['name' => '2D lists II','module_id' =>  $module18->id,'previous_lesson_id' => $lesson40->id,'user_id' => $user->id]);
        $exercise643 = Exercise::create(['prompt' => 'Run the following code. You"ll see that we have a grid of students who worked jobs over each of their four summers during college (e.g. S1 is the first summer, etc). The numbers represent the amount of money they earned that summer. For example, Jack earned $3922 his second summer. Complete the getPerson() function that returns the person list at index i. Hint: you will return grid[i].','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'def getPerson(grid, i):'.$EOL.'    print("implement this function")'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(getPerson(earned, 1) == ["Sally", 5122, 8010, 9234, 10322])'.$EOL.'','test_code' => 'test_equal(getPerson(earned, 1), ["Sally", 5122, 8010, 9234, 10322])'.$EOL.'test_equal(getPerson(earned, 2), earned[2])'.$EOL.'','lesson_id' => $lesson41->id,'user_id' => $user->id]);
        $exercise644 = Exercise::create(['prompt' => 'getPersonEarnings() returns only the elements of a person list that have earnings in them. Recall list slicing notation: person[1:] gives everything in a list starting at index 1. Fix the bug in getPersonEarnings(). Hint: we don"t want to start at index 3.','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns a list of the amounts of money student i'.$EOL.'# made during the four summers.'.$EOL.'def getPersonEarnings(grid, i):'.$EOL.'    person = grid[i]'.$EOL.'    return person[3:]'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(getPersonEarnings(earned, 1))'.$EOL.'print(getPersonEarnings(earned, 1) == [5122, 8010, 9234, 10322])'.$EOL.'','test_code' => 'test_equal(getPersonEarnings(earned, 1), [5122, 8010, 9234, 10322])'.$EOL.'test_equal(getPersonEarnings(earned, 2), earned[2][1:])'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise643->id,'user_id' => $user->id]);
        $exercise645 = Exercise::create(['prompt' => 'Complete getPersonEarnings().','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns a list of the amounts of money student i'.$EOL.'# made during the four summers.'.$EOL.'def getPersonEarnings(grid, i):'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(getPersonEarnings(earned, 1))'.$EOL.'print(getPersonEarnings(earned, 1) == [5122, 8010, 9234, 10322])'.$EOL.'','test_code' => 'test_equal(getPersonEarnings(earned, 1), [5122, 8010, 9234, 10322])'.$EOL.'test_equal(getPersonEarnings(earned, 2), earned[2][1:])'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise644->id,'user_id' => $user->id]);
        $exercise646 = Exercise::create(['prompt' => 'We want to write code to find out certain things, like who made the most money overall, who made the most money in a given summer, etc. This code should compute how much a given person made over the course of all their summers working. Add a return statement to totalEarnings().','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the earnings a person made'.$EOL.'def getPersonEarnings(grid, i):'.$EOL.'    person = grid[i]'.$EOL.'    return person[1:]'.$EOL.'# Returns the total amount of money the student at index i made over all summers worked.'.$EOL.'def totalEarnings(grid, i):'.$EOL.'    sum = 0'.$EOL.'    earnings = getPersonEarnings(grid, i)'.$EOL.'    for amount in earnings:'.$EOL.'        sum += amount'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(totalEarnings(earned, 1))'.$EOL.'print(totalEarnings(earned, 1) == 32688)'.$EOL.'','test_code' => 'test_equal(totalEarnings(earned, 1), 32688)'.$EOL.'test_equal(totalEarnings(earned, 2), 11038)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise645->id,'user_id' => $user->id]);
        $exercise647 = Exercise::create(['prompt' => 'Complete the totalEarnings() function.','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the earnings a person made'.$EOL.'def getPersonEarnings(grid, i):'.$EOL.'    person = grid[i]'.$EOL.'    return person[1:]'.$EOL.'# Returns the total amount of money the student at index i made over all summers worked.'.$EOL.'def totalEarnings(grid, i):'.$EOL.'    sum = 0'.$EOL.'    return sum'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(totalEarnings(earned, 1))'.$EOL.'print(totalEarnings(earned, 1) == 32688)'.$EOL.'','test_code' => 'test_equal(totalEarnings(earned, 1), 32688)'.$EOL.'test_equal(totalEarnings(earned, 2), 11038)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise646->id,'user_id' => $user->id]);
        $exercise648 = Exercise::create(['prompt' => 'Complete the allTotalEarnings() function. Hint: call totalEarnings(grid, i) to get student i"s total earnings and add it to sum. Hint: in the for loop: "sum += totalEarnings(grid, i)".','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the earnings a person made'.$EOL.'def getPersonEarnings(grid, i):'.$EOL.'    person = grid[i]'.$EOL.'    return person[1:]'.$EOL.'# Returns the total amount of money the student at'.$EOL.'# index i made over all summers worked.'.$EOL.'def totalEarnings(grid, i):'.$EOL.'    sum = 0'.$EOL.'    person = getPersonEarnings(grid, i)'.$EOL.'    for value in person:'.$EOL.'        sum += value'.$EOL.'    return sum'.$EOL.'# Returns the total amount of money earned by all students'.$EOL.'def allTotalEarnings(grid):'.$EOL.'    sum = 0'.$EOL.'    for i in range(1, len(grid)):'.$EOL.'    return sum'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(allTotalEarnings(earned) == 109190)'.$EOL.'','test_code' => 'earned[1][1] += 1'.$EOL.'test_equal(allTotalEarnings(earned), 109191)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise647->id,'user_id' => $user->id]);
        $exercise649 = Exercise::create(['prompt' => 'Fix the bug in totalEarnings(). Hint: it is currently looking at every line in the grid, including the first line which doesn"t have number data. You need to skip the first line. Hint: to get a version of the grid without the first line, use grid[1:].','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the total amount of money that all students'.$EOL.'# worked during the given summer. summer=1 is S1, summer=2 is S2, etc.'.$EOL.'def totalEarnings(grid, summer):'.$EOL.'    sum = 0'.$EOL.'    for row in grid:'.$EOL.'        sum += row[summer]'.$EOL.'    return sum'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(totalEarnings(earned, 1))'.$EOL.'print(totalEarnings(earned, 1) == 20251)'.$EOL.'print(totalEarnings(earned, 2) == 24270)'.$EOL.'print(totalEarnings(earned, 3) == 29663)'.$EOL.'print(totalEarnings(earned, 4) == 35006)'.$EOL.'','test_code' => 'earned[1][1] += 1'.$EOL.'test_equal(totalEarnings(earned, 1), 20252)'.$EOL.'test_equal(totalEarnings(earned, 2), 24270)'.$EOL.'test_equal(totalEarnings(earned, 3), 29663)'.$EOL.'test_equal(totalEarnings(earned, 4), 35006)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise648->id,'user_id' => $user->id]);
        $exercise650 = Exercise::create(['prompt' => 'Complete the totalEarnings() function.','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the total amount of money that all students worked during the given summer. summer=1 is S1, summer=2 is S2, etc.'.$EOL.'def totalEarnings(grid, summer):'.$EOL.'    sum = 0'.$EOL.'    return sum'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(totalEarnings(earned, 1))'.$EOL.'print(totalEarnings(earned, 1) == 20251)'.$EOL.'print(totalEarnings(earned, 2) == 24270)'.$EOL.'print(totalEarnings(earned, 3) == 29663)'.$EOL.'print(totalEarnings(earned, 4) == 35006)'.$EOL.'','test_code' => 'earned[1][1] += 1'.$EOL.'test_equal(totalEarnings(earned, 1), 20252)'.$EOL.'test_equal(totalEarnings(earned, 2), 24270)'.$EOL.'test_equal(totalEarnings(earned, 3), 29663)'.$EOL.'test_equal(totalEarnings(earned, 4), 35006)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise649->id,'user_id' => $user->id]);
        $exercise651 = Exercise::create(['prompt' => 'Complete the printMaxEarnings() function. If the current student"s earnings are greater than the current maximum, then we need to update not only the student name, but also the current maximum. Hint: "maxEarned = earned"','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the total amount of money a student earned.'.$EOL.'def studentEarnings(student):'.$EOL.'    sum = 0'.$EOL.'    for value in student[1:]:'.$EOL.'        sum += value'.$EOL.'    return sum'.$EOL.'# Prints which student made the most money and how much they made.'.$EOL.'# Returns the amount the student made.'.$EOL.'def printMaxEarnings(grid):'.$EOL.'    maxEarned = 0'.$EOL.'    maxStudentName = ""'.$EOL.'    for student in grid[1:]:'.$EOL.'        earned = studentEarnings(student)'.$EOL.'        if earned > maxEarned:'.$EOL.'            maxStudentName = student[0]'.$EOL.'    print("{} earned {}".format(maxStudentName, maxEarned))'.$EOL.'    return maxEarned'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(printMaxEarnings(earned) == 35751)'.$EOL.'','test_code' => 'earned[1][1]+=10000'.$EOL.'print(printMaxEarnings(earned) == 42688)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise650->id,'user_id' => $user->id]);
        $exercise652 = Exercise::create(['prompt' => 'Fix the bug in studentEarnings(). Hint: the function is trying to add the name of the student. You should look at all values in student[1:] so that you skip the name.','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the total amount of money a student earned.'.$EOL.'def studentEarnings(student):'.$EOL.'    sum = 0'.$EOL.'    for value in student:'.$EOL.'        sum += value'.$EOL.'    return sum'.$EOL.'# Prints which student made the most money and how much they made.'.$EOL.'# Returns the amount the student made.'.$EOL.'def printMaxEarnings(grid):'.$EOL.'    maxEarned = 0'.$EOL.'    maxStudentName = ""'.$EOL.'    for student in grid[1:]:'.$EOL.'        earned = studentEarnings(student)'.$EOL.'        if earned > maxEarned:'.$EOL.'            maxEarned = earned'.$EOL.'            maxStudentName = student[0]'.$EOL.'    print("{} earned {}".format(maxStudentName, maxEarned))'.$EOL.'    return maxEarned'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(printMaxEarnings(earned) == 35751)'.$EOL.'','test_code' => 'earned[1][1]+=10000'.$EOL.'print(printMaxEarnings(earned) == 42688)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise651->id,'user_id' => $user->id]);
        $exercise653 = Exercise::create(['prompt' => 'Fix the bug in printMaxEarnings(). Hint: the function is trying to look at the first row of the grid, which doesn"t hold data. You should look at all rows in grid[1:].','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the total amount of money a student earned.'.$EOL.'def studentEarnings(student):'.$EOL.'    sum = 0'.$EOL.'    for value in student[1:]:'.$EOL.'        sum += value'.$EOL.'    return sum'.$EOL.'# Prints which student made the most money and how much they made.'.$EOL.'# Returns the amount the student made.'.$EOL.'def printMaxEarnings(grid):'.$EOL.'    maxEarned = 0'.$EOL.'    maxStudentName = ""'.$EOL.'    for student in grid:'.$EOL.'        earned = studentEarnings(student)'.$EOL.'        if earned > maxEarned:'.$EOL.'            maxEarned = earned'.$EOL.'            maxStudentName = student[0]'.$EOL.'    print("{} earned {}".format(maxStudentName, maxEarned))'.$EOL.'    return maxEarned'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(printMaxEarnings(earned) == 35751)'.$EOL.'','test_code' => 'earned[1][1]+=10000'.$EOL.'print(printMaxEarnings(earned) == 42688)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise652->id,'user_id' => $user->id]);
        $exercise654 = Exercise::create(['prompt' => 'Fix the bug in studentEarnings().','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the total amount of money a student earned.'.$EOL.'def studentEarnings(student):'.$EOL.'    for value in student[1:]:'.$EOL.'        sum += value'.$EOL.'    return sum'.$EOL.'# Prints which student made the most money and how much they made.'.$EOL.'# Returns the amount the student made.'.$EOL.'def printMaxEarnings(grid):'.$EOL.'    maxEarned = 0'.$EOL.'    maxStudentName = ""'.$EOL.'    for student in grid[1:]:'.$EOL.'        earned = studentEarnings(student)'.$EOL.'        if earned > maxEarned:'.$EOL.'            maxEarned = earned'.$EOL.'            maxStudentName = student[0]'.$EOL.'    print("{} earned {}".format(maxStudentName, maxEarned))'.$EOL.'    return maxEarned'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(printMaxEarnings(earned) == 35751)'.$EOL.'','test_code' => 'earned[1][1]+=10000'.$EOL.'print(printMaxEarnings(earned) == 42688)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise653->id,'user_id' => $user->id]);
        $exercise655 = Exercise::create(['prompt' => 'Complete the function studentEarnings().','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the total amount of money a student earned.'.$EOL.'def studentEarnings(student):'.$EOL.'# Prints which student made the most money and how much they made.'.$EOL.'# Returns the amount the student made.'.$EOL.'def printMaxEarnings(grid):'.$EOL.'    maxEarned = 0'.$EOL.'    maxStudentName = ""'.$EOL.'    for student in grid[1:]:'.$EOL.'        earned = studentEarnings(student)'.$EOL.'        if earned > maxEarned:'.$EOL.'            maxEarned = earned'.$EOL.'            maxStudentName = student[0]'.$EOL.'    print("{} earned {}".format(maxStudentName, maxEarned))'.$EOL.'    return maxEarned'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(printMaxEarnings(earned) == 35751)'.$EOL.'','test_code' => 'earned[1][1]+=10000'.$EOL.'print(printMaxEarnings(earned) == 42688)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise654->id,'user_id' => $user->id]);
        $exercise656 = Exercise::create(['prompt' => 'Fix the bug in printMaxEarnings().','pre_code' => '','start_code' => 'def gridString(grid):'.$EOL.'    s = ""'.$EOL.'    for row in grid:'.$EOL.'        s += "{:>10}".format(row[0])'.$EOL.'        for i in range(1, len(row)):'.$EOL.'            s += "{:>6}".format(row[i])'.$EOL.'        s += "\n"'.$EOL.'    return s'.$EOL.'# Returns the total amount of money a student earned.'.$EOL.'def studentEarnings(student):'.$EOL.'    sum = 0'.$EOL.'    for value in student[1:]:'.$EOL.'        sum += value'.$EOL.'    return sum'.$EOL.'# Prints which student made the most money and how much they made.'.$EOL.'# Returns the amount the student made.'.$EOL.'def printMaxEarnings(grid):'.$EOL.'    maxStudentName = ""'.$EOL.'    for student in grid[1:]:'.$EOL.'        earned = studentEarnings(student)'.$EOL.'        if earned > maxEarned:'.$EOL.'            maxEarned = earned'.$EOL.'            maxStudentName = student[0]'.$EOL.'    print("{} earned {}".format(maxStudentName, maxEarned))'.$EOL.'    return maxEarned'.$EOL.'earned = [["Name", "S1", "S2", "S3", "S4"],'.$EOL.'          ["Sally", 5122, 8010, 9234, 10322],'.$EOL.'          ["Francine", 2013, 2002, 3141, 3882],'.$EOL.'          ["Jack", 4000, 3922, 3936, 5024],'.$EOL.'          ["Maria", 7924, 8445, 9526, 9856],'.$EOL.'          ["Victor", 1192, 1891, 3826, 5922]]'.$EOL.'print(gridString(earned))'.$EOL.'print(printMaxEarnings(earned) == 35751)'.$EOL.'','test_code' => 'earned[1][1]+=10000'.$EOL.'print(printMaxEarnings(earned) == 42688)'.$EOL.'','lesson_id' => $lesson41->id,'previous_exercise_id' => $exercise655->id,'user_id' => $user->id]);
        $project28 = Project::create(['name' => ' Random grid','open_date' => '2018-08-04 0:00:00','close_date' => '2018-08-06 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'This is an individual project.'.$EOL.'<br>You will create a grid with random numbers. You will allow the user to specify the grid size and the seed to the random number generator. The user can then specify which row to print and which column to print. The program will print the grid formatted as follows, then the row at the given index and column at the given index. See the following, which shows both the input prompts and the output text.'.$EOL.'<pre>'.$EOL.'<br>Enter the grid size: 9'.$EOL.'<br>Enter the random number seed: 1'.$EOL.'<br>Enter the row to print: 3'.$EOL.'<br>Enter the column to print: 4'.$EOL.'<br>'.$EOL.'<br>42  72  0   30  14  9   18  34  40  '.$EOL.'<br>54  42  69  20  88  2   67  42  56  '.$EOL.'<br>14  20  80  97  31  69  88  90  8   '.$EOL.'<br>3   17  88  9   42  96  53  69  31  '.$EOL.'<br>69  84  1   75  99  75  28  79  10  '.$EOL.'<br>45  91  29  29  13  1   68  21  26  '.$EOL.'<br>49  5   57  14  59  70  10  41  70  '.$EOL.'<br>41  5   54  67  52  95  59  91  13  '.$EOL.'<br>14  81  40  16  93  35  75  73  89  '.$EOL.'<br>'.$EOL.'<br>Row at index 3: [3, 17, 88, 9, 42, 96, 53, 69, 31]'.$EOL.'<br>Column at index 4: [14, 88, 31, 42, 99, 13, 59, 52, 93]'.$EOL.'</pre>'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import random','solution' => 'import random'.$EOL.'def printGrid(grid):'.$EOL.'    s = ""'.$EOL.'    for i in range(len(grid)):'.$EOL.'        gridRow = grid[i]'.$EOL.'        for j in range(len(grid)):'.$EOL.'            s += "{:<4}".format(gridRow[j])'.$EOL.'        s += "\n"'.$EOL.'    print(s)'.$EOL.'def getRow(grid, row):'.$EOL.'    return grid[row]'.$EOL.'def getColumn(grid, col):'.$EOL.'    column = []'.$EOL.'    for gridRow in grid:'.$EOL.'        column.append(gridRow[col])'.$EOL.'    return column'.$EOL.'grid = []'.$EOL.'size = int(input("Enter the grid size:"))'.$EOL.'seed = int(input("Enter the random number seed:"))'.$EOL.'random.seed(seed)'.$EOL.'for i in range(size):'.$EOL.'    gridRow = []'.$EOL.'    for j in range(size):'.$EOL.'        gridRow.append(random.randint(0, 100))'.$EOL.'    grid.append(gridRow)'.$EOL.'printGrid(grid)'.$EOL.'row = int(input("Which row should I display?"))'.$EOL.'print("Row at index {}: {}".format(row, str(getRow(grid, row))))'.$EOL.'col = int(input("Which column should I display?"))'.$EOL.'print("Column at index {}: {}".format(col, str(getColumn(grid, col))))'.$EOL.'','module_id' => $module18->id,'previous_lesson_id' => $lesson41->id,'user_id' => $user->id]);
        $concept13= Concept::create(['name' => 'Scope','course_id' => $course->id,'previous_concept_id' => $concept12->id,'user_id' => $user->id]);
        $module19= Module::create(['name' => 'Scope','concept_id' => $concept13->id,'open_date' => '2018-08-07 0:00:00','user_id' => $user->id]);
        $lesson42= Lesson::create(['name' => 'Scope','module_id' =>  $module19->id,'user_id' => $user->id]);
        $exercise657 = Exercise::create(['prompt' => 'The variable "sum" is defined in the add() function. A variable defined inside a function is _not_ accessible outside of the function. Run the code and you will see that sum is not available in the print statement. Fix the code by doing the following: in the add() function, return sum. Then change the call to add() as follows: "mysum = add(1, 2)" and change "format(sum)" to "format(mysum)".','pre_code' => '','start_code' => 'def add(a, b):'.$EOL.'    sum = a + b'.$EOL.'add(1, 2)'.$EOL.'print("sum = {}".format(sum))'.$EOL.'','test_code' => 'test_out("sum = 3")'.$EOL.'test_func("add", 4, 1, 3)'.$EOL.'','lesson_id' => $lesson42->id,'user_id' => $user->id]);
        $exercise658 = Exercise::create(['prompt' => 'Fix the code. "sum = 3" should be printed. add() should return the sum of the two arguments.','pre_code' => '','start_code' => 'def add(a, b):'.$EOL.'    sum = a + b'.$EOL.'add(1, 2)'.$EOL.'print("sum = {}".format(sum))'.$EOL.'','test_code' => 'test_out("sum = 3")'.$EOL.'test_func("add", 4, 1, 3)'.$EOL.'','lesson_id' => $lesson42->id,'previous_exercise_id' => $exercise657->id,'user_id' => $user->id]);
        $exercise659 = Exercise::create(['prompt' => 'Fix the code. "average = 3.5" should be printed. average() should return the average of a and b.','pre_code' => '','start_code' => 'def average(a, b):'.$EOL.'    a = float(a)'.$EOL.'    b = float(b)'.$EOL.'    avg = (a + b)/2'.$EOL.'average(3, 4)'.$EOL.'print("average = {}".format(avg))'.$EOL.'','test_code' => 'test_out("average = 3.5")'.$EOL.'test_func("average", 7.5, 7, 8)'.$EOL.'','lesson_id' => $lesson42->id,'previous_exercise_id' => $exercise658->id,'user_id' => $user->id]);
        $lesson43= Lesson::create(['name' => 'Global variables','module_id' =>  $module19->id,'previous_lesson_id' => $lesson42->id,'user_id' => $user->id]);
        $exercise660 = Exercise::create(['prompt' => 'This code fails. It is because, in the "increment" function, Python doesn"t know if "x" is a "local" or a "global" variable. "Local" means it is visible only inside the function. "Global" means it is visible everywhere. We want Python to use the global x variable. Before the "x += 1" line, add a line "global x". This tells Python to use the global x variable.','pre_code' => '','start_code' => 'def increment():'.$EOL.'    x += 1'.$EOL.'x = 1'.$EOL.'increment()'.$EOL.'print(x)'.$EOL.'','test_code' => 'test_out("2")'.$EOL.'','lesson_id' => $lesson43->id,'user_id' => $user->id]);
        $exercise661 = Exercise::create(['prompt' => 'Write a function "plus3" that adds 3 to the x variable. Use "global" to make sure the global x variable is incremented.','pre_code' => '','start_code' => 'x = 1'.$EOL.'plus3()'.$EOL.'print(x == 4)'.$EOL.'','test_code' => 'x = 1'.$EOL.'plus3()'.$EOL.'test_equal(x, 4)'.$EOL.'','lesson_id' => $lesson43->id,'previous_exercise_id' => $exercise660->id,'user_id' => $user->id]);
        $exercise662 = Exercise::create(['prompt' => 'Implement the "incAmount" function to add one to the moveAmount variable. This way, if you press "u" a few times then press the up arrow, the turtle will move up more than one unit. Heads up: moveAmount is a global variable.','pre_code' => '','start_code' => 'import turtle'.$EOL.'def initTurtle():'.$EOL.'    t.tracer(0)'.$EOL.'    # make the graphics window appear by pretending to draw something'.$EOL.'    t.up()'.$EOL.'    t.setpos(0, 0)'.$EOL.'    t.down()'.$EOL.'    t.clear()'.$EOL.'    t.update()'.$EOL.'def onUp():'.$EOL.'    t.seth(90)'.$EOL.'    t.forward(moveAmount)'.$EOL.'    t.update()'.$EOL.'def incAmount():'.$EOL.'t = turtle.Turtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'initTurtle()'.$EOL.'screen.onkey(onUp, "Up")'.$EOL.'screen.onkey(incAmount, "u")'.$EOL.'screen.listen()'.$EOL.'moveAmount = 1'.$EOL.'','test_code' => 'test_in("def onUp")'.$EOL.'test_in("t.seth")'.$EOL.'test_in("t.forward")'.$EOL.'','lesson_id' => $lesson43->id,'previous_exercise_id' => $exercise661->id,'user_id' => $user->id]);
        $lesson44= Lesson::create(['name' => 'trace','module_id' =>  $module19->id,'previous_lesson_id' => $lesson43->id,'user_id' => $user->id]);
        $exercise663 = Exercise::create(['prompt' => 'Watch this youtube video: https://youtu.be/z7koTyGvUuI. "Tracing" is a technique for walking through the code in the order it is executed. For example, the following code first executes line 1, then line 2, then line 3. The comment at the bottom lists the lines executed in order with one missing. Add a space then a 3 to the end of the comment to pass the test.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'c = 2'.$EOL.'# 1 2'.$EOL.'','test_code' => 'test_in("1 2 3")'.$EOL.'','lesson_id' => $lesson44->id,'user_id' => $user->id]);
        $exercise664 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end. You will need to add one number to the end of the comment.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'c = 2'.$EOL.'d = 6'.$EOL.'# 1 2 3'.$EOL.'','test_code' => 'test_in("1 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise663->id,'user_id' => $user->id]);
        $exercise665 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end. You can see the line numbers to the left of the code. You will need to add one number to the beginning of the comment.','pre_code' => '','start_code' => 'print("a")'.$EOL.'print("b")'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# 2 3 4'.$EOL.'','test_code' => 'test_in("1 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise664->id,'user_id' => $user->id]);
        $exercise666 = Exercise::create(['prompt' => 'We skip blank lines when tracing. Trace the code and list the lines executed in order in a comment at the end. You will need to add one number to the end of the comment.','pre_code' => '','start_code' => 'print("a")'.$EOL.'print("b")'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# 1 2 4'.$EOL.'','test_code' => 'test_in("1 2 4 5")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise665->id,'user_id' => $user->id]);
        $exercise667 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end. You will need to add one number to the end of the comment.','pre_code' => '','start_code' => 'print("a")'.$EOL.'print("b")'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# 1 2 4'.$EOL.'','test_code' => 'test_in("1 2 4 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise666->id,'user_id' => $user->id]);
        $exercise668 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'print("a")'.$EOL.'print("b")'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 3 4 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise667->id,'user_id' => $user->id]);
        $exercise669 = Exercise::create(['prompt' => 'Watch this youtube video: https://youtu.be/5LyhTYMpn0Y. When tracing, we execute the line of an if statement that has the conditional, but execute the body of the if statement only if the conditional evaluates to true. Trace the code and list the lines executed in order in a comment at the end. You will need to add one number to the end of the comment.','pre_code' => '','start_code' => 'print("a")'.$EOL.'if False:'.$EOL.'    print("b")'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# 1 2 4'.$EOL.'','test_code' => 'test_in("1 2 4 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise668->id,'user_id' => $user->id]);
        $exercise670 = Exercise::create(['prompt' => 'Remember, the body of an if statement is traced only if the conditional evaluates to true. Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'print("a")'.$EOL.'if False:'.$EOL.'    print("b")'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 4 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise669->id,'user_id' => $user->id]);
        $exercise671 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'print("a")'.$EOL.'if True:'.$EOL.'    print("b")'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# 1 2 3 '.$EOL.'','test_code' => 'test_in("1 2 3 4 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise670->id,'user_id' => $user->id]);
        $exercise672 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'print("a")'.$EOL.'if True:'.$EOL.'    print("b")'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 4 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise671->id,'user_id' => $user->id]);
        $exercise673 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'if a < b:'.$EOL.'    c = 4'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# 1 2 3 4'.$EOL.'','test_code' => 'test_in("1 2 3 4 5 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise672->id,'user_id' => $user->id]);
        $exercise674 = Exercise::create(['prompt' => 'When an if statement evaluates to True, we skip any subsequent elif and else statements. Trace the code and list the lines executed in order in a comment at the end. You will add a single line to the end.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'if a < b:'.$EOL.'    c = 4'.$EOL.'else:'.$EOL.'    c = 5'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# 1 2 3 4 7 '.$EOL.'','test_code' => 'test_in("1 2 3 4 7 8")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise673->id,'user_id' => $user->id]);
        $exercise675 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'if a < b:'.$EOL.'    c = 4'.$EOL.'else:'.$EOL.'    c = 5'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 4 7 8")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise674->id,'user_id' => $user->id]);
        $exercise676 = Exercise::create(['prompt' => 'In this code, we evaluate the if conditional and then skip to the else since the conditional evaluates to False. Trace the code and list the lines executed in order in a comment at the end. Heads up: the less-than sign has been changed to a greater-than sign.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'if a > b:'.$EOL.'    c = 4'.$EOL.'else:'.$EOL.'    c = 5'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# 1 2 3 5 6 '.$EOL.'','test_code' => 'test_in("1 2 3 5 6 7 8")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise675->id,'user_id' => $user->id]);
        $exercise677 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'if a > b:'.$EOL.'    c = 4'.$EOL.'else:'.$EOL.'    c = 5'.$EOL.'print("c")'.$EOL.'print("d")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 5 6 7 8")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise676->id,'user_id' => $user->id]);
        $exercise678 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'if a > b:'.$EOL.'    c = 4'.$EOL.'elif a == b:'.$EOL.'    c = 5'.$EOL.'else:'.$EOL.'    c = 6'.$EOL.'print("c")'.$EOL.'# 1 2 3 5 7'.$EOL.'','test_code' => 'test_in("1 2 3 5 7 8 9")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise677->id,'user_id' => $user->id]);
        $exercise679 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'if a > b:'.$EOL.'    c = 4'.$EOL.'elif a == b:'.$EOL.'    c = 5'.$EOL.'else:'.$EOL.'    c = 6'.$EOL.'print("c")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 5 7 8 9")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise678->id,'user_id' => $user->id]);
        $exercise680 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'if a > b:'.$EOL.'    c = 4'.$EOL.'    d = 5'.$EOL.'else:'.$EOL.'    c = 5'.$EOL.'    d = 6'.$EOL.'print("c")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 6 7 8 9")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise679->id,'user_id' => $user->id]);
        $exercise681 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end. Heads up: remember that an if statement _is_ executed even if the conditional evaluates to false, so line 5 of this code is executed, even though line 6 is not.','pre_code' => '','start_code' => 'if True:'.$EOL.'    c = 4'.$EOL.'else:'.$EOL.'    c = 5'.$EOL.'if False:'.$EOL.'    d = 3'.$EOL.'else:'.$EOL.'    d = 4'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 5 7 8")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise680->id,'user_id' => $user->id]);
        $exercise682 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end. Heads up: remember that if an if statement evaluates to true, any corresponding elif and else statements are not executed.','pre_code' => '','start_code' => 'if False:'.$EOL.'    c = 4'.$EOL.'else:'.$EOL.'    c = 5'.$EOL.'if True:'.$EOL.'    d = 3'.$EOL.'else:'.$EOL.'    d = 4'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 3 4 5 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise681->id,'user_id' => $user->id]);
        $exercise683 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'if False:'.$EOL.'    c = 4'.$EOL.'else:'.$EOL.'    if True:'.$EOL.'        c = 5'.$EOL.'    else:'.$EOL.'        c = 7'.$EOL.'if True:'.$EOL.'    d = 3'.$EOL.'else:'.$EOL.'    d = 4'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 3 4 5 8 9")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise682->id,'user_id' => $user->id]);
        $exercise684 = Exercise::create(['prompt' => 'Watch this youtube video: https://youtu.be/xqOGF_DjCns. The first two iterations of the loop are traced for you. Add the final loop. Trace the code and list the lines executed in order in a comment at the end. Hint: the for loop line itself is executed each time we iterate because the iterator variable needs to be assigned.','pre_code' => '','start_code' => 'for i in range(0, 3):'.$EOL.'    a = 3'.$EOL.'    b = 4'.$EOL.'print("done")'.$EOL.'# 1 2 3 1 2 3 '.$EOL.'','test_code' => 'test_in("1 2 3 1 2 3 1 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise683->id,'user_id' => $user->id]);
        $exercise685 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'for i in range(0, 3):'.$EOL.'    a = 3'.$EOL.'    b = 4'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 1 2 3 1 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise684->id,'user_id' => $user->id]);
        $exercise686 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end. Heads up: the "range" call now starts at one, so the loop executes only twice.','pre_code' => '','start_code' => 'for i in range(1, 3):'.$EOL.'    a = 3'.$EOL.'    b = 4'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 1 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise685->id,'user_id' => $user->id]);
        $exercise687 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'for abc in range(1, 3):'.$EOL.'    a = 3'.$EOL.'    b = 4'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 1 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise686->id,'user_id' => $user->id]);
        $exercise688 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end. The first two iterations are given to you. Note that line 1 is executed only one time because it is not in the loop.','pre_code' => '','start_code' => 'a = 3'.$EOL.'for abc in range(0, 3):'.$EOL.'    b = 4'.$EOL.'print("done")'.$EOL.'# 1 2 3 2 3 '.$EOL.'','test_code' => 'test_in("1 2 3 2 3 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise687->id,'user_id' => $user->id]);
        $exercise689 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'a = 3'.$EOL.'for abc in range(0, 3):'.$EOL.'    b = 4'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 2 3 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise688->id,'user_id' => $user->id]);
        $exercise690 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'a = 3'.$EOL.'b = 4'.$EOL.'for abc in range(0, 3):'.$EOL.'    c = abc'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 4 3 4 3 4 5")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise689->id,'user_id' => $user->id]);
        $exercise691 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'numbers = [ 8, 7, 3 ]'.$EOL.'for x in numbers:'.$EOL.'    print(x)'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 2 3 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise690->id,'user_id' => $user->id]);
        $exercise692 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'names = [ "Sally", "Fahad", "Ivan", "Corinne" ]'.$EOL.'for name in names:'.$EOL.'    print(name)'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 2 3 2 3 2 3 4")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise691->id,'user_id' => $user->id]);
        $exercise693 = Exercise::create(['prompt' => 'Watch this youtube video: https://youtu.be/BHXHVckilWI. Trace the code and list the lines executed in order in a comment at the end. The first two iterations are given to you. Heads up: note that line 5 is executed whether or not the if statement evaluates to false or not.','pre_code' => '','start_code' => 'names = [ "Ivan", "Fahad", "Pierre" ]'.$EOL.'for name in names:'.$EOL.'    if name == "Ivan":'.$EOL.'        print("Found Ivan")'.$EOL.'    print(name)'.$EOL.'print("done")'.$EOL.'# 1 2 3 4 5 2 3 5 '.$EOL.'','test_code' => 'test_in("1 2 3 4 5 2 3 5 2 3 5 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise692->id,'user_id' => $user->id]);
        $exercise694 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end. Heads up: note that line 5 is executed whether or not the if statement evaluates to false or not. ','pre_code' => '','start_code' => 'names = [ "Ivan", "Fahad" ]'.$EOL.'for name in names:'.$EOL.'    if name == "Ivan":'.$EOL.'        print("Found Ivan")'.$EOL.'    print(name)'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 4 5 2 3 5 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise693->id,'user_id' => $user->id]);
        $exercise695 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end.','pre_code' => '','start_code' => 'names = [ "Ivan", "Fahad" ]'.$EOL.'for name in names:'.$EOL.'    if name == "Fahad":'.$EOL.'        print("Found Ivan")'.$EOL.'    print(name)'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 5 2 3 4 5 6")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise694->id,'user_id' => $user->id]);
        $exercise696 = Exercise::create(['prompt' => 'Trace the code and list the lines executed in order in a comment at the end. Heads up: we now have an else statement. Remember that if an if statement"s conditional evaluates to false, then the else line _is_ executed, as well as the body of the else statement.','pre_code' => '','start_code' => 'names = [ "Ivan", "Fahad" ]'.$EOL.'for name in names:'.$EOL.'    if name == "Fahad":'.$EOL.'        print("Found Ivan")'.$EOL.'    else:'.$EOL.'        print(name)'.$EOL.'print("done")'.$EOL.'# '.$EOL.'','test_code' => 'test_in("1 2 3 5 6 2 3 4 7")'.$EOL.'','lesson_id' => $lesson44->id,'previous_exercise_id' => $exercise695->id,'user_id' => $user->id]);
        $project29 = Project::create(['name' => ' tic-tac-toe','open_date' => '2018-08-11 0:00:00','close_date' => '2018-08-13 0:00:00','prompt' => ''.$EOL.'<div>You will implement a game of tic-tac-toe. See <a href="https://youtu.be/cWCzDamGB24" target=_blank>this video</a> for a demonstration. When a user clicks on the game board, you should add a value to your board 2D list then redraw the board. You should also print the board 2D list to text output for debugging purposes.'.$EOL.'<br>Implement your board 2D list to be a 3x3 grid initially filled with all -1 values. It should store 0 or 1, as each location gets clicked, depending on which player clicked the cell. Note in the video that the basic implementation CAN overwrite a previous player"s move. Fixing this bug could be a wow factor.'.$EOL.'<br>Drawing code is given to you -- you will only need to make changes below the "YOUR CODE BELOW HERE" comment.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'WIDTH = 60'.$EOL.'HWIDTH = WIDTH/2'.$EOL.'def drawHash():'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-3*HWIDTH,-HWIDTH)'.$EOL.'    t.pendown()'.$EOL.'    t.setheading(0)'.$EOL.'    t.forward(3*WIDTH)'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-3*HWIDTH,HWIDTH)'.$EOL.'    t.pendown()'.$EOL.'    t.forward(3*WIDTH)'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-HWIDTH,-3*HWIDTH)'.$EOL.'    t.pendown()'.$EOL.'    t.setheading(90)'.$EOL.'    t.forward(3*WIDTH)'.$EOL.'    t.penup()'.$EOL.'    t.setpos(HWIDTH,-3*HWIDTH)'.$EOL.'    t.pendown()'.$EOL.'    t.setheading(90)'.$EOL.'    t.forward(3*WIDTH)'.$EOL.'def drawx(row, col):'.$EOL.'    t.penup()'.$EOL.'    t.setpos(WIDTH*(col-1), WIDTH*(row-1))'.$EOL.'    t.pendown()'.$EOL.'    t.setheading(45)'.$EOL.'    t.forward(HWIDTH)'.$EOL.'    t.backward(WIDTH)'.$EOL.'    t.forward(HWIDTH)'.$EOL.'    t.left(90)'.$EOL.'    t.forward(HWIDTH)'.$EOL.'    t.backward(WIDTH)'.$EOL.'    t.forward(HWIDTH)'.$EOL.'def drawo(row, col):'.$EOL.'    t.penup()'.$EOL.'    t.setpos(WIDTH*(col-1), WIDTH*(row-1))'.$EOL.'    t.setheading(0)'.$EOL.'    t.forward(HWIDTH-5)'.$EOL.'    t.left(90)'.$EOL.'    t.pendown()'.$EOL.'    t.circle(HWIDTH-5)'.$EOL.'#-----------------------------------------------------------'.$EOL.'# YOUR CODE BELOW HERE'.$EOL.'#-----------------------------------------------------------'.$EOL.'board = []'.$EOL.'# TODO: initialize the board to all -1 values.'.$EOL.'def drawBoard():'.$EOL.'    drawHash()'.$EOL.'    # TODO: draw the Xs and Os'.$EOL.'    print("TODO: draw the Xs and Os!")'.$EOL.'    drawx(0, 1) # this line is an example'.$EOL.'    drawo(1, 0) # this line is an example'.$EOL.'    t.update()'.$EOL.'# This variable keeps track of which player"s turn it is.'.$EOL.'# 0 is the O player and 1 is the X player.'.$EOL.'player = 0        '.$EOL.'# Called when a user clicks on the screen'.$EOL.'def click(x, y):'.$EOL.'    global player'.$EOL.'    row = int((y + 3 * HWIDTH) // WIDTH)'.$EOL.'    col = int((x + 3 * HWIDTH) // WIDTH)'.$EOL.'    print("row: {} col: {} player: {}".format(row, col, player))'.$EOL.'    t.clear()'.$EOL.'    # TODO update board, redraw screen, and print board to text output'.$EOL.'screen.onclick(click)'.$EOL.'drawBoard()'.$EOL.'','solution' => 'import turtle'.$EOL.'t = turtle.Turtle()'.$EOL.'t.tracer(0)'.$EOL.'t.hideturtle()'.$EOL.'screen = turtle.Screen()'.$EOL.'WIDTH = 60'.$EOL.'HWIDTH = WIDTH/2'.$EOL.'def drawHash():'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-3*HWIDTH,-HWIDTH)'.$EOL.'    t.pendown()'.$EOL.'    t.setheading(0)'.$EOL.'    t.forward(3*WIDTH)'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-3*HWIDTH,HWIDTH)'.$EOL.'    t.pendown()'.$EOL.'    t.forward(3*WIDTH)'.$EOL.'    t.penup()'.$EOL.'    t.setpos(-HWIDTH,-3*HWIDTH)'.$EOL.'    t.pendown()'.$EOL.'    t.setheading(90)'.$EOL.'    t.forward(3*WIDTH)'.$EOL.'    t.penup()'.$EOL.'    t.setpos(HWIDTH,-3*HWIDTH)'.$EOL.'    t.pendown()'.$EOL.'    t.setheading(90)'.$EOL.'    t.forward(3*WIDTH)'.$EOL.'def drawx(row, col):'.$EOL.'    t.penup()'.$EOL.'    t.setpos(WIDTH*(col-1), WIDTH*(row-1))'.$EOL.'    t.pendown()'.$EOL.'    t.setheading(45)'.$EOL.'    t.forward(HWIDTH)'.$EOL.'    t.backward(WIDTH)'.$EOL.'    t.forward(HWIDTH)'.$EOL.'    t.left(90)'.$EOL.'    t.forward(HWIDTH)'.$EOL.'    t.backward(WIDTH)'.$EOL.'    t.forward(HWIDTH)'.$EOL.'def drawo(row, col):'.$EOL.'    t.penup()'.$EOL.'    t.setpos(WIDTH*(col-1), WIDTH*(row-1))'.$EOL.'    t.setheading(0)'.$EOL.'    t.forward(HWIDTH-5)'.$EOL.'    t.left(90)'.$EOL.'    t.pendown()'.$EOL.'    t.circle(HWIDTH-5)'.$EOL.'#-----------------------------------------------------------'.$EOL.'# YOUR CODE BELOW HERE'.$EOL.'#-----------------------------------------------------------'.$EOL.'board = []'.$EOL.'for i in range(3):'.$EOL.'    row = []'.$EOL.'    for j in range(3):'.$EOL.'        row.append(-1)'.$EOL.'    board.append(row)'.$EOL.'def drawBoard():'.$EOL.'    drawHash()'.$EOL.'    for i in range(3):'.$EOL.'        for j in range(3):'.$EOL.'            value = board[i][j]'.$EOL.'            if value == 0:'.$EOL.'                drawo(i, j)'.$EOL.'            elif value == 1:'.$EOL.'                drawx(i, j)'.$EOL.'    t.update()'.$EOL.'# This variable keeps track of which player"s turn it is.'.$EOL.'# 0 is the O player and 1 is the X player.'.$EOL.'player = 0        '.$EOL.'def click(x, y):'.$EOL.'    global player'.$EOL.'    row = int((y + 3 * HWIDTH) // WIDTH)'.$EOL.'    col = int((x + 3 * HWIDTH) // WIDTH)'.$EOL.'    print("row: {} col: {} player: {}".format(row, col, player))'.$EOL.'    t.clear()'.$EOL.'    # TODO update board, redraw screen, and print board to text output'.$EOL.'    board[row][col] = player'.$EOL.'    player = 1-player'.$EOL.'    drawBoard()'.$EOL.'    print("board: " + str(board))'.$EOL.'screen.onclick(click)'.$EOL.'drawBoard()'.$EOL.'','module_id' => $module19->id,'previous_lesson_id' => $lesson44->id,'user_id' => $user->id]);
        $concept14= Concept::create(['name' => 'Try-Catch','course_id' => $course->id,'previous_concept_id' => $concept13->id,'user_id' => $user->id]);
        $module20= Module::create(['name' => 'Error Handling','concept_id' => $concept14->id,'open_date' => '2018-08-14 0:00:00','user_id' => $user->id]);
        $lesson45= Lesson::create(['name' => 'try and except','module_id' =>  $module20->id,'user_id' => $user->id]);
        $exercise697 = Exercise::create(['prompt' => 'This code prints "3". Change it to print "4" by changing the string you pass into the getInt() function.','pre_code' => '','start_code' => 'def getInt(s):'.$EOL.'    return int(s)'.$EOL.'i = getInt("3")'.$EOL.'print(i)'.$EOL.'','test_code' => 'test_out("4")'.$EOL.'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'user_id' => $user->id]);
        $exercise698 = Exercise::create(['prompt' => 'Note that this code fails because "three" can"t be converted to an integer. Change "three" to "3" to fix it.','pre_code' => '','start_code' => 'def getInt(s):'.$EOL.'    return int(s)'.$EOL.'i = getInt("three")'.$EOL.'print(i)'.$EOL.'','test_code' => 'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise697->id,'user_id' => $user->id]);
        $exercise699 = Exercise::create(['prompt' => 'This code tries to convert s to an integer. If the conversation fails, an "exception is raised". We catch the exception and return 0. Change the code so that -1 is returned if the conversation fails. Hint: change 0 to -1.','pre_code' => '','start_code' => '# Converts s to an integer and returns it.'.$EOL.'# Returns -1 if s can"t be converted to an integer.'.$EOL.'def getInt(s):'.$EOL.'    try:    '.$EOL.'        return int(s)'.$EOL.'    except:'.$EOL.'        return 0'.$EOL.'print(getInt("3") == 3)'.$EOL.'print(getInt("three") == -1)'.$EOL.'','test_code' => 'test_equal(getInt("a"), -1)'.$EOL.'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise698->id,'user_id' => $user->id]);
        $exercise700 = Exercise::create(['prompt' => 'Return -1 if the conversion to an integer fails.','pre_code' => '','start_code' => '# Converts s to an integer and returns it.'.$EOL.'# Returns -1 if s can"t be converted to an integer.'.$EOL.'def getInt(s):'.$EOL.'    try:    '.$EOL.'        return int(s)'.$EOL.'    except:'.$EOL.'print(getInt("3") == 3)'.$EOL.'print(getInt("three") == -1)'.$EOL.'','test_code' => 'test_equal(getInt("a"), -1)'.$EOL.'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise699->id,'user_id' => $user->id]);
        $exercise701 = Exercise::create(['prompt' => 'Attempt to return s as an integer.','pre_code' => '','start_code' => '# Converts s to an integer and returns it.'.$EOL.'# Returns -1 if s can"t be converted to an integer.'.$EOL.'def getInt(s):'.$EOL.'    try:    '.$EOL.'    except:'.$EOL.'        return -1'.$EOL.'print(getInt("3") == 3)'.$EOL.'print(getInt("three") == -1)'.$EOL.'','test_code' => 'test_equal(getInt("a"), -1)'.$EOL.'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise700->id,'user_id' => $user->id]);
        $exercise702 = Exercise::create(['prompt' => 'Implement getInt() as described in the comment. Don"t forget to use a try/except statement.','pre_code' => '','start_code' => '# Converts s to an integer and returns it.'.$EOL.'# Returns -1 if s can"t be converted to an integer.'.$EOL.'def getInt(s):'.$EOL.'print(getInt("3") == 3)'.$EOL.'print(getInt("three") == -1)'.$EOL.'','test_code' => 'test_equal(getInt("a"), -1)'.$EOL.'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise701->id,'user_id' => $user->id]);
        $exercise703 = Exercise::create(['prompt' => 'Fix the bug.','pre_code' => '','start_code' => '# Converts s to an integer and returns it.'.$EOL.'# Returns -1 if s can"t be converted to an integer.'.$EOL.'def getInt(s):'.$EOL.'    try:    '.$EOL.'    return int(s)'.$EOL.'    except:'.$EOL.'        return -1'.$EOL.'print(getInt("3") == 3)'.$EOL.'print(getInt("three") == -1)'.$EOL.'','test_code' => 'test_equal(getInt("a"), -1)'.$EOL.'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise702->id,'user_id' => $user->id]);
        $exercise704 = Exercise::create(['prompt' => 'Fix the bug.','pre_code' => '','start_code' => '# Converts s to an integer and returns it.'.$EOL.'# Returns -1 if s can"t be converted to an integer.'.$EOL.'def getInt(s):'.$EOL.'    try:    '.$EOL.'        return int(s)'.$EOL.'    except:'.$EOL.'    return -1'.$EOL.'print(getInt("3") == 3)'.$EOL.'print(getInt("three") == -1)'.$EOL.'','test_code' => 'test_equal(getInt("a"), -1)'.$EOL.'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise703->id,'user_id' => $user->id]);
        $exercise705 = Exercise::create(['prompt' => 'Fix the bug.','pre_code' => '','start_code' => '# Converts s to an integer and returns it.'.$EOL.'# Returns -1 if s can"t be converted to an integer.'.$EOL.'def getInt(s):'.$EOL.'    try:    '.$EOL.'        return int(s)'.$EOL.'    return -1'.$EOL.'print(getInt("3") == 3)'.$EOL.'print(getInt("three") == -1)'.$EOL.'','test_code' => 'test_equal(getInt("a"), -1)'.$EOL.'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise704->id,'user_id' => $user->id]);
        $exercise706 = Exercise::create(['prompt' => 'This code prints an error if conversion failed. Add a return statement.','pre_code' => '','start_code' => '# Converts s to an integer and returns it.'.$EOL.'# Returns -1 if s can"t be converted to an integer.'.$EOL.'def getInt(s):'.$EOL.'    try:    '.$EOL.'        return int(s)'.$EOL.'    except:'.$EOL.'        print("Failed to convert {} to an integer".format(s))'.$EOL.'print(getInt("3") == 3)'.$EOL.'print(getInt("three") == -1)'.$EOL.'','test_code' => 'test_equal(getInt("a"), -1)'.$EOL.'test_equal(getInt("5"), 5)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise705->id,'user_id' => $user->id]);
        $exercise707 = Exercise::create(['prompt' => 'This code prints an error if conversion failed. Add a return statement.','pre_code' => '','start_code' => '# Converts s and t to integers and returns their sum.'.$EOL.'# Returns -1 if either one can"t be converted to an integer.'.$EOL.'def add(s, t):'.$EOL.'    try:    '.$EOL.'        return int(s) + int(t)'.$EOL.'    except:'.$EOL.'        print("Failed to convert {} or {} to an integer".format(s, t))'.$EOL.'print(add("3", "4") == 7)'.$EOL.'print(add("three", "4") == -1)'.$EOL.'print(add("3", "four") == -1)'.$EOL.'','test_code' => 'test_equal(add("3", "4"), 7)'.$EOL.'test_equal(add("three", "4"), -1)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise706->id,'user_id' => $user->id]);
        $exercise708 = Exercise::create(['prompt' => 'Complete the function.','pre_code' => '','start_code' => '# Converts s and t to integers and returns their sum.'.$EOL.'# Returns -1 if either one can"t be converted to an integer.'.$EOL.'def add(s, t):'.$EOL.'    try:    '.$EOL.'    except:'.$EOL.'        print("Failed to convert {} or {} to an integer".format(s, t))'.$EOL.'print(add("3", "4") == 7)'.$EOL.'print(add("three", "4") == -1)'.$EOL.'print(add("3", "four") == -1)'.$EOL.'','test_code' => 'test_equal(add("3", "4"), 7)'.$EOL.'test_equal(add("three", "4"), -1)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise707->id,'user_id' => $user->id]);
        $exercise709 = Exercise::create(['prompt' => 'Fix the bug. Hint: put the assignment of a inside the try block.','pre_code' => '','start_code' => '# Converts s and t to integers and returns their sum.'.$EOL.'# Returns -1 if either one can"t be converted to an integer.'.$EOL.'def add(s, t):'.$EOL.'    a = int(s)'.$EOL.'    try:'.$EOL.'        b = int(t)    '.$EOL.'        return a + b'.$EOL.'    except:'.$EOL.'        print("Failed to convert {} or {} to an integer".format(s, t))'.$EOL.'        return -1'.$EOL.'print(add("3", "4") == 7)'.$EOL.'print(add("three", "4") == -1)'.$EOL.'print(add("3", "four") == -1)'.$EOL.'','test_code' => 'test_equal(add("3", "4"), 7)'.$EOL.'test_equal(add("three", "4"), -1)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise708->id,'user_id' => $user->id]);
        $exercise710 = Exercise::create(['prompt' => 'Fix the bug.','pre_code' => '','start_code' => '# Converts s and t to integers and returns their sum.'.$EOL.'# Returns -1 if either one can"t be converted to an integer.'.$EOL.'def add(s, t):'.$EOL.'    a = int(s)'.$EOL.'    b = int(t)    '.$EOL.'    try:'.$EOL.'        return a + b'.$EOL.'    except:'.$EOL.'        print("Failed to convert {} or {} to an integer".format(s, t))'.$EOL.'        return -1'.$EOL.'print(add("3", "4") == 7)'.$EOL.'print(add("three", "4") == -1)'.$EOL.'print(add("3", "four") == -1)'.$EOL.'','test_code' => 'test_equal(add("3", "4"), 7)'.$EOL.'test_equal(add("three", "4"), -1)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise709->id,'user_id' => $user->id]);
        $exercise711 = Exercise::create(['prompt' => 'Fix the bug.','pre_code' => '','start_code' => '# Converts s and t to integers and returns their sum.'.$EOL.'# Returns -1 if either one can"t be converted to an integer.'.$EOL.'def add(s, t):'.$EOL.'    try:'.$EOL.'        a = int(s)'.$EOL.'    except:'.$EOL.'        b = int(t)    '.$EOL.'        return a + b'.$EOL.'        print("Failed to convert {} or {} to an integer".format(s, t))'.$EOL.'        return -1'.$EOL.'print(add("3", "4") == 7)'.$EOL.'print(add("three", "4") == -1)'.$EOL.'print(add("3", "four") == -1)'.$EOL.'','test_code' => 'test_equal(add("3", "4"), 7)'.$EOL.'test_equal(add("three", "4"), -1)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise710->id,'user_id' => $user->id]);
        $exercise712 = Exercise::create(['prompt' => 'This code prints the elements in the list that can be converted to an integer. Add code so that sumNumbers returns the sum of all elements that can be converted to an integer.','pre_code' => '','start_code' => 'def sumNumbers(numbers):'.$EOL.'    for number in numbers:'.$EOL.'        try:'.$EOL.'            num = int(number)'.$EOL.'            print(num)'.$EOL.'        except ValueError:'.$EOL.'            print("Not able to convert " + number)'.$EOL.'numbers = ["one", "two", "3", "abc", "5"]'.$EOL.'print(sumNumbers(numbers) == 8)'.$EOL.'','test_code' => 'test_equal(sumNumbers(["a", "1", "b", "2"]), 3)'.$EOL.'','lesson_id' => $lesson45->id,'previous_exercise_id' => $exercise711->id,'user_id' => $user->id]);
        $project30 = Project::create(['name' => ' Green Eggs and Ham','open_date' => '2018-08-18 0:00:00','close_date' => '2018-08-20 0:00:00','prompt' => ''.$EOL.'<div>One of the most popular books written in the English language is "Green Eggs and Ham" by Dr. Seuss. The story goes that Bennett Cerf, co-founder of the publishing company Random House, bet Dr. Seuss (Theodore Geisel) that he couldn"t write a book using 50 unique words or less. The result is Green Eggs and Ham.'.$EOL.'<br><br>In this project, you will count the number of unique words. You are given the text of the book in a string variable called eggs. You will create a list called uniqueWords that will store each unique word. You will also create a function called isIn(word, uniqueWords) that returns true if word is in the uniqueWords list. You will use this function to build a list of all unique words in the book. Note that eggs.split() will give you a list of each word. For example, <pre>"This is this string".split()</pre> returns <pre>["This", "is", "this", "string"]</pre>'.$EOL.'After you"ve built the list, print the number of elements in the list to see if Dr. Seuss won the bet.'.$EOL.'<br><br>The next task is to print the number of times each word appears in the book. Your output should be something like the following:'.$EOL.'<pre>'.$EOL.'<br>There are 50 unique words in the book Green Eggs and Ham.'.$EOL.'<br>'.$EOL.'<br>Each word appears the following number of times:'.$EOL.'<br>I appears 83 times'.$EOL.'<br>AM appears 16 times'.$EOL.'<br>SAM appears 19 times'.$EOL.'<br>THAT appears 3 times'.$EOL.'<br>DO appears 37 times'.$EOL.'<br>NOT appears 82 times'.$EOL.'<br>LIKE appears 44 times'.$EOL.'<br>WOULD appears 27 times'.$EOL.'<br>...'.$EOL.'</pre>'.$EOL.'Write your code at the end of the file, after the "eggs" variable is initialized.'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => 'eggs= """I AM SAM. I AM SAM. SAM I AM.'.$EOL.'THAT SAM-I-AM! THAT SAM-I-AM! I DO NOT LIKE THAT SAM-I-AM!'.$EOL.'DO WOULD YOU LIKE GREEN EGGS AND HAM?'.$EOL.'I DO NOT LIKE THEM, SAM-I-AM.'.$EOL.'I DO NOT LIKE GREEN EGGS AND HAM.'.$EOL.'WOULD YOU LIKE THEM HERE OR THERE?'.$EOL.'I WOULD NOT LIKE THEM HERE OR THERE.'.$EOL.'I WOULD NOT LIKE THEM ANYWHERE.'.$EOL.'I DO NOT LIKE GREEN EGGS AND HAM.'.$EOL.'I DO NOT LIKE THEM, SAM-I-AM.'.$EOL.'WOULD YOU LIKE THEM IN A HOUSE?'.$EOL.'WOULD YOU LIKE THEM WITH A MOUSE?'.$EOL.'I DO NOT LIKE THEM IN A HOUSE.'.$EOL.'I DO NOT LIKE THEM WITH A MOUSE.'.$EOL.'I DO NOT LIKE THEM HERE OR THERE.'.$EOL.'I DO NOT LIKE THEM ANYWHERE.'.$EOL.'I DO NOT LIKE GREEN EGGS AND HAM.'.$EOL.'I DO NOT LIKE THEM, SAM-I-AM.'.$EOL.'WOULD YOU EAT THEM IN A BOX?'.$EOL.'WOULD YOU EAT THEM WITH A FOX?'.$EOL.'NOT IN A BOX. NOT WITH A FOX.'.$EOL.'NOT IN A HOUSE. NOT WITH A MOUSE.'.$EOL.'I WOULD NOT EAT THEM HERE OR THERE.'.$EOL.'I WOULD NOT EAT THEM ANYWHERE.'.$EOL.'I WOULD NOT EAT GREEN EGGS AND HAM.'.$EOL.'I DO NOT LIKE THEM, SAM-I-AM.'.$EOL.'WOULD YOU? COULD YOU? IN A CAR?'.$EOL.'EAT THEM! EAT THEM! HERE THEY ARE.'.$EOL.'I WOULD NOT, COULD NOT, IN A CAR.'.$EOL.'YOU MAY LIKE THEM. YOU WILL SEE.'.$EOL.'YOU MAY LIKE THEM IN A TREE!'.$EOL.'I WOULD NOT, COULD NOT IN A TREE.'.$EOL.'NOT IN A CAR! YOU LET ME BE.'.$EOL.'I DO NOT LIKE THEM IN A BOX.'.$EOL.'I DO NOT LIKE THEM WITH A FOX.'.$EOL.'I DO NOT LIKE THEM IN A HOUSE.'.$EOL.'I DO NOT LIKE THEM WITH A MOUSE.'.$EOL.'I DO NOT LIKE THEM HERE OR THERE.'.$EOL.'I DO NOT LIKE THEM ANYWHERE.'.$EOL.'I DO NOT LIKE GREEN EGGS AND HAM.'.$EOL.'I DO NOT LIKE THEM, SAM-I-AM.'.$EOL.'A TRAIN! A TRAIN! A TRAIN! A TRAIN!'.$EOL.'COULD YOU, WOULD YOU ON A TRAIN?'.$EOL.'NOT ON TRAIN! NOT IN A TREE!'.$EOL.'NOT IN A CAR! SAM! LET ME BE!'.$EOL.'I WOULD NOT, COULD NOT, IN A BOX.'.$EOL.'I WOULD NOT, COULD NOT, WITH A FOX.'.$EOL.'I WILL NOT EAT THEM IN A HOUSE.'.$EOL.'I WILL NOT EAT THEM HERE OR THERE.'.$EOL.'I WILL NOT EAT THEM ANYWHERE.'.$EOL.'I DO NOT EAT GREEN EGGS AND HAM.'.$EOL.'I DO NOT LIKE THEM, SAM-I-AM.'.$EOL.'SAY! IN THE DARK? HERE IN THE DARK!'.$EOL.'WOULD YOU, COULD YOU, IN THE DARK?'.$EOL.'I WOULD NOT, COULD NOT, IN THE DARK.'.$EOL.'WOULD YOU COULD YOU IN THE RAIN?'.$EOL.'I WOULD NOT, COULD NOT IN THE RAIN.'.$EOL.'NOT IN THE DARK. NOT ON A TRAIN.'.$EOL.'NOT IN A CAR. NOT IN A TREE.'.$EOL.'I DO NOT LIKE THEM, SAM, YOU SEE.'.$EOL.'NOT IN A HOUSE. NOT IN A BOX.'.$EOL.'NOT WITH A MOUSE. NOT WITH A FOX.'.$EOL.'I WILL NOT EAT THEM HERE OR THERE.'.$EOL.'I DO NOT LIKE THEM ANYWHERE!'.$EOL.'YOU DO NOT LIKE GREEN EGGS AND HAM?'.$EOL.'I DO NOT LIKE THEM, SAM-I-AM.'.$EOL.'COULD YOU, WOULD YOU, WITH A GOAT?'.$EOL.'I WOULD NOT, COULD NOT WITH A GOAT!'.$EOL.'WOULD YOU, COULD YOU, ON A BOAT?'.$EOL.'I COULD NOT, WOULD NOT, ON A BOAT.'.$EOL.'I WILL NOT, WILL NOT, WITH A GOAT.'.$EOL.'I WILL NOT EAT THEM IN THE RAIN.'.$EOL.'NOT IN THE DARK! NOT IN A TREE!'.$EOL.'NOT IN A CAR! YOU LET ME BE!'.$EOL.'I DO NOT LIKE THEM IN A BOX.'.$EOL.'I DO NOT LIKE THEM WITH A FOX.'.$EOL.'I WILL NOT EAT THEM IN A HOUSE.'.$EOL.'I DO NOT LIKE THEM WITH A MOUSE.'.$EOL.'I DO NOT LIKE THEM HERE OR THERE.'.$EOL.'I DO NOT LIKE THEM ANYWHERE!'.$EOL.'I DO NOT LIKE GREEN EGGS AND HAM!'.$EOL.'I DO NOT LIKE THEM, SAM-I-AM.'.$EOL.'YOU DO NOT LIKE THEM. SO YOU SAY.'.$EOL.'TRY THEM! TRY THEM! AND YOU MAY.'.$EOL.'TRY THEM AND YOU MAY, I SAY.'.$EOL.'SAM! IF YOU LET ME BE,'.$EOL.'I WILL TRY THEM. YOU WILL SEE.'.$EOL.'SAY! I LIKE GREEN EGGS AND HAM!'.$EOL.'I DO! I LIKE THEM, SAM-I-AM!'.$EOL.'AND I WOULD EAT THEM IN A BOAT.'.$EOL.'AND I WOULD EAT THEM WITH A GOAT...'.$EOL.'AND I WILL EAT THEM, IN THE RAIN.'.$EOL.'AND IN THE DARK. AND ON A TRAIN.'.$EOL.'AND IN A CAR. AND IN A TREE.'.$EOL.'THEY ARE SO GOOD, SO GOOD, YOU SEE!'.$EOL.'SO I WILL EAT THEM IN A BOX.'.$EOL.'AND I WILL EAT THEM WITH A FOX.'.$EOL.'AND I WILL EAT THEM IN A HOUSE.'.$EOL.'AND I WILL EAT THEM WITH A MOUSE.'.$EOL.'AND I WILL EAT THEM HERE AND THERE.'.$EOL.'SAY! I WILL EAT THEM ANYWHERE!'.$EOL.'I DO SO LIKE GREEN EGGS AND HAM!'.$EOL.'THANK YOU! THANK YOU, SAM I AM."""'.$EOL.'# Take out punctuation'.$EOL.'eggs = eggs.replace(".","").replace("!","").replace("?","").replace(",","").replace("-"," ")'.$EOL.'#print(eggs)'.$EOL.'# TODO: Do your work here'.$EOL.'','solution' => 'eggsake out punctuation'.$EOL.'eggs = eggs.replace(".","").replace("!","").replace("?","").replace(",","").replace("-"," ")'.$EOL.'#print(eggs)'.$EOL.'# TODO: Do your work here'.$EOL.'uniqueWords = []'.$EOL.'def isIn(word, uniqueWords):'.$EOL.'    for w in uniqueWords:'.$EOL.'        if word == w:'.$EOL.'            return True'.$EOL.'    return False'.$EOL.'for word in eggs.split():'.$EOL.'    if not isIn(word, uniqueWords):'.$EOL.'        uniqueWords.append(word)'.$EOL.'print(len(uniqueWords))'.$EOL.'#print(uniqueWords)'.$EOL.'for w in uniqueWords:'.$EOL.'    count = 0'.$EOL.'    for word in eggs.split():'.$EOL.'        if word == w:'.$EOL.'            count += 1'.$EOL.'    print("{} appears {} times".format(w, count))'.$EOL.'','module_id' => $module20->id,'previous_lesson_id' => $lesson45->id,'user_id' => $user->id]);
        $project31 = Project::create(['name' => ' Student database II','open_date' => '2018-08-18 0:00:00','close_date' => '2018-08-20 0:00:00','prompt' => ''.$EOL.'<div>'.$EOL.'In this project you will start getting familiar with some concepts used in C#. You will add Get and Set methods to the Student class and you will also add functions to parse the students from a data string. First look at the TODO comments. When you uncomment a line you will need to implement the function it calls. Uncomment lines one at a time and test to make sure they work before uncommenting the next line.'.$EOL.'<p><p>You will need to test if a string contains another string. You can use the "in" keyword for this. For example, "abc" in "abcd" evaluates to True. "abcd" in "abc" evaluates to False. Some example code would be:'.$EOL.'<pre>'.$EOL.'s = "How"<br>'.$EOL.'name = "Howie"<br>'.$EOL.'if s in name:<br>'.$EOL.'    ...'.$EOL.'</pre>'.$EOL.'</div>'.$EOL.'','pre_code' => '','start_code' => '# Uncomment the lines marked with TODO and implement functions'.$EOL.'# and methods as necessary. When you"re all done, the program'.$EOL.'# should print the following:'.$EOL.'#      Name: Paris Byram'.$EOL.'#      Major: CS'.$EOL.'#      Averages: 75 95 84.00'.$EOL.'#      '.$EOL.'#      Name: Berenice Tavares'.$EOL.'#      Major: CS'.$EOL.'#      Averages: 85 78 81.85'.$EOL.'#      '.$EOL.'#      Name: Lawanda Kugel'.$EOL.'#      Major: INFO'.$EOL.'#      Averages: 33 95 60.90'.$EOL.'#      '.$EOL.'#      Name: Rebecca Geisler'.$EOL.'#      Major: CS'.$EOL.'#      Averages: 98 80 89.90'.$EOL.'#      '.$EOL.'#      Name: Jerry Redmond'.$EOL.'#      Major: INFO'.$EOL.'#      Averages: 97 95 96.10'.$EOL.'#      '.$EOL.'#      Name: Paul Smith'.$EOL.'#      Major: EE'.$EOL.'#      Averages: 99 90 94.95'.$EOL.'#      '.$EOL.'#      CS Count: 3'.$EOL.'#      INFO Count: 2'.$EOL.'#      EE Count: 1'.$EOL.'#      '.$EOL.'#      Paris Byram matched "B"'.$EOL.'#      Berenice Tavares matched "B"'.$EOL.'#      Jerry Redmond matched "je"'.$EOL.'#      None'.$EOL.'class Student():'.$EOL.'    def __init__(self):'.$EOL.'        # DO NOT modify the constructor. You should add Get and Set'.$EOL.'        # methods instead. You will also need to implement a'.$EOL.'        # ToString() method.'.$EOL.'        self.name = "No Name"'.$EOL.'        self.major = "No Major"'.$EOL.'        self.assignmentAverage = 0'.$EOL.'        self.testAverage = 0'.$EOL.'        self.overallGrade = 0.0'.$EOL.'def PrintStudentList(students):'.$EOL.'    for s in students:'.$EOL.'        print(s.ToString())'.$EOL.'# TODO: uncomment these lines'.$EOL.'#dataString = "Paris Byram CS 75 95 84.00|Berenice Tavares CS 85 78 81.85|Lawanda Kugel INFO 33 95 60.90|Rebecca Geisler CS 98 80 89.90|Jerry Redmond INFO 97 95 96.10|Paul Smith EE 99 90 94.95"'.$EOL.'#students = CreateStudentList(dataString)'.$EOL.'#PrintStudentList(students) # Implement Student.ToString()'.$EOL.'#PrintMajorCounts(students)'.$EOL.'# The FindStudentByLastName function should return None'.$EOL.'# if there is no student with that last name. FindStudentByFirstName'.$EOL.'# should behave similarly.'.$EOL.'# TODO: uncomment these lines'.$EOL.'#s = FindStudentByLastName(students, "B")'.$EOL.'#print(s.GetName() + " matched "B"")'.$EOL.'#s = FindStudentByFirstName(students, "B")'.$EOL.'#print(s.GetName() + " matched "B"")'.$EOL.'#s = FindStudentByFirstName(students, "je")'.$EOL.'#print(s.GetName() + " matched "je"")'.$EOL.'#s = FindStudentByFirstName(students, "zer")'.$EOL.'#print(s)','solution' => '# Uncomment the lines marked with TODO and implement functions'.$EOL.'# and methods as necessary. When you"re all done, the program'.$EOL.'# should print the following:'.$EOL.'#      Name: Paris Byram'.$EOL.'#      Major: CS'.$EOL.'#      Averages: 75 95 84.00'.$EOL.'#      '.$EOL.'#      Name: Berenice Tavares'.$EOL.'#      Major: CS'.$EOL.'#      Averages: 85 78 81.85'.$EOL.'#      '.$EOL.'#      Name: Lawanda Kugel'.$EOL.'#      Major: INFO'.$EOL.'#      Averages: 33 95 60.90'.$EOL.'#      '.$EOL.'#      Name: Rebecca Geisler'.$EOL.'#      Major: CS'.$EOL.'#      Averages: 98 80 89.90'.$EOL.'#      '.$EOL.'#      Name: Jerry Redmond'.$EOL.'#      Major: INFO'.$EOL.'#      Averages: 97 95 96.10'.$EOL.'#      '.$EOL.'#      Name: Paul Smith'.$EOL.'#      Major: EE'.$EOL.'#      Averages: 99 90 94.95'.$EOL.'#      '.$EOL.'#      CS Count: 3'.$EOL.'#      INFO Count: 2'.$EOL.'#      EE Count: 1'.$EOL.'#      '.$EOL.'#      Paris Byram matched "B"'.$EOL.'#      Berenice Tavares matched "B"'.$EOL.'#      Jerry Redmond matched "je"'.$EOL.'#      None'.$EOL.'class Student():'.$EOL.'    def __init__(self):'.$EOL.'        # DO NOT modify the constructor. You should add Get and Set'.$EOL.'        # methods instead.'.$EOL.'        self.name = "No Name"'.$EOL.'        self.major = "No Major"'.$EOL.'        self.assignmentAverage = 0'.$EOL.'        self.testAverage = 0'.$EOL.'        self.overallGrade = 0.0'.$EOL.'    def GetName(self):'.$EOL.'        return self.name'.$EOL.'    def GetMajor(self):'.$EOL.'        return self.major'.$EOL.'    def GetAssignmentAverage(self):'.$EOL.'        return self.assignmentAverage'.$EOL.'    def GetTestAverage(self):'.$EOL.'        return self.testAverage'.$EOL.'    def GetOverallGrade(self):'.$EOL.'        return self.overallGrade'.$EOL.'    def SetName(self, value):'.$EOL.'        self.name = value'.$EOL.'    def SetMajor(self, value):'.$EOL.'        self.major = value'.$EOL.'    def SetAssignmentAverage(self, value):'.$EOL.'        self.assignmentAverage = value'.$EOL.'    def SetTestAverage(self, value):'.$EOL.'        self.testAverage = value'.$EOL.'    def SetOverallGrade(self, value):'.$EOL.'        self.overallGrade = value'.$EOL.'    def ToString(self):'.$EOL.'        returnString = "Name: " + self.name + "\nMajor: " + self.major'.$EOL.'        returnString += "\nAverages: " + self.assignmentAverage + " " + self.testAverage'.$EOL.'        returnString += " " + self.overallGrade + "\n"'.$EOL.'        return returnString'.$EOL.'#Takes in a list of students and prints each unique major'.$EOL.'#and how many times a Student with that major appeared in the list '.$EOL.'def PrintMajorCounts(lst):'.$EOL.'    lstMajors = []'.$EOL.'    lstCounts = []'.$EOL.'    for i in lst:'.$EOL.'        tempMajor = i.GetMajor()'.$EOL.'        if tempMajor not in lstMajors:'.$EOL.'            lstMajors.append(tempMajor)'.$EOL.'            lstCounts.append(1)'.$EOL.'        else:'.$EOL.'            lstCounts[lstMajors.index(tempMajor)] += 1'.$EOL.'    for i in range(len(lstMajors)):'.$EOL.'        print(lstMajors[i] + " Count: " + str(lstCounts[i]))'.$EOL.'    print("")'.$EOL.'#Take in a string and an index for a Students name'.$EOL.'# (0 for first name, 1 for last name). Print each'.$EOL.'# student where their name at nameIndex starts with'.$EOL.'# the passed in string.'.$EOL.'def FindStudentByFirstOrLastName(students, letter, nameIndex):'.$EOL.'    if nameIndex is not 0 and nameIndex is not 1:'.$EOL.'        print("The passed in nameIndex needs to be a 0 or a 1.")'.$EOL.'        return'.$EOL.'    for i in students:'.$EOL.'        name = i.GetName()'.$EOL.'        if letter.lower() in name.split(" ")[nameIndex].lower()[0:len(letter)]:'.$EOL.'            print("Student "" + name + "" matched the string "" + letter + """)'.$EOL.'            return'.$EOL.'    if nameIndex is 0:'.$EOL.'        print("No Student\"s first name matches "" + letter + """)'.$EOL.'    elif nameIndex is 1:'.$EOL.'        print("No Student\"s last name matches "" + letter + """)'.$EOL.'def FindStudentByFirstName(students, findName):'.$EOL.'    for s in students:'.$EOL.'        name = s.GetName().split(" ")[0]'.$EOL.'        if findName.lower() in name.lower():'.$EOL.'            return s'.$EOL.'    return None'.$EOL.'def FindStudentByLastName(students, findName):'.$EOL.'    for s in students:'.$EOL.'        name = s.GetName().split(" ")[1]'.$EOL.'        if findName.lower() in name.lower():'.$EOL.'            return s'.$EOL.'    return None'.$EOL.'def CreateStudentList(dataString):'.$EOL.'    students = []'.$EOL.'    studentTokens = dataString.split("|")'.$EOL.'    for studentToken in studentTokens:'.$EOL.'        s = Student()'.$EOL.'        j = studentToken.split(" ")'.$EOL.'        s.SetName(j[0] + " " + j[1])'.$EOL.'        s.SetMajor(j[2])'.$EOL.'        s.SetAssignmentAverage(j[3])'.$EOL.'        s.SetTestAverage(j[4])'.$EOL.'        s.SetOverallGrade(j[5])'.$EOL.'        students.append(s)'.$EOL.'    return students'.$EOL.'def PrintStudentList(students):'.$EOL.'    for s in students:'.$EOL.'        print(s.ToString())'.$EOL.'# TODO: uncomment these lines'.$EOL.'dataString = "Paris Byram CS 75 95 84.00|Berenice Tavares CS 85 78 81.85|Lawanda Kugel INFO 33 95 60.90|Rebecca Geisler CS 98 80 89.90|Jerry Redmond INFO 97 95 96.10|Paul Smith EE 99 90 94.95"'.$EOL.'students = CreateStudentList(dataString)'.$EOL.'PrintStudentList(students) # Implement Student.ToString()'.$EOL.'PrintMajorCounts(students)'.$EOL.'# The FindStudentByLastName function should return None'.$EOL.'# if there is no student with a last name that contains the given string.'.$EOL.'# that last name. FindStudentByFirstName should behave similarly.'.$EOL.'# TODO: uncomment these lines'.$EOL.'s = FindStudentByLastName(students, "B")'.$EOL.'print(s.GetName() + " matched "B"")'.$EOL.'s = FindStudentByFirstName(students, "B")'.$EOL.'print(s.GetName() + " matched "B"")'.$EOL.'s = FindStudentByFirstName(students, "je")'.$EOL.'print(s.GetName() + " matched "je"")'.$EOL.'s = FindStudentByFirstName(students, "zer")'.$EOL.'print(s)'.$EOL.'','module_id' => $module20->id,'previous_lesson_id' => $lesson45->id,'user_id' => $user->id]);

        #endregion



        // Get Teacher role id
        $teacher_role_id = DB::table('roles')->where('name', Roles::TEACHER)->first()->id;
        // Get Teaching Assistant role id
        $assist_role_id = DB::table('roles')->where('name', Roles::TEACHING_ASSISTANT)->first()->id;
        // Get Student role id
        $student_role_id = DB::table('roles')->where('name', Roles::STUDENT)->first()->id;

        // Add the owner of the course as a teacher in the course
        $course->users()->attach([
            $course->user->id => ['role_id' => $teacher_role_id]
        ]);

        // Add users to the course as teaching assistants
        $course->users()->attach([
            DB::table('users')->where('name', 'Teaching Assistant 1')->first()->id => ['role_id' => $assist_role_id]
        ]);

        // Add users to the course as students
        $course->users()->attach([
            DB::table('users')->where('name', 'Test Student 1')->first()->id => ['role_id' => $student_role_id],
            DB::table('users')->where('name', 'Test Student 2')->first()->id => ['role_id' => $student_role_id],
            DB::table('users')->where('name', 'Test Student 3')->first()->id => ['role_id' => $student_role_id]
        ]);
    }
}
